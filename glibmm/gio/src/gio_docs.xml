<root>
<function name="fen_add">
<description>
Won't hold a ref, we have a timout callback to clean unused node_t.
If there is no value for a key, add it and return it; else return the old
one.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="fen_init">
<description>
FEN subsystem initializing.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_action_activate">
<description>
Activates the action.

@parameter must be the correct type of parameter for the action (ie:
the parameter type given at construction time).  If the parameter
type was %NULL then @parameter must also be %NULL.

Since: 2.28

</description>
<parameters>
<parameter name="action">
<parameter_description> a #GAction
</parameter_description>
</parameter>
<parameter name="parameter">
<parameter_description> the parameter to the activation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_action_get_enabled">
<description>
Checks if @action is currently enabled.

An action must be enabled in order to be activated or in order to
have its state changed from outside callers.

Since: 2.28

</description>
<parameters>
<parameter name="action">
<parameter_description> a #GAction
</parameter_description>
</parameter>
</parameters>
<return> whether the action is enabled

</return>
</function>

<function name="g_action_get_name">
<description>
Queries the name of @action.

Since: 2.28

</description>
<parameters>
<parameter name="action">
<parameter_description> a #GAction
</parameter_description>
</parameter>
</parameters>
<return> the name of the action

</return>
</function>

<function name="g_action_get_parameter_type">
<description>
Queries the type of the parameter that must be given when activating
@action.

When activating the action using g_action_activate(), the #GVariant
given to that function must be of the type returned by this function.

In the case that this function returns %NULL, you must not give any
#GVariant, but %NULL instead.

Since: 2.28

</description>
<parameters>
<parameter name="action">
<parameter_description> a #GAction
</parameter_description>
</parameter>
</parameters>
<return> the parameter type

</return>
</function>

<function name="g_action_get_state">
<description>
Queries the current state of @action.

If the action is not stateful then %NULL will be returned.  If the
action is stateful then the type of the return value is the type
given by g_action_get_state_type().

The return value (if non-%NULL) should be freed with
g_variant_unref() when it is no longer required.

Since: 2.28

</description>
<parameters>
<parameter name="action">
<parameter_description> a #GAction
</parameter_description>
</parameter>
</parameters>
<return> the current state of the action

</return>
</function>

<function name="g_action_get_state_hint">
<description>
Requests a hint about the valid range of values for the state of
@action.

If %NULL is returned it either means that the action is not stateful
or that there is no hint about the valid range of values for the
state of the action.

If a #GVariant array is returned then each item in the array is a
possible value for the state.  If a #GVariant pair (ie: two-tuple) is
returned then the tuple specifies the inclusive lower and upper bound
of valid values for the state.

In any case, the information is merely a hint.  It may be possible to
have a state value outside of the hinted range and setting a value
within the range may fail.

The return value (if non-%NULL) should be freed with
g_variant_unref() when it is no longer required.

Since: 2.28

</description>
<parameters>
<parameter name="action">
<parameter_description> a #GAction
</parameter_description>
</parameter>
</parameters>
<return> the state range hint

</return>
</function>

<function name="g_action_get_state_type">
<description>
Queries the type of the state of @action.

If the action is stateful (ie: was created with
g_action_new_stateful()) then this function returns the #GVariantType
of the state.  This is the type of the initial value given as the
state.  All calls to g_action_set_state() must give a #GVariant of
this type and g_action_get_state() will return a #GVariant of the
same type.

If the action is not stateful (ie: created with g_action_new()) then
this function will return %NULL.  In that case, g_action_get_state()
will return %NULL and you must not call g_action_set_state().

Since: 2.28

</description>
<parameters>
<parameter name="action">
<parameter_description> a #GAction
</parameter_description>
</parameter>
</parameters>
<return> the state type, if the action is stateful

</return>
</function>

<function name="g_action_group_action_added">
<description>
Emits the #GActionGroup::action-added signal on @action_group.

This function should only be called by #GActionGroup implementations.

Since: 2.28

</description>
<parameters>
<parameter name="action_group">
<parameter_description> a #GActionGroup
</parameter_description>
</parameter>
<parameter name="action_name">
<parameter_description> the name of an action in the group
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_action_group_action_enabled_changed">
<description>
Emits the #GActionGroup::action-enabled-changed signal on @action_group.

This function should only be called by #GActionGroup implementations.

Since: 2.28

</description>
<parameters>
<parameter name="action_group">
<parameter_description> a #GActionGroup
</parameter_description>
</parameter>
<parameter name="action_name">
<parameter_description> the name of an action in the group
</parameter_description>
</parameter>
<parameter name="enabled">
<parameter_description> whether or not the action is now enabled
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_action_group_action_removed">
<description>
Emits the #GActionGroup::action-removed signal on @action_group.

This function should only be called by #GActionGroup implementations.

Since: 2.28

</description>
<parameters>
<parameter name="action_group">
<parameter_description> a #GActionGroup
</parameter_description>
</parameter>
<parameter name="action_name">
<parameter_description> the name of an action in the group
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_action_group_action_state_changed">
<description>
Emits the #GActionGroup::action-state-changed signal on @action_group.

This function should only be called by #GActionGroup implementations.

Since: 2.28

</description>
<parameters>
<parameter name="action_group">
<parameter_description> a #GActionGroup
</parameter_description>
</parameter>
<parameter name="action_name">
<parameter_description> the name of an action in the group
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> the new state of the named action
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_action_group_activate_action">
<description>
Activate the named action within @action_group.

If the action is expecting a parameter, then the correct type of
parameter must be given as @parameter.  If the action is expecting no
parameters then @parameter must be %NULL.  See
g_action_group_get_parameter_type().

Since: 2.28

</description>
<parameters>
<parameter name="action_group">
<parameter_description> a #GActionGroup
</parameter_description>
</parameter>
<parameter name="action_name">
<parameter_description> the name of the action to activate
</parameter_description>
</parameter>
<parameter name="parameter">
<parameter_description> parameters to the activation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_action_group_change_action_state">
<description>
Request for the state of the named action within @action_group to be
changed to @value.

The action must be stateful and @value must be of the correct type.
See g_action_group_get_state_type().

This call merely requests a change.  The action may refuse to change
its state or may change its state to something other than @value.
See g_action_group_get_state_hint().

If the @value GVariant is floating, it is consumed.

Since: 2.28

</description>
<parameters>
<parameter name="action_group">
<parameter_description> a #GActionGroup
</parameter_description>
</parameter>
<parameter name="action_name">
<parameter_description> the name of the action to request the change on
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the new state
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_action_group_get_action_enabled">
<description>
Checks if the named action within @action_group is currently enabled.

An action must be enabled in order to be activated or in order to
have its state changed from outside callers.

Since: 2.28

</description>
<parameters>
<parameter name="action_group">
<parameter_description> a #GActionGroup
</parameter_description>
</parameter>
<parameter name="action_name">
<parameter_description> the name of the action to query
</parameter_description>
</parameter>
</parameters>
<return> whether or not the action is currently enabled

</return>
</function>

<function name="g_action_group_get_action_parameter_type">
<description>
Queries the type of the parameter that must be given when activating
the named action within @action_group.

When activating the action using g_action_group_activate(), the
#GVariant given to that function must be of the type returned by this
function.

In the case that this function returns %NULL, you must not give any
#GVariant, but %NULL instead.

The parameter type of a particular action will never change but it is
possible for an action to be removed and for a new action to be added
with the same name but a different parameter type.

Since: 2.28

</description>
<parameters>
<parameter name="action_group">
<parameter_description> a #GActionGroup
</parameter_description>
</parameter>
<parameter name="action_name">
<parameter_description> the name of the action to query
</parameter_description>
</parameter>
</parameters>
<return> the parameter type

</return>
</function>

<function name="g_action_group_get_action_state">
<description>
Queries the current state of the named action within @action_group.

If the action is not stateful then %NULL will be returned.  If the
action is stateful then the type of the return value is the type
given by g_action_group_get_state_type().

The return value (if non-%NULL) should be freed with
g_variant_unref() when it is no longer required.

Since: 2.28

</description>
<parameters>
<parameter name="action_group">
<parameter_description> a #GActionGroup
</parameter_description>
</parameter>
<parameter name="action_name">
<parameter_description> the name of the action to query
</parameter_description>
</parameter>
</parameters>
<return> the current state of the action

</return>
</function>

<function name="g_action_group_get_action_state_hint">
<description>
Requests a hint about the valid range of values for the state of the
named action within @action_group.

If %NULL is returned it either means that the action is not stateful
or that there is no hint about the valid range of values for the
state of the action.

If a #GVariant array is returned then each item in the array is a
possible value for the state.  If a #GVariant pair (ie: two-tuple) is
returned then the tuple specifies the inclusive lower and upper bound
of valid values for the state.

In any case, the information is merely a hint.  It may be possible to
have a state value outside of the hinted range and setting a value
within the range may fail.

The return value (if non-%NULL) should be freed with
g_variant_unref() when it is no longer required.

Since: 2.28

</description>
<parameters>
<parameter name="action_group">
<parameter_description> a #GActionGroup
</parameter_description>
</parameter>
<parameter name="action_name">
<parameter_description> the name of the action to query
</parameter_description>
</parameter>
</parameters>
<return> the state range hint

</return>
</function>

<function name="g_action_group_get_action_state_type">
<description>
Queries the type of the state of the named action within
@action_group.

If the action is stateful then this function returns the
#GVariantType of the state.  All calls to g_action_group_set_state()
must give a #GVariant of this type and g_action_group_get_state()
will return a #GVariant of the same type.

If the action is not stateful then this function will return %NULL.
In that case, g_action_group_get_state() will return %NULL and you
must not call g_action_group_set_state().

The state type of a particular action will never change but it is
possible for an action to be removed and for a new action to be added
with the same name but a different state type.

Since: 2.28

</description>
<parameters>
<parameter name="action_group">
<parameter_description> a #GActionGroup
</parameter_description>
</parameter>
<parameter name="action_name">
<parameter_description> the name of the action to query
</parameter_description>
</parameter>
</parameters>
<return> the state type, if the action is stateful

</return>
</function>

<function name="g_action_group_has_action">
<description>
Checks if the named action exists within @action_group.

Since: 2.28

</description>
<parameters>
<parameter name="action_group">
<parameter_description> a #GActionGroup
</parameter_description>
</parameter>
<parameter name="action_name">
<parameter_description> the name of the action to check for
</parameter_description>
</parameter>
</parameters>
<return> whether the named action exists

</return>
</function>

<function name="g_action_group_list_actions">
<description>
Lists the actions contained within @action_group.

The caller is responsible for freeing the list with g_strfreev() when
it is no longer required.

Since: 2.28

</description>
<parameters>
<parameter name="action_group">
<parameter_description> a #GActionGroup
</parameter_description>
</parameter>
</parameters>
<return> a %NULL-terminated array of the names of the
actions in the groupb

</return>
</function>

<function name="g_action_set_state">
<description>
Request for the state of @action to be changed to @value.

The action must be stateful and @value must be of the correct type.
See g_action_get_state_type().

This call merely requests a change.  The action may refuse to change
its state or may change its state to something other than @value.
See g_action_get_state_hint().

If the @value GVariant is floating, it is consumed.

Since: 2.28

</description>
<parameters>
<parameter name="action">
<parameter_description> a #GAction
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the new state
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_app_info_add_supports_type">
<description>
Adds a content type to the application information to indicate the 
application is capable of opening files with the given content type.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
<parameter name="content_type">
<parameter_description> a string.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on error.
</return>
</function>

<function name="g_app_info_can_delete">
<description>
Obtains the information whether the #GAppInfo can be deleted.
See g_app_info_delete().

Since: 2.20

</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @appinfo can be deleted

</return>
</function>

<function name="g_app_info_can_remove_supports_type">
<description>
Checks if a supported content type can be removed from an application.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if it is possible to remove supported 
content types from a given @appinfo, %FALSE if not.
</return>
</function>

<function name="g_app_info_create_from_commandline">
<description>
Creates a new #GAppInfo from the given information.


</description>
<parameters>
<parameter name="commandline">
<parameter_description> the commandline to use
</parameter_description>
</parameter>
<parameter name="application_name">
<parameter_description> the application name, or %NULL to use @commandline
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags that can specify details of the created #GAppInfo
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> new #GAppInfo for given command.
</return>
</function>

<function name="g_app_info_delete">
<description>
Tries to delete a #GAppInfo.

On some platforms, there may be a difference between user-defined
#GAppInfo&lt;!-- --&gt;s which can be deleted, and system-wide ones which
cannot. See g_app_info_can_delete().

Virtual: do_delete
Since: 2.20

</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @appinfo has been deleted

</return>
</function>

<function name="g_app_info_dup">
<description>
Creates a duplicate of a #GAppInfo.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> a duplicate of @appinfo.
</return>
</function>

<function name="g_app_info_equal">
<description>
Checks if two #GAppInfo&lt;!-- --&gt;s are equal.


</description>
<parameters>
<parameter name="appinfo1">
<parameter_description> the first #GAppInfo.
</parameter_description>
</parameter>
<parameter name="appinfo2">
<parameter_description> the second #GAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @appinfo1 is equal to @appinfo2. %FALSE otherwise.
</return>
</function>

<function name="g_app_info_get_all">
<description>
Gets a list of all of the applications currently registered 
on this system.

For desktop files, this includes applications that have 
&lt;literal&gt;NoDisplay=true&lt;/literal&gt; set or are excluded from 
display by means of &lt;literal&gt;OnlyShowIn&lt;/literal&gt; or
&lt;literal&gt;NotShowIn&lt;/literal&gt;. See g_app_info_should_show().
The returned list does not include applications which have
the &lt;literal&gt;Hidden&lt;/literal&gt; key set. 


</description>
<parameters>
</parameters>
<return> a newly allocated #GList of references to #GAppInfo&lt;!----&gt;s.
</return>
</function>

<function name="g_app_info_get_all_for_type">
<description>
Gets a list of all #GAppInfos for a given content type.


</description>
<parameters>
<parameter name="content_type">
<parameter_description> the content type to find a #GAppInfo for
</parameter_description>
</parameter>
</parameters>
<return> #GList of #GAppInfos
for given @content_type or %NULL on error.
</return>
</function>

<function name="g_app_info_get_commandline">
<description>
Gets the commandline with which the application will be
started.  

Since: 2.20

</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo
</parameter_description>
</parameter>
</parameters>
<return> a string containing the @appinfo's commandline, 
or %NULL if this information is not available

</return>
</function>

<function name="g_app_info_get_default_for_type">
<description>
Gets the #GAppInfo that corresponds to a given content type.


</description>
<parameters>
<parameter name="content_type">
<parameter_description> the content type to find a #GAppInfo for
</parameter_description>
</parameter>
<parameter name="must_support_uris">
<parameter_description> if %TRUE, the #GAppInfo is expected to
support URIs
</parameter_description>
</parameter>
</parameters>
<return> #GAppInfo for given @content_type or
%NULL on error.
</return>
</function>

<function name="g_app_info_get_default_for_uri_scheme">
<description>
Gets the default application for launching applications 
using this URI scheme. A URI scheme is the initial part 
of the URI, up to but not including the ':', e.g. &quot;http&quot;, 
&quot;ftp&quot; or &quot;sip&quot;.


</description>
<parameters>
<parameter name="uri_scheme">
<parameter_description> a string containing a URI scheme.
</parameter_description>
</parameter>
</parameters>
<return> #GAppInfo for given @uri_scheme or %NULL on error.
</return>
</function>

<function name="g_app_info_get_description">
<description>
Gets a human-readable description of an installed application.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> a string containing a description of the 
application @appinfo, or %NULL if none. 
</return>
</function>

<function name="g_app_info_get_display_name">
<description>
Gets the display name of the application. The display name is often more
descriptive to the user than the name itself.

Since: 2.24

</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> the display name of the application for @appinfo, or the name if
no display name is available.

</return>
</function>

<function name="g_app_info_get_executable">
<description>
Gets the executable's name for the installed application.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo
</parameter_description>
</parameter>
</parameters>
<return> a string containing the @appinfo's application 
binaries name
</return>
</function>

<function name="g_app_info_get_fallback_for_type">
<description>
Gets a list of fallback #GAppInfos for a given content type, i.e.
those applications which claim to support the given content type
by MIME type subclassing and not directly.

Since: 2.28

</description>
<parameters>
<parameter name="content_type">
<parameter_description> the content type to find a #GAppInfo for
</parameter_description>
</parameter>
</parameters>
<return> #GList of #GAppInfos
for given @content_type or %NULL on error.

</return>
</function>

<function name="g_app_info_get_icon">
<description>
Gets the icon for the application.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> the default #GIcon for @appinfo.
</return>
</function>

<function name="g_app_info_get_id">
<description>
Gets the ID of an application. An id is a string that
identifies the application. The exact format of the id is
platform dependent. For instance, on Unix this is the
desktop file id from the xdg menu specification.

Note that the returned ID may be %NULL, depending on how
the @appinfo has been constructed.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the application's ID.
</return>
</function>

<function name="g_app_info_get_name">
<description>
Gets the installed name of the application. 


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> the name of the application for @appinfo.
</return>
</function>

<function name="g_app_info_get_recommended_for_type">
<description>
Gets a list of recommended #GAppInfos for a given content type, i.e.
those applications which claim to support the given content type exactly,
and not by MIME type subclassing.
Note that the first application of the list is the last used one, i.e.
the last one for which #g_app_info_set_as_last_used_for_type has been
called.

Since: 2.28

</description>
<parameters>
<parameter name="content_type">
<parameter_description> the content type to find a #GAppInfo for
</parameter_description>
</parameter>
</parameters>
<return> #GList of #GAppInfos
for given @content_type or %NULL on error.

</return>
</function>

<function name="g_app_info_launch">
<description>
Launches the application. Passes @files to the launched application
as arguments, using the optional @launch_context to get information
about the details of the launcher (like what screen it is on).
On error, @error will be set accordingly.

To launch the application without arguments pass a %NULL @files list.

Note that even if the launch is successful the application launched
can fail to start if it runs into problems during startup. There is
no way to detect this.

Some URIs can be changed when passed through a GFile (for instance
unsupported uris with strange formats like mailto:), so if you have
a textual uri you want to pass in as argument, consider using
g_app_info_launch_uris() instead.

On UNIX, this function sets the &lt;envar&gt;GIO_LAUNCHED_DESKTOP_FILE&lt;/envar&gt;
environment variable with the path of the launched desktop file and
&lt;envar&gt;GIO_LAUNCHED_DESKTOP_FILE_PID&lt;/envar&gt; to the process
id of the launched process. This can be used to ignore
&lt;envar&gt;GIO_LAUNCHED_DESKTOP_FILE&lt;/envar&gt;, should it be inherited
by further processes. The &lt;envar&gt;DISPLAY&lt;/envar&gt; and
&lt;envar&gt;DESKTOP_STARTUP_ID&lt;/envar&gt; environment variables are also
set, based on information provided in @launch_context.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo
</parameter_description>
</parameter>
<parameter name="files">
<parameter_description> a #GList of #GFile objects
</parameter_description>
</parameter>
<parameter name="launch_context">
<parameter_description> a #GAppLaunchContext or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on successful launch, %FALSE otherwise.
</return>
</function>

<function name="g_app_info_launch_default_for_uri">
<description>
Utility function that launches the default application
registered to handle the specified uri. Synchronous I/O
is done on the uri to detect the type of the file if
required.


</description>
<parameters>
<parameter name="uri">
<parameter_description> the uri to show
</parameter_description>
</parameter>
<parameter name="launch_context">
<parameter_description> an optional #GAppLaunchContext.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on error.
</return>
</function>

<function name="g_app_info_launch_uris">
<description>
Launches the application. Passes @uris to the launched application
as arguments, using the optional @launch_context to get information
about the details of the launcher (like what screen it is on).
On error, @error will be set accordingly.

To lauch the application without arguments pass a %NULL @uris list.

Note that even if the launch is successful the application launched
can fail to start if it runs into problems during startup. There is
no way to detect this.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo
</parameter_description>
</parameter>
<parameter name="uris">
<parameter_description> a #GList containing URIs to launch.
</parameter_description>
</parameter>
<parameter name="launch_context">
<parameter_description> a #GAppLaunchContext or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on successful launch, %FALSE otherwise.
</return>
</function>

<function name="g_app_info_remove_supports_type">
<description>
Removes a supported type from an application, if possible.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
<parameter name="content_type">
<parameter_description> a string.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on error.
</return>
</function>

<function name="g_app_info_reset_type_associations">
<description>
Removes all changes to the type associations done by
g_app_info_set_as_default_for_type(), 
g_app_info_set_as_default_for_extension(), 
g_app_info_add_supports_type() or g_app_info_remove_supports_type().

Since: 2.20

</description>
<parameters>
<parameter name="content_type">
<parameter_description> a content type 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_app_info_set_as_default_for_extension">
<description>
Sets the application as the default handler for the given file extension.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
<parameter name="extension">
<parameter_description> a string containing the file extension (without the dot).
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on error.
</return>
</function>

<function name="g_app_info_set_as_default_for_type">
<description>
Sets the application as the default handler for a given type.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
<parameter name="content_type">
<parameter_description> the content type.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on error.
</return>
</function>

<function name="g_app_info_set_as_last_used_for_type">
<description>
Sets the application as the last used application for a given type.
This will make the application appear as first in the list returned by
#g_app_info_get_recommended_for_type, regardless of the default application
for that content type.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
<parameter name="content_type">
<parameter_description> the content type.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on error.
</return>
</function>

<function name="g_app_info_should_show">
<description>
Checks if the application info should be shown in menus that 
list available applications.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @appinfo should be shown, %FALSE otherwise.
</return>
</function>

<function name="g_app_info_supports_files">
<description>
Checks if the application accepts files as arguments.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @appinfo supports files.
</return>
</function>

<function name="g_app_info_supports_uris">
<description>
Checks if the application supports reading files and directories from URIs.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @appinfo supports URIs.
</return>
</function>

<function name="g_app_launch_context_get_display">
<description>
Gets the display string for the @context. This is used to ensure new
applications are started on the same display as the launching
application, by setting the &lt;envar&gt;DISPLAY&lt;/envar&gt; environment variable.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GAppLaunchContext
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> a #GAppInfo
</parameter_description>
</parameter>
<parameter name="files">
<parameter_description> a #GList of #GFile objects
</parameter_description>
</parameter>
</parameters>
<return> a display string for the display.
</return>
</function>

<function name="g_app_launch_context_get_startup_notify_id">
<description>
Initiates startup notification for the application and returns the
&lt;envar&gt;DESKTOP_STARTUP_ID&lt;/envar&gt; for the launched operation,
if supported.

Startup notification IDs are defined in the &lt;ulink
url=&quot;http://standards.freedesktop.org/startup-notification-spec/startup-notification-latest.txt&quot;&gt;
FreeDesktop.Org Startup Notifications standard&lt;/ulink&gt;.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GAppLaunchContext
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> a #GAppInfo
</parameter_description>
</parameter>
<parameter name="files">
<parameter_description> a #GList of of #GFile objects
</parameter_description>
</parameter>
</parameters>
<return> a startup notification ID for the application, or %NULL if
not supported.
</return>
</function>

<function name="g_app_launch_context_launch_failed">
<description>
Called when an application has failed to launch, so that it can cancel
the application startup notification started in g_app_launch_context_get_startup_notify_id().


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GAppLaunchContext.
</parameter_description>
</parameter>
<parameter name="startup_notify_id">
<parameter_description> the startup notification id that was returned by g_app_launch_context_get_startup_notify_id().
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_app_launch_context_new">
<description>
Creates a new application launch context. This is not normally used,
instead you instantiate a subclass of this, such as #GdkAppLaunchContext.


</description>
<parameters>
</parameters>
<return> a #GAppLaunchContext.
</return>
</function>

<function name="g_application_activate">
<description>
Activates the application.

In essence, this results in the #GApplication::activate() signal being
emitted in the primary instance.

The application must be registered before calling this function.

Since: 2.28

</description>
<parameters>
<parameter name="application">
<parameter_description> a #GApplication
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_application_command_line_get_arguments">
<description>
Gets the list of arguments that was passed on the command line.

The strings in the array may contain non-utf8 data.

The return value is %NULL-terminated and should be freed using
g_strfreev().

Since: 2.28

</description>
<parameters>
<parameter name="cmdline">
<parameter_description> a #GApplicationCommandLine
</parameter_description>
</parameter>
<parameter name="argc">
<parameter_description> the length of the arguments array, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the string array
containing the arguments (the argv)

</return>
</function>

<function name="g_application_command_line_get_cwd">
<description>
Gets the working directory of the command line invocation.
The string may contain non-utf8 data.

It is possible that the remote application did not send a working
directory, so this may be %NULL.

The return value should not be modified or freed and is valid for as
long as @cmdline exists.

Since: 2.28

</description>
<parameters>
<parameter name="cmdline">
<parameter_description> a #GApplicationCommandLine
</parameter_description>
</parameter>
</parameters>
<return> the current directory, or %NULL

</return>
</function>

<function name="g_application_command_line_get_environ">
<description>
Gets the contents of the 'environ' variable of the command line
invocation, as would be returned by g_get_environ(), ie as a
%NULL-terminated list of strings in the form 'NAME=VALUE'.
The strings may contain non-utf8 data.

The remote application usually does not send an environment.  Use
%G_APPLICATION_SEND_ENVIRONMENT to affect that.  Even with this flag
set it is possible that the environment is still not available (due
to invocation messages from other applications).

The return value should not be modified or freed and is valid for as
long as @cmdline exists.

See g_application_command_line_getenv() if you are only interested
in the value of a single environment variable.

Since: 2.28

</description>
<parameters>
<parameter name="cmdline">
<parameter_description> a #GApplicationCommandLine
</parameter_description>
</parameter>
</parameters>
<return> the environment
strings, or %NULL if they were not sent

</return>
</function>

<function name="g_application_command_line_get_exit_status">
<description>
Gets the exit status of @cmdline.  See
g_application_command_line_set_exit_status() for more information.

Since: 2.28

</description>
<parameters>
<parameter name="cmdline">
<parameter_description> a #GApplicationCommandLine
</parameter_description>
</parameter>
</parameters>
<return> the exit status

</return>
</function>

<function name="g_application_command_line_get_is_remote">
<description>
Determines if @cmdline represents a remote invocation.

Since: 2.28

</description>
<parameters>
<parameter name="cmdline">
<parameter_description> a #GApplicationCommandLine
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the invocation was remote

</return>
</function>

<function name="g_application_command_line_get_platform_data">
<description>
Gets the platform data associated with the invocation of @cmdline.

This is a #GVariant dictionary containing information about the
context in which the invocation occured.  It typically contains
information like the current working directory and the startup
notification ID.

For local invocation, it will be %NULL.

Since: 2.28

</description>
<parameters>
<parameter name="cmdline">
<parameter_description> #GApplicationCommandLine
</parameter_description>
</parameter>
</parameters>
<return> the platform data, or %NULL

</return>
</function>

<function name="g_application_command_line_getenv">
<description>
Gets the value of a particular environment variable of the command
line invocation, as would be returned by g_getenv().  The strings may
contain non-utf8 data.

The remote application usually does not send an environment.  Use
%G_APPLICATION_SEND_ENVIRONMENT to affect that.  Even with this flag
set it is possible that the environment is still not available (due
to invocation messages from other applications).

The return value should not be modified or freed and is valid for as
long as @cmdline exists.

Since: 2.28

</description>
<parameters>
<parameter name="cmdline">
<parameter_description> a #GApplicationCommandLine
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the environment variable to get
</parameter_description>
</parameter>
</parameters>
<return> the value of the variable, or %NULL if unset or unsent

</return>
</function>

<function name="g_application_command_line_print">
<description>
Formats a message and prints it using the stdout print handler in the
invoking process.

If @cmdline is a local invocation then this is exactly equivalent to
g_print().  If @cmdline is remote then this is equivalent to calling
g_print() in the invoking process.

Since: 2.28

</description>
<parameters>
<parameter name="cmdline">
<parameter_description> a #GApplicationCommandLine
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a printf-style format string
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> arguments, as per @format
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_application_command_line_printerr">
<description>
Formats a message and prints it using the stderr print handler in the
invoking process.

If @cmdline is a local invocation then this is exactly equivalent to
g_printerr().  If @cmdline is remote then this is equivalent to
calling g_printerr() in the invoking process.

Since: 2.28

</description>
<parameters>
<parameter name="cmdline">
<parameter_description> a #GApplicationCommandLine
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a printf-style format string
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> arguments, as per @format
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_application_command_line_set_exit_status">
<description>
Sets the exit status that will be used when the invoking process
exits.

The return value of the #GApplication::command-line signal is
passed to this function when the handler returns.  This is the usual
way of setting the exit status.

In the event that you want the remote invocation to continue running
and want to decide on the exit status in the future, you can use this
call.  For the case of a remote invocation, the remote process will
typically exit when the last reference is dropped on @cmdline.  The
exit status of the remote process will be equal to the last value
that was set with this function.

In the case that the commandline invocation is local, the situation
is slightly more complicated.  If the commandline invocation results
in the mainloop running (ie: because the use-count of the application
increased to a non-zero value) then the application is considered to
have been 'successful' in a certain sense, and the exit status is
always zero.  If the application use count is zero, though, the exit
status of the local #GApplicationCommandLine is used.

Since: 2.28

</description>
<parameters>
<parameter name="cmdline">
<parameter_description> a #GApplicationCommandLine
</parameter_description>
</parameter>
<parameter name="exit_status">
<parameter_description> the exit status
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_application_get_application_id">
<description>
Gets the unique identifier for @application.

Since: 2.28

</description>
<parameters>
<parameter name="application">
<parameter_description> a #GApplication
</parameter_description>
</parameter>
</parameters>
<return> the identifier for @application, owned by @application
</return>
</function>

<function name="g_application_get_flags">
<description>
Gets the flags for @application.

See #GApplicationFlags.

Since: 2.28

</description>
<parameters>
<parameter name="application">
<parameter_description> a #GApplication
</parameter_description>
</parameter>
</parameters>
<return> the flags for @application
</return>
</function>

<function name="g_application_get_inactivity_timeout">
<description>
Gets the current inactivity timeout for the application.

This is the amount of time (in milliseconds) after the last call to
g_application_release() before the application stops running.

Since: 2.28

</description>
<parameters>
<parameter name="application">
<parameter_description> a #GApplication
</parameter_description>
</parameter>
</parameters>
<return> the timeout, in milliseconds

</return>
</function>

<function name="g_application_get_is_registered">
<description>
Checks if @application is registered.

An application is registered if g_application_register() has been
successfully called.

Since: 2.28

</description>
<parameters>
<parameter name="application">
<parameter_description> a #GApplication
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @application is registered
</return>
</function>

<function name="g_application_get_is_remote">
<description>
Checks if @application is remote.

If @application is remote then it means that another instance of
application already exists (the 'primary' instance).  Calls to
perform actions on @application will result in the actions being
performed by the primary instance.

The value of this property cannot be accessed before
g_application_register() has been called.  See
g_application_get_is_registered().

Since: 2.28

</description>
<parameters>
<parameter name="application">
<parameter_description> a #GApplication
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @application is remote
</return>
</function>

<function name="g_application_hold">
<description>
Increases the use count of @application.

Use this function to indicate that the application has a reason to
continue to run.  For example, g_application_hold() is called by GTK+ 
when a toplevel window is on the screen.

To cancel the hold, call g_application_release().

</description>
<parameters>
<parameter name="application">
<parameter_description> a #GApplication
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_application_id_is_valid">
<description>
Checks if @application_id is a valid application identifier.

A valid ID is required for calls to g_application_new() and
g_application_set_application_id().

For convenience, the restrictions on application identifiers are
reproduced here:
&lt;itemizedlist&gt;
&lt;listitem&gt;Application identifiers must contain only the ASCII characters &quot;[A-Z][a-z][0-9]_-.&quot; and must not begin with a digit.&lt;/listitem&gt;
&lt;listitem&gt;Application identifiers must contain at least one '.' (period) character (and thus at least three elements).&lt;/listitem&gt;
&lt;listitem&gt;Application identifiers must not begin or end with a '.' (period) character.&lt;/listitem&gt;
&lt;listitem&gt;Application identifiers must not contain consecutive '.' (period) characters.&lt;/listitem&gt;
&lt;listitem&gt;Application identifiers must not exceed 255 characters.&lt;/listitem&gt;
&lt;/itemizedlist&gt;

</description>
<parameters>
<parameter name="application_id">
<parameter_description> a potential application identifier
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @application_id is valid
</return>
</function>

<function name="g_application_new">
<description>
Creates a new #GApplication instance.

This function calls g_type_init() for you.

The application id must be valid.  See g_application_id_is_valid().

</description>
<parameters>
<parameter name="application_id">
<parameter_description> the application id
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> the application flags
</parameter_description>
</parameter>
</parameters>
<return> a new #GApplication instance
</return>
</function>

<function name="g_application_open">
<description>
Opens the given files.

In essence, this results in the #GApplication::open signal being emitted
in the primary instance.

@n_files must be greater than zero.

@hint is simply passed through to the ::open signal.  It is
intended to be used by applications that have multiple modes for
opening files (eg: &quot;view&quot; vs &quot;edit&quot;, etc).  Unless you have a need
for this functionality, you should use &quot;&quot;.

The application must be registered before calling this function
and it must have the %G_APPLICATION_HANDLES_OPEN flag set.

Since: 2.28

</description>
<parameters>
<parameter name="application">
<parameter_description> a #GApplication
</parameter_description>
</parameter>
<parameter name="files">
<parameter_description> an array of #GFiles to open
</parameter_description>
</parameter>
<parameter name="n_files">
<parameter_description> the length of the @files array
</parameter_description>
</parameter>
<parameter name="hint">
<parameter_description> a hint (or &quot;&quot;), but never %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_application_register">
<description>
Attempts registration of the application.

This is the point at which the application discovers if it is the
primary instance or merely acting as a remote for an already-existing
primary instance.  This is implemented by attempting to acquire the
application identifier as a unique bus name on the session bus using
GDBus.

Due to the internal architecture of GDBus, method calls can be
dispatched at any time (even if a main loop is not running).  For
this reason, you must ensure that any object paths that you wish to
register are registered before calling this function.

If the application has already been registered then %TRUE is
returned with no work performed.

The #GApplication::startup signal is emitted if registration succeeds
and @application is the primary instance.

In the event of an error (such as @cancellable being cancelled, or a
failure to connect to the session bus), %FALSE is returned and @error
is set appropriately.

Note: the return value of this function is not an indicator that this
instance is or is not the primary instance of the application.  See
g_application_get_is_remote() for that.

Since: 2.28

</description>
<parameters>
<parameter name="application">
<parameter_description> a #GApplication
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a pointer to a NULL #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if registration succeeded
</return>
</function>

<function name="g_application_release">
<description>
Decrease the use count of @application.

When the use count reaches zero, the application will stop running.

Never call this function except to cancel the effect of a previous
call to g_application_hold().

</description>
<parameters>
<parameter name="application">
<parameter_description> a #GApplication
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_application_run">
<description>
Runs the application.

This function is intended to be run from main() and its return value
is intended to be returned by main(). Although you are expected to pass
the @argc, @argv parameters from main() to this function, it is possible
to pass %NULL if @argv is not available or commandline handling is not
required.

First, the local_command_line() virtual function is invoked.
This function always runs on the local instance. It gets passed a pointer
to a %NULL-terminated copy of @argv and is expected to remove the arguments
that it handled (shifting up remaining arguments). See
&lt;xref linkend=&quot;gapplication-example-cmdline2&quot;/&gt; for an example of
parsing @argv manually. Alternatively, you may use the #GOptionContext API,
after setting &lt;literal&gt;argc = g_strv_length (argv);&lt;/literal&gt;.

The last argument to local_command_line() is a pointer to the @status
variable which can used to set the exit status that is returned from
g_application_run().

If local_command_line() returns %TRUE, the command line is expected
to be completely handled, including possibly registering as the primary
instance, calling g_application_activate() or g_application_open(), etc.

If local_command_line() returns %FALSE then the application is registered
and the #GApplication::command-line signal is emitted in the primary
instance (which may or may not be this instance). The signal handler
gets passed a #GApplicationCommandline object that (among other things)
contains the remaining commandline arguments that have not been handled
by local_command_line().

If the application has the %G_APPLICATION_HANDLES_COMMAND_LINE
flag set then the default implementation of local_command_line()
always returns %FALSE immediately, resulting in the commandline
always being handled in the primary instance.

Otherwise, the default implementation of local_command_line() tries
to do a couple of things that are probably reasonable for most
applications.  First, g_application_register() is called to attempt
to register the application.  If that works, then the command line
arguments are inspected.  If no commandline arguments are given, then
g_application_activate() is called.  If commandline arguments are
given and the %G_APPLICATION_HANDLES_OPEN flag is set then they
are assumed to be filenames and g_application_open() is called.

If you need to handle commandline arguments that are not filenames,
and you don't mind commandline handling to happen in the primary
instance, you should set %G_APPLICATION_HANDLED_COMMAND_LINE and
process the commandline arguments in your #GApplication::command-line
signal handler, either manually or using the #GOptionContext API.

If you are interested in doing more complicated local handling of the
commandline then you should implement your own #GApplication subclass
and override local_command_line(). In this case, you most likely want
to return %TRUE from your local_command_line() implementation to
suppress the default handling. See
&lt;xref linkend=&quot;gapplication-example-cmdline2&quot;/&gt; for an example.

If, after the above is done, the use count of the application is zero
then the exit status is returned immediately.  If the use count is
non-zero then the mainloop is run until the use count falls to zero,
at which point 0 is returned.

If the %G_APPLICATION_IS_SERVICE flag is set, then the exiting at
use count of zero is delayed for a while (ie: the instance stays
around to provide its &lt;emphasis&gt;service&lt;/emphasis&gt; to others).

Since: 2.28

</description>
<parameters>
<parameter name="application">
<parameter_description> a #GApplication
</parameter_description>
</parameter>
<parameter name="argc">
<parameter_description> the argc from main() (or 0 if @argv is %NULL)
</parameter_description>
</parameter>
<parameter name="argv">
<parameter_description> the argv from main(), or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the exit status
</return>
</function>

<function name="g_application_set_action_group">
<description>
Sets or unsets the group of actions associated with the application.

These actions are the actions that can be remotely invoked.

It is an error to call this function after the application has been
registered.

Since: 2.28

</description>
<parameters>
<parameter name="application">
<parameter_description> a #GApplication
</parameter_description>
</parameter>
<parameter name="action_group">
<parameter_description> a #GActionGroup, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_application_set_application_id">
<description>
Sets the unique identifier for @application.

The application id can only be modified if @application has not yet
been registered.

The application id must be valid.  See g_application_id_is_valid().

Since: 2.28

</description>
<parameters>
<parameter name="application">
<parameter_description> a #GApplication
</parameter_description>
</parameter>
<parameter name="application_id">
<parameter_description> the identifier for @application
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_application_set_flags">
<description>
Sets the flags for @application.

The flags can only be modified if @application has not yet been
registered.

See #GApplicationFlags.

Since: 2.28

</description>
<parameters>
<parameter name="application">
<parameter_description> a #GApplication
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> the flags for @application
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_application_set_inactivity_timeout">
<description>
Sets the current inactivity timeout for the application.

This is the amount of time (in milliseconds) after the last call to
g_application_release() before the application stops running.

This call has no side effects of its own.  The value set here is only
used for next time g_application_release() drops the use count to
zero.  Any timeouts currently in progress are not impacted.

Since: 2.28

</description>
<parameters>
<parameter name="application">
<parameter_description> a #GApplication
</parameter_description>
</parameter>
<parameter name="inactivity_timeout">
<parameter_description> the timeout, in milliseconds
</parameter_description>
</parameter>
</parameters>
<return> the timeout, in milliseconds

</return>
</function>

<function name="g_async_initable_init_async">
<description>
Starts asynchronous initialization of the object implementing the
interface. This must be done before any real use of the object after
initial construction. If the object also implements #GInitable you can
optionally call g_initable_init() instead.

When the initialization is finished, @callback will be called. You can
then call g_async_initable_init_finish() to get the result of the
initialization.

Implementations may also support cancellation. If @cancellable is not
%NULL, then initialization can be cancelled by triggering the cancellable
object from another thread. If the operation was cancelled, the error
%G_IO_ERROR_CANCELLED will be returned. If @cancellable is not %NULL, and
the object doesn't support cancellable initialization, the error
%G_IO_ERROR_NOT_SUPPORTED will be returned.

If this function is not called, or returns with an error, then all
operations on the object should fail, generally returning the
error %G_IO_ERROR_NOT_INITIALIZED.

Implementations of this method must be idempotent: i.e. multiple calls
to this function with the same argument should return the same results.
Only the first call initializes the object; further calls return the result
of the first call. This is so that it's safe to implement the singleton
pattern in the GObject constructor function.

For classes that also support the #GInitable interface, the default
implementation of this method will run the g_initable_init() function
in a thread, so if you want to support asynchronous initialization via
threads, just implement the #GAsyncInitable interface without overriding
any interface methods.

Since: 2.22

</description>
<parameters>
<parameter name="initable">
<parameter_description> a #GAsyncInitable.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt;
of the operation.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_async_initable_init_finish">
<description>
Finishes asynchronous initialization and returns the result.
See g_async_initable_init_async().

Since: 2.22

</description>
<parameters>
<parameter name="initable">
<parameter_description> a #GAsyncInitable.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful. If an error has occurred, this function
will return %FALSE and set @error appropriately if present.

</return>
</function>

<function name="g_async_initable_new_async">
<description>
Helper function for constructing #GAsyncInitiable object. This is
similar to g_object_new() but also initializes the object asynchronously.

When the initialization is finished, @callback will be called. You can
then call g_async_initable_new_finish() to get the new object and check
for any errors.

Since: 2.22

</description>
<parameters>
<parameter name="object_type">
<parameter_description> a #GType supporting #GAsyncInitable.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt;
of the operation.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the initialization is
finished
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> the name of the first property, or %NULL if no
properties
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description>  the value of the first property, followed by other property
value pairs, and ended by %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_async_initable_new_finish">
<description>
Finishes the async construction for the various g_async_initable_new calls,
returning the created object or %NULL on error.

Since: 2.22

</description>
<parameters>
<parameter name="initable">
<parameter_description> the #GAsyncInitable from the callback
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> the #GAsyncResult.from the callback
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a newly created #GObject, or %NULL on error. Free with
g_object_unref().

</return>
</function>

<function name="g_async_initable_new_valist_async">
<description>
Helper function for constructing #GAsyncInitiable object. This is
similar to g_object_new_valist() but also initializes the object
asynchronously.

When the initialization is finished, @callback will be called. You can
then call g_async_initable_new_finish() to get the new object and check
for any errors.

Since: 2.22

</description>
<parameters>
<parameter name="object_type">
<parameter_description> a #GType supporting #GAsyncInitable.
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> the name of the first property, followed by
the value, and other property value pairs, and ended by %NULL.
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> The var args list generated from @first_property_name.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt;
of the operation.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the initialization is
finished
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_async_initable_newv_async">
<description>
Helper function for constructing #GAsyncInitiable object. This is
similar to g_object_newv() but also initializes the object asynchronously.

When the initialization is finished, @callback will be called. You can
then call g_async_initable_new_finish() to get the new object and check
for any errors.

Since: 2.22

</description>
<parameters>
<parameter name="object_type">
<parameter_description> a #GType supporting #GAsyncInitable.
</parameter_description>
</parameter>
<parameter name="n_parameters">
<parameter_description> the number of parameters in @parameters
</parameter_description>
</parameter>
<parameter name="parameters">
<parameter_description> the parameters to use to construct the object
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt;
of the operation.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the initialization is
finished
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_async_result_get_source_object">
<description>
Gets the source object from a #GAsyncResult.


</description>
<parameters>
<parameter name="res">
<parameter_description> a #GAsyncResult
</parameter_description>
</parameter>
</parameters>
<return> a new reference to the source object for the @res,
or %NULL if there is none.
</return>
</function>

<function name="g_async_result_get_user_data">
<description>
Gets the user data from a #GAsyncResult.


</description>
<parameters>
<parameter name="res">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
</parameters>
<return> the user data for @res.
</return>
</function>

<function name="g_buffered_input_stream_fill">
<description>
Tries to read @count bytes from the stream into the buffer.
Will block during this read.

If @count is zero, returns zero and does nothing. A value of @count
larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.

On success, the number of bytes read into the buffer is returned.
It is not an error if this is not the same as the requested size, as it
can happen e.g. near the end of a file. Zero is returned on end of file
(or if @count is zero),  but never otherwise.

If @count is -1 then the attempted read size is equal to the number of
bytes that are required to fill the buffer.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
operation was partially finished when the operation was cancelled the
partial result will be returned, without an error.

On error -1 is returned and @error is set accordingly.

For the asynchronous, non-blocking, version of this function, see
g_buffered_input_stream_fill_async().


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GBufferedInputStream
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the number of bytes that will be read from the stream
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> the number of bytes read into @stream's buffer, up to @count,
or -1 on error.
</return>
</function>

<function name="g_buffered_input_stream_fill_async">
<description>
Reads data into @stream's buffer asynchronously, up to @count size.
@io_priority can be used to prioritize reads. For the synchronous
version of this function, see g_buffered_input_stream_fill().

If @count is -1 then the attempted read size is equal to the number
of bytes that are required to fill the buffer.

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GBufferedInputStream
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the number of bytes that will be read from the stream
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt;
of the request
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> a #gpointer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_buffered_input_stream_fill_finish">
<description>
Finishes an asynchronous read.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GBufferedInputStream
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError
</parameter_description>
</parameter>
</parameters>
<return> a #gssize of the read stream, or %-1 on an error.
</return>
</function>

<function name="g_buffered_input_stream_get_available">
<description>
Gets the size of the available data within the stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> #GBufferedInputStream
</parameter_description>
</parameter>
</parameters>
<return> size of the available stream.
</return>
</function>

<function name="g_buffered_input_stream_get_buffer_size">
<description>
Gets the size of the input buffer.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GBufferedInputStream
</parameter_description>
</parameter>
</parameters>
<return> the current buffer size.
</return>
</function>

<function name="g_buffered_input_stream_new">
<description>
Creates a new #GInputStream from the given @base_stream, with
a buffer set to the default size (4 kilobytes).


</description>
<parameters>
<parameter name="base_stream">
<parameter_description> a #GInputStream
</parameter_description>
</parameter>
</parameters>
<return> a #GInputStream for the given @base_stream.
</return>
</function>

<function name="g_buffered_input_stream_new_sized">
<description>
Creates a new #GBufferedInputStream from the given @base_stream,
with a buffer set to @size.


</description>
<parameters>
<parameter name="base_stream">
<parameter_description> a #GInputStream
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> a #gsize
</parameter_description>
</parameter>
</parameters>
<return> a #GInputStream.
</return>
</function>

<function name="g_buffered_input_stream_peek">
<description>
Peeks in the buffer, copying data of size @count into @buffer,
offset @offset bytes.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GBufferedInputStream
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a pointer to an allocated chunk of memory
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> a #gsize
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> a #gsize
</parameter_description>
</parameter>
</parameters>
<return> a #gsize of the number of bytes peeked, or -1 on error.
</return>
</function>

<function name="g_buffered_input_stream_peek_buffer">
<description>
Returns the buffer with the currently available bytes. The returned
buffer must not be modified and will become invalid when reading from
the stream or filling the buffer.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GBufferedInputStream
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> a #gsize to get the number of bytes available in the buffer
</parameter_description>
</parameter>
</parameters>
<return>
read-only buffer
</return>
</function>

<function name="g_buffered_input_stream_read_byte">
<description>
Tries to read a single byte from the stream or the buffer. Will block
during this read.

On success, the byte read from the stream is returned. On end of stream
-1 is returned but it's not an exceptional error and @error is not set.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
operation was partially finished when the operation was cancelled the
partial result will be returned, without an error.

On error -1 is returned and @error is set accordingly.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GBufferedInputStream
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> the byte read from the @stream, or -1 on end of stream or error.
</return>
</function>

<function name="g_buffered_input_stream_set_buffer_size">
<description>
Sets the size of the internal buffer of @stream to @size, or to the
size of the contents of the buffer. The buffer can never be resized
smaller than its current contents.

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GBufferedInputStream
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> a #gsize
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_buffered_output_stream_get_auto_grow">
<description>
Checks if the buffer automatically grows as data is added.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GBufferedOutputStream.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @stream's buffer automatically grows,
%FALSE otherwise.
</return>
</function>

<function name="g_buffered_output_stream_get_buffer_size">
<description>
Gets the size of the buffer in the @stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GBufferedOutputStream.
</parameter_description>
</parameter>
</parameters>
<return> the current size of the buffer.
</return>
</function>

<function name="g_buffered_output_stream_new">
<description>
Creates a new buffered output stream for a base stream.


</description>
<parameters>
<parameter name="base_stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
</parameters>
<return> a #GOutputStream for the given @base_stream.
</return>
</function>

<function name="g_buffered_output_stream_new_sized">
<description>
Creates a new buffered output stream with a given buffer size.


</description>
<parameters>
<parameter name="base_stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> a #gsize.
</parameter_description>
</parameter>
</parameters>
<return> a #GOutputStream with an internal buffer set to @size.
</return>
</function>

<function name="g_buffered_output_stream_set_auto_grow">
<description>
Sets whether or not the @stream's buffer should automatically grow.
If @auto_grow is true, then each write will just make the buffer
larger, and you must manually flush the buffer to actually write out
the data to the underlying stream.

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GBufferedOutputStream.
</parameter_description>
</parameter>
<parameter name="auto_grow">
<parameter_description> a #gboolean.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_buffered_output_stream_set_buffer_size">
<description>
Sets the size of the internal buffer to @size.

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GBufferedOutputStream.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> a #gsize.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_bus_get">
<description>
Asynchronously connects to the message bus specified by @bus_type.

When the operation is finished, @callback will be invoked. You can
then call g_bus_get_finish() to get the result of the operation.

This is a asynchronous failable function. See g_bus_get_sync() for
the synchronous version.

Since: 2.26

</description>
<parameters>
<parameter name="bus_type">
<parameter_description> A #GBusType.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> A #GCancellable or %NULL.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> A #GAsyncReadyCallback to call when the request is satisfied.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> The data to pass to @callback.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_bus_get_finish">
<description>
Finishes an operation started with g_bus_get().

The returned object is a singleton, that is, shared with other
callers of g_bus_get() and g_bus_get_sync() for @bus_type. In the
event that you need a private message bus connection, use
g_dbus_address_get_for_bus() and
g_dbus_connection_new_for_address().

Note that the returned #GDBusConnection object will (usually) have
the #GDBusConnection:exit-on-close property set to %TRUE.

Since: 2.26

</description>
<parameters>
<parameter name="res">
<parameter_description> A #GAsyncResult obtained from the #GAsyncReadyCallback passed to g_bus_get().
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> A #GDBusConnection or %NULL if @error is set. Free with g_object_unref().

</return>
</function>

<function name="g_bus_get_sync">
<description>
Synchronously connects to the message bus specified by @bus_type.
Note that the returned object may shared with other callers,
e.g. if two separate parts of a process calls this function with
the same @bus_type, they will share the same object.

This is a synchronous failable function. See g_bus_get() and
g_bus_get_finish() for the asynchronous version.

The returned object is a singleton, that is, shared with other
callers of g_bus_get() and g_bus_get_sync() for @bus_type. In the
event that you need a private message bus connection, use
g_dbus_address_get_for_bus_sync() and
g_dbus_connection_new_for_address().

Note that the returned #GDBusConnection object will (usually) have
the #GDBusConnection:exit-on-close property set to %TRUE.

Since: 2.26

</description>
<parameters>
<parameter name="bus_type">
<parameter_description> A #GBusType.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> A #GCancellable or %NULL.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> A #GDBusConnection or %NULL if @error is set. Free with g_object_unref().

</return>
</function>

<function name="g_bus_own_name">
<description>
Starts acquiring @name on the bus specified by @bus_type and calls
@name_acquired_handler and @name_lost_handler when the name is
acquired respectively lost. Callbacks will be invoked in the &lt;link
linkend=&quot;g-main-context-push-thread-default&quot;&gt;thread-default main
loop&lt;/link&gt; of the thread you are calling this function from.

You are guaranteed that one of the @name_acquired_handler and @name_lost_handler
callbacks will be invoked after calling this function - there are three
possible cases:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
@name_lost_handler with a %NULL connection (if a connection to the bus can't be made).
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
@bus_acquired_handler then @name_lost_handler (if the name can't be obtained)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
@bus_acquired_handler then @name_acquired_handler (if the name was obtained).
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;
When you are done owning the name, just call g_bus_unown_name()
with the owner id this function returns.

If the name is acquired or lost (for example another application
could acquire the name if you allow replacement or the application
currently owning the name exits), the handlers are also invoked. If the
#GDBusConnection that is used for attempting to own the name
closes, then @name_lost_handler is invoked since it is no
longer possible for other processes to access the process.

You cannot use g_bus_own_name() several times for the same name (unless
interleaved with calls to g_bus_unown_name()) - only the first call
will work.

Another guarantee is that invocations of @name_acquired_handler
and @name_lost_handler are guaranteed to alternate; that
is, if @name_acquired_handler is invoked then you are
guaranteed that the next time one of the handlers is invoked, it
will be @name_lost_handler. The reverse is also true.

If you plan on exporting objects (using e.g.
g_dbus_connection_register_object()), note that it is generally too late
to export the objects in @name_acquired_handler. Instead, you can do this
in @bus_acquired_handler since you are guaranteed that this will run
before @name is requested from the bus.

This behavior makes it very simple to write applications that wants
to own names and export objects, see &lt;xref linkend=&quot;gdbus-owning-names&quot;/&gt;.
Simply register objects to be exported in @bus_acquired_handler and
unregister the objects (if any) in @name_lost_handler.

Since: 2.26

</description>
<parameters>
<parameter name="bus_type">
<parameter_description> The type of bus to own a name on.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> The well-known name to own.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> A set of flags from the #GBusNameOwnerFlags enumeration.
</parameter_description>
</parameter>
<parameter name="bus_acquired_handler">
<parameter_description> Handler to invoke when connected to the bus of type @bus_type or %NULL.
</parameter_description>
</parameter>
<parameter name="name_acquired_handler">
<parameter_description> Handler to invoke when @name is acquired or %NULL.
</parameter_description>
</parameter>
<parameter name="name_lost_handler">
<parameter_description> Handler to invoke when @name is lost or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> User data to pass to handlers.
</parameter_description>
</parameter>
<parameter name="user_data_free_func">
<parameter_description> Function for freeing @user_data or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> An identifier (never 0) that an be used with
g_bus_unown_name() to stop owning the name.

</return>
</function>

<function name="g_bus_own_name_on_connection">
<description>
Like g_bus_own_name() but takes a #GDBusConnection instead of a
#GBusType.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> The well-known name to own.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> A set of flags from the #GBusNameOwnerFlags enumeration.
</parameter_description>
</parameter>
<parameter name="name_acquired_handler">
<parameter_description> Handler to invoke when @name is acquired or %NULL.
</parameter_description>
</parameter>
<parameter name="name_lost_handler">
<parameter_description> Handler to invoke when @name is lost or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> User data to pass to handlers.
</parameter_description>
</parameter>
<parameter name="user_data_free_func">
<parameter_description> Function for freeing @user_data or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> An identifier (never 0) that an be used with
g_bus_unown_name() to stop owning the name.

</return>
</function>

<function name="g_bus_own_name_on_connection_with_closures">
<description>
Version of g_bus_own_name_on_connection() using closures instead of callbacks for
easier binding in other languages.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> The well-known name to own.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> A set of flags from the #GBusNameOwnerFlags enumeration.
</parameter_description>
</parameter>
<parameter name="name_acquired_closure">
<parameter_description> #GClosure to invoke when @name is
acquired or %NULL.
</parameter_description>
</parameter>
<parameter name="name_lost_closure">
<parameter_description> #GClosure to invoke when @name is lost or
%NULL.
</parameter_description>
</parameter>
</parameters>
<return> An identifier (never 0) that an be used with
g_bus_unown_name() to stop owning the name.

</return>
</function>

<function name="g_bus_own_name_with_closures">
<description>
Version of g_bus_own_name() using closures instead of callbacks for
easier binding in other languages.

Since: 2.26

</description>
<parameters>
<parameter name="bus_type">
<parameter_description> The type of bus to own a name on.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> The well-known name to own.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> A set of flags from the #GBusNameOwnerFlags enumeration.
</parameter_description>
</parameter>
<parameter name="bus_acquired_closure">
<parameter_description> #GClosure to invoke when connected to
the bus of type @bus_type or %NULL.
</parameter_description>
</parameter>
<parameter name="name_acquired_closure">
<parameter_description> #GClosure to invoke when @name is
acquired or %NULL.
</parameter_description>
</parameter>
<parameter name="name_lost_closure">
<parameter_description> #GClosure to invoke when @name is lost or
%NULL.
</parameter_description>
</parameter>
</parameters>
<return> An identifier (never 0) that an be used with
g_bus_unown_name() to stop owning the name.

</return>
</function>

<function name="g_bus_unown_name">
<description>
Stops owning a name.

Since: 2.26

</description>
<parameters>
<parameter name="owner_id">
<parameter_description> An identifier obtained from g_bus_own_name()
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_bus_unwatch_name">
<description>
Stops watching a name.

Since: 2.26

</description>
<parameters>
<parameter name="watcher_id">
<parameter_description> An identifier obtained from g_bus_watch_name()
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_bus_watch_name">
<description>
Starts watching @name on the bus specified by @bus_type and calls
@name_appeared_handler and @name_vanished_handler when the name is
known to have a owner respectively known to lose its
owner. Callbacks will be invoked in the &lt;link
linkend=&quot;g-main-context-push-thread-default&quot;&gt;thread-default main
loop&lt;/link&gt; of the thread you are calling this function from.

You are guaranteed that one of the handlers will be invoked after
calling this function. When you are done watching the name, just
call g_bus_unwatch_name() with the watcher id this function
returns.

If the name vanishes or appears (for example the application owning
the name could restart), the handlers are also invoked. If the
#GDBusConnection that is used for watching the name disconnects, then
@name_vanished_handler is invoked since it is no longer
possible to access the name.

Another guarantee is that invocations of @name_appeared_handler
and @name_vanished_handler are guaranteed to alternate; that
is, if @name_appeared_handler is invoked then you are
guaranteed that the next time one of the handlers is invoked, it
will be @name_vanished_handler. The reverse is also true.

This behavior makes it very simple to write applications that wants
to take action when a certain name exists, see &lt;xref
linkend=&quot;gdbus-watching-names&quot;/&gt;. Basically, the application
should create object proxies in @name_appeared_handler and destroy
them again (if any) in @name_vanished_handler.

Since: 2.26

</description>
<parameters>
<parameter name="bus_type">
<parameter_description> The type of bus to watch a name on.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> The name (well-known or unique) to watch.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> Flags from the #GBusNameWatcherFlags enumeration.
</parameter_description>
</parameter>
<parameter name="name_appeared_handler">
<parameter_description> Handler to invoke when @name is known to exist or %NULL.
</parameter_description>
</parameter>
<parameter name="name_vanished_handler">
<parameter_description> Handler to invoke when @name is known to not exist or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> User data to pass to handlers.
</parameter_description>
</parameter>
<parameter name="user_data_free_func">
<parameter_description> Function for freeing @user_data or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> An identifier (never 0) that an be used with
g_bus_unwatch_name() to stop watching the name.

</return>
</function>

<function name="g_bus_watch_name_on_connection">
<description>
Like g_bus_watch_name() but takes a #GDBusConnection instead of a
#GBusType.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> The name (well-known or unique) to watch.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> Flags from the #GBusNameWatcherFlags enumeration.
</parameter_description>
</parameter>
<parameter name="name_appeared_handler">
<parameter_description> Handler to invoke when @name is known to exist or %NULL.
</parameter_description>
</parameter>
<parameter name="name_vanished_handler">
<parameter_description> Handler to invoke when @name is known to not exist or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> User data to pass to handlers.
</parameter_description>
</parameter>
<parameter name="user_data_free_func">
<parameter_description> Function for freeing @user_data or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> An identifier (never 0) that an be used with
g_bus_unwatch_name() to stop watching the name.

</return>
</function>

<function name="g_bus_watch_name_on_connection_with_closures">
<description>
Version of g_bus_watch_name_on_connection() using closures instead of callbacks for
easier binding in other languages.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> The name (well-known or unique) to watch.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> Flags from the #GBusNameWatcherFlags enumeration.
</parameter_description>
</parameter>
<parameter name="name_appeared_closure">
<parameter_description> #GClosure to invoke when @name is known
to exist or %NULL.
</parameter_description>
</parameter>
<parameter name="name_vanished_closure">
<parameter_description> #GClosure to invoke when @name is known
to not exist or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> An identifier (never 0) that an be used with
g_bus_unwatch_name() to stop watching the name.

</return>
</function>

<function name="g_bus_watch_name_with_closures">
<description>
Version of g_bus_watch_name() using closures instead of callbacks for
easier binding in other languages.

Since: 2.26

</description>
<parameters>
<parameter name="bus_type">
<parameter_description> The type of bus to watch a name on.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> The name (well-known or unique) to watch.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> Flags from the #GBusNameWatcherFlags enumeration.
</parameter_description>
</parameter>
<parameter name="name_appeared_closure">
<parameter_description> #GClosure to invoke when @name is known
to exist or %NULL.
</parameter_description>
</parameter>
<parameter name="name_vanished_closure">
<parameter_description> #GClosure to invoke when @name is known
to not exist or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> An identifier (never 0) that an be used with
g_bus_unwatch_name() to stop watching the name.

</return>
</function>

<function name="g_cancellable_cancel">
<description>
Will set @cancellable to cancelled, and will emit the
#GCancellable::cancelled signal. (However, see the warning about
race conditions in the documentation for that signal if you are
planning to connect to it.)

This function is thread-safe. In other words, you can safely call
it from a thread other than the one running the operation that was
passed the @cancellable.

The convention within gio is that cancelling an asynchronous
operation causes it to complete asynchronously. That is, if you
cancel the operation from the same thread in which it is running,
then the operation's #GAsyncReadyCallback will not be invoked until
the application returns to the main loop.

</description>
<parameters>
<parameter name="cancellable">
<parameter_description> a #GCancellable object.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cancellable_connect">
<description>
Convenience function to connect to the #GCancellable::cancelled
signal. Also handles the race condition that may happen
if the cancellable is cancelled right before connecting.

@callback is called at most once, either directly at the
time of the connect if @cancellable is already cancelled,
or when @cancellable is cancelled in some thread.

@data_destroy_func will be called when the handler is
disconnected, or immediately if the cancellable is already
cancelled.

See #GCancellable::cancelled for details on how to use this.

Since: 2.22

</description>
<parameters>
<parameter name="cancellable">
<parameter_description> A #GCancellable.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> The #GCallback to connect.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> Data to pass to @callback.
</parameter_description>
</parameter>
<parameter name="data_destroy_func">
<parameter_description> Free function for @data or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> The id of the signal handler or 0 if @cancellable has already
been cancelled.

</return>
</function>

<function name="g_cancellable_disconnect">
<description>
Disconnects a handler from a cancellable instance similar to
g_signal_handler_disconnect().  Additionally, in the event that a
signal handler is currently running, this call will block until the
handler has finished.  Calling this function from a
#GCancellable::cancelled signal handler will therefore result in a
deadlock.

This avoids a race condition where a thread cancels at the
same time as the cancellable operation is finished and the
signal handler is removed. See #GCancellable::cancelled for
details on how to use this.

If @cancellable is %NULL or @handler_id is %0 this function does
nothing.

Since: 2.22

</description>
<parameters>
<parameter name="cancellable">
<parameter_description> A #GCancellable or %NULL.
</parameter_description>
</parameter>
<parameter name="handler_id">
<parameter_description> Handler id of the handler to be disconnected, or %0.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cancellable_get_current">
<description>
Gets the top cancellable from the stack.


</description>
<parameters>
</parameters>
<return> a #GCancellable from the top of the stack, or %NULL
if the stack is empty.
</return>
</function>

<function name="g_cancellable_get_fd">
<description>
Gets the file descriptor for a cancellable job. This can be used to
implement cancellable operations on Unix systems. The returned fd will
turn readable when @cancellable is cancelled.

You are not supposed to read from the fd yourself, just check for
readable status. Reading to unset the readable status is done
with g_cancellable_reset().

After a successful return from this function, you should use 
g_cancellable_release_fd() to free up resources allocated for 
the returned file descriptor.

See also g_cancellable_make_pollfd().


</description>
<parameters>
<parameter name="cancellable">
<parameter_description> a #GCancellable.
</parameter_description>
</parameter>
</parameters>
<return> A valid file descriptor. %-1 if the file descriptor 
is not supported, or on errors. 
</return>
</function>

<function name="g_cancellable_is_cancelled">
<description>
Checks if a cancellable job has been cancelled.


</description>
<parameters>
<parameter name="cancellable">
<parameter_description> a #GCancellable or NULL.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @cancellable is cancelled, 
FALSE if called with %NULL or if item is not cancelled. 
</return>
</function>

<function name="g_cancellable_make_pollfd">
<description>
Creates a #GPollFD corresponding to @cancellable; this can be passed
to g_poll() and used to poll for cancellation. This is useful both
for unix systems without a native poll and for portability to
windows.

When this function returns %TRUE, you should use 
g_cancellable_release_fd() to free up resources allocated for the 
@pollfd. After a %FALSE return, do not call g_cancellable_release_fd().

If this function returns %FALSE, either no @cancellable was given or
resource limits prevent this function from allocating the necessary 
structures for polling. (On Linux, you will likely have reached 
the maximum number of file descriptors.) The suggested way to handle
these cases is to ignore the @cancellable.

You are not supposed to read from the fd yourself, just check for
readable status. Reading to unset the readable status is done
with g_cancellable_reset().

Since: 2.22

</description>
<parameters>
<parameter name="cancellable">
<parameter_description> a #GCancellable or %NULL
</parameter_description>
</parameter>
<parameter name="pollfd">
<parameter_description> a pointer to a #GPollFD
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @pollfd was successfully initialized, %FALSE on 
failure to prepare the cancellable.

</return>
</function>

<function name="g_cancellable_new">
<description>
Creates a new #GCancellable object.

Applications that want to start one or more operations
that should be cancellable should create a #GCancellable
and pass it to the operations.

One #GCancellable can be used in multiple consecutive
operations, but not in multiple concurrent operations.


</description>
<parameters>
</parameters>
<return> a #GCancellable.
</return>
</function>

<function name="g_cancellable_pop_current">
<description>
Pops @cancellable off the cancellable stack (verifying that @cancellable
is on the top of the stack).

</description>
<parameters>
<parameter name="cancellable">
<parameter_description> a #GCancellable object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cancellable_push_current">
<description>
Pushes @cancellable onto the cancellable stack. The current
cancellable can then be recieved using g_cancellable_get_current().

This is useful when implementing cancellable operations in
code that does not allow you to pass down the cancellable object.

This is typically called automatically by e.g. #GFile operations,
so you rarely have to call this yourself.

</description>
<parameters>
<parameter name="cancellable">
<parameter_description> a #GCancellable object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cancellable_release_fd">
<description>
Releases a resources previously allocated by g_cancellable_get_fd()
or g_cancellable_make_pollfd().

For compatibility reasons with older releases, calling this function 
is not strictly required, the resources will be automatically freed
when the @cancellable is finalized. However, the @cancellable will
block scarce file descriptors until it is finalized if this function
is not called. This can cause the application to run out of file 
descriptors when many #GCancellables are used at the same time.

Since: 2.22

</description>
<parameters>
<parameter name="cancellable">
<parameter_description> a #GCancellable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cancellable_reset">
<description>
Resets @cancellable to its uncancelled state. 

</description>
<parameters>
<parameter name="cancellable">
<parameter_description> a #GCancellable object.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cancellable_set_error_if_cancelled">
<description>
If the @cancellable is cancelled, sets the error to notify
that the operation was cancelled.


</description>
<parameters>
<parameter name="cancellable">
<parameter_description> a #GCancellable object.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError to append error state to.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @cancellable was cancelled, %FALSE if it was not.
</return>
</function>

<function name="g_cancellable_source_new">
<description>
Creates a source that triggers if @cancellable is cancelled and
calls its callback of type #GCancellableSourceFunc. This is
primarily useful for attaching to another (non-cancellable) source
with g_source_add_child_source() to add cancellability to it.

For convenience, you can call this with a %NULL #GCancellable,
in which case the source will never trigger.

Since: 2.28

</description>
<parameters>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the new #GSource.

</return>
</function>

<function name="g_charset_converter_get_num_fallbacks">
<description>
Gets the number of fallbacks that @converter has applied so far.

Since: 2.24

</description>
<parameters>
<parameter name="converter">
<parameter_description> a #GCharsetConverter
</parameter_description>
</parameter>
</parameters>
<return> the number of fallbacks that @converter has applied

</return>
</function>

<function name="g_charset_converter_get_use_fallback">
<description>
Gets the #GCharsetConverter:use-fallback property.

Since: 2.24

</description>
<parameters>
<parameter name="converter">
<parameter_description> a #GCharsetConverter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if fallbacks are used by @converter

</return>
</function>

<function name="g_charset_converter_new">
<description>
Creates a new #GCharsetConverter.

Since: 2.24

</description>
<parameters>
<parameter name="to_charset">
<parameter_description> destination charset
</parameter_description>
</parameter>
<parameter name="from_charset">
<parameter_description> source charset
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> a new #GCharsetConverter or %NULL on error.

</return>
</function>

<function name="g_charset_converter_set_use_fallback">
<description>
Sets the #GCharsetConverter:use-fallback property.

Since: 2.24

</description>
<parameters>
<parameter name="converter">
<parameter_description> a #GCharsetConverter
</parameter_description>
</parameter>
<parameter name="use_fallback">
<parameter_description> %TRUE to use fallbacks
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_content_type_can_be_executable">
<description>
Checks if a content type can be executable. Note that for instance
things like text files can be executables (i.e. scripts and batch files).


</description>
<parameters>
<parameter name="type">
<parameter_description> a content type string
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the file type corresponds to a type that
can be executable, %FALSE otherwise.
</return>
</function>

<function name="g_content_type_equals">
<description>
Compares two content types for equality.


</description>
<parameters>
<parameter name="type1">
<parameter_description> a content type string
</parameter_description>
</parameter>
<parameter name="type2">
<parameter_description> a content type string
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the two strings are identical or equivalent,
%FALSE otherwise.
</return>
</function>

<function name="g_content_type_from_mime_type">
<description>
Tries to find a content type based on the mime type name.

Since: 2.18

</description>
<parameters>
<parameter name="mime_type">
<parameter_description> a mime type string
</parameter_description>
</parameter>
</parameters>
<return> Newly allocated string with content type
or %NULL. Free with g_free()

</return>
</function>

<function name="g_content_type_get_description">
<description>
Gets the human readable description of the content type.


</description>
<parameters>
<parameter name="type">
<parameter_description> a content type string
</parameter_description>
</parameter>
</parameters>
<return> a short description of the content type @type. Free the
returned string with g_free()
</return>
</function>

<function name="g_content_type_get_icon">
<description>
Gets the icon for a content type.


</description>
<parameters>
<parameter name="type">
<parameter_description> a content type string
</parameter_description>
</parameter>
</parameters>
<return> #GIcon corresponding to the content type. Free the returned
object with g_object_unref()
</return>
</function>

<function name="g_content_type_get_mime_type">
<description>
Gets the mime type for the content type, if one is registered.


</description>
<parameters>
<parameter name="type">
<parameter_description> a content type string
</parameter_description>
</parameter>
</parameters>
<return> the registered mime type for the given @type,
or %NULL if unknown.
</return>
</function>

<function name="g_content_type_guess">
<description>
Guesses the content type based on example data. If the function is
uncertain, @result_uncertain will be set to %TRUE. Either @filename
or @data may be %NULL, in which case the guess will be based solely
on the other argument.


</description>
<parameters>
<parameter name="filename">
<parameter_description> a string, or %NULL
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a stream of data, or %NULL
</parameter_description>
</parameter>
<parameter name="data_size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
<parameter name="result_uncertain">
<parameter_description> return location for the certainty
of the result, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a string indicating a guessed content type for the
given data. Free with g_free()
</return>
</function>

<function name="g_content_type_guess_for_tree">
<description>
Tries to guess the type of the tree with root @root, by
looking at the files it contains. The result is an array
of content types, with the best guess coming first.

The types returned all have the form x-content/foo, e.g.
x-content/audio-cdda (for audio CDs) or x-content/image-dcf
(for a camera memory card). See the &lt;ulink url=&quot;http://www.freedesktop.org/wiki/Specifications/shared-mime-info-spec&quot;&gt;shared-mime-info&lt;/ulink&gt;
specification for more on x-content types.

This function is useful in the implementation of
g_mount_guess_content_type().

Since: 2.18

</description>
<parameters>
<parameter name="root">
<parameter_description> the root of the tree to guess a type for
</parameter_description>
</parameter>
</parameters>
<return> an %NULL-terminated
array of zero or more content types, or %NULL. Free with g_strfreev()

</return>
</function>

<function name="g_content_type_is_a">
<description>
Determines if @type is a subset of @supertype.


</description>
<parameters>
<parameter name="type">
<parameter_description> a content type string
</parameter_description>
</parameter>
<parameter name="supertype">
<parameter_description> a content type string
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @type is a kind of @supertype,
%FALSE otherwise.
</return>
</function>

<function name="g_content_type_is_unknown">
<description>
Checks if the content type is the generic &quot;unknown&quot; type.
On UNIX this is the &quot;application/octet-stream&quot; mimetype,
while on win32 it is &quot;*&quot;.


</description>
<parameters>
<parameter name="type">
<parameter_description> a content type string
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the type is the unknown type.
</return>
</function>

<function name="g_content_types_get_registered">
<description>
Gets a list of strings containing all the registered content types
known to the system. The list and its data should be freed using
&lt;programlisting&gt;
g_list_foreach (list, g_free, NULL);
g_list_free (list);
&lt;/programlisting&gt;


</description>
<parameters>
</parameters>
<return> #GList of the registered content types
</return>
</function>

<function name="g_converter_convert">
<description>
This is the main operation used when converting data. It is to be called
multiple times in a loop, and each time it will do some work, i.e.
producing some output (in @outbuf) or consuming some input (from @inbuf) or
both. If its not possible to do any work an error is returned.

Note that a single call may not consume all input (or any input at all).
Also a call may produce output even if given no input, due to state stored
in the converter producing output.

If any data was either produced or consumed, and then an error happens, then
only the successful conversion is reported and the error is returned on the
next call.

A full conversion loop involves calling this method repeatedly, each time
giving it new input and space output space. When there is no more input
data after the data in @inbuf, the flag %G_CONVERTER_INPUT_AT_END must be set.
The loop will be (unless some error happens) returning %G_CONVERTER_CONVERTED
each time until all data is consumed and all output is produced, then
%G_CONVERTER_FINISHED is returned instead. Note, that %G_CONVERTER_FINISHED
may be returned even if %G_CONVERTER_INPUT_AT_END is not set, for instance
in a decompression converter where the end of data is detectable from the
data (and there might even be other data after the end of the compressed data).

When some data has successfully been converted @bytes_read and is set to
the number of bytes read from @inbuf, and @bytes_written is set to indicate
how many bytes was written to @outbuf. If there are more data to output
or consume (i.e. unless the G_CONVERTER_INPUT_AT_END is specified) then
G_CONVERTER_CONVERTED is returned, and if no more data is to be output
then G_CONVERTER_FINISHED is returned.

On error %G_CONVERTER_ERROR is returned and @error is set accordingly.
Some errors need special handling:

%G_IO_ERROR_NO_SPACE is returned if there is not enough space
to write the resulting converted data, the application should
call the function again with a larger @outbuf to continue.

%G_IO_ERROR_PARTIAL_INPUT is returned if there is not enough
input to fully determine what the conversion should produce,
and the %G_CONVERTER_INPUT_AT_END flag is not set. This happens for
example with an incomplete multibyte sequence when converting text,
or when a regexp matches up to the end of the input (and may match
further input). It may also happen when @inbuf_size is zero and
there is no more data to produce.

When this happens the application should read more input and then
call the function again. If further input shows that there is no
more data call the function again with the same data but with
the %G_CONVERTER_INPUT_AT_END flag set. This may cause the conversion
to finish as e.g. in the regexp match case (or, to fail again with
%G_IO_ERROR_PARTIAL_INPUT in e.g. a charset conversion where the
input is actually partial).

After g_converter_convert() has returned %G_CONVERTER_FINISHED the
converter object is in an invalid state where its not allowed
to call g_converter_convert() anymore. At this time you can only
free the object or call g_converter_reset() to reset it to the
initial state.

If the flag %G_CONVERTER_FLUSH is set then conversion is modified
to try to write out all internal state to the output. The application
has to call the function multiple times with the flag set, and when
the availible input has been consumed and all internal state has
been produced then %G_CONVERTER_FLUSHED (or %G_CONVERTER_FINISHED if
really at the end) is returned instead of %G_CONVERTER_CONVERTED.
This is somewhat similar to what happens at the end of the input stream,
but done in the middle of the data.

This has different meanings for different conversions. For instance
in a compression converter it would mean that we flush all the
compression state into output such that if you uncompress the
compressed data you get back all the input data. Doing this may
make the final file larger due to padding though. Another example
is a regexp conversion, where if you at the end of the flushed data
have a match, but there is also a potential longer match. In the
non-flushed case we would ask for more input, but when flushing we
treat this as the end of input and do the match.

Flushing is not always possible (like if a charset converter flushes
at a partial multibyte sequence). Converters are supposed to try
to produce as much output as possible and then return an error
(typically %G_IO_ERROR_PARTIAL_INPUT).

Since: 2.24

</description>
<parameters>
<parameter name="converter">
<parameter_description> a #GConverter.
</parameter_description>
</parameter>
<parameter name="inbuf">
<parameter_description> the buffer
containing the data to convert.
</parameter_description>
</parameter>
<parameter name="inbuf_size">
<parameter_description> the number of bytes in @inbuf
</parameter_description>
</parameter>
<parameter name="outbuf">
<parameter_description> a buffer to write converted data in.
</parameter_description>
</parameter>
<parameter name="outbuf_size">
<parameter_description> the number of bytes in @outbuf, must be at least one
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a #GConvertFlags controlling the conversion details
</parameter_description>
</parameter>
<parameter name="bytes_read">
<parameter_description> will be set to the number of bytes read from @inbuf on success
</parameter_description>
</parameter>
<parameter name="bytes_written">
<parameter_description> will be set to the number of bytes written to @outbuf on success
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> a #GConverterResult, %G_CONVERTER_ERROR on error.

</return>
</function>

<function name="g_converter_input_stream_get_converter">
<description>
Gets the #GConverter that is used by @converter_stream.

Since: 2.24

</description>
<parameters>
<parameter name="converter_stream">
<parameter_description> a #GConverterInputStream
</parameter_description>
</parameter>
</parameters>
<return> the converter of the converter input stream

</return>
</function>

<function name="g_converter_input_stream_new">
<description>
Creates a new converter input stream for the @base_stream.


</description>
<parameters>
<parameter name="base_stream">
<parameter_description> a #GInputStream
</parameter_description>
</parameter>
<parameter name="converter">
<parameter_description> a #GConverter
</parameter_description>
</parameter>
</parameters>
<return> a new #GInputStream.
</return>
</function>

<function name="g_converter_output_stream_get_converter">
<description>
Gets the #GConverter that is used by @converter_stream.

Since: 2.24

</description>
<parameters>
<parameter name="converter_stream">
<parameter_description> a #GConverterOutputStream
</parameter_description>
</parameter>
</parameters>
<return> the converter of the converter output stream

</return>
</function>

<function name="g_converter_output_stream_new">
<description>
Creates a new converter output stream for the @base_stream.


</description>
<parameters>
<parameter name="base_stream">
<parameter_description> a #GOutputStream
</parameter_description>
</parameter>
<parameter name="converter">
<parameter_description> a #GConverter
</parameter_description>
</parameter>
</parameters>
<return> a new #GOutputStream.
</return>
</function>

<function name="g_converter_reset">
<description>
Resets all internal state in the converter, making it behave
as if it was just created. If the converter has any internal
state that would produce output then that output is lost.

Since: 2.24

</description>
<parameters>
<parameter name="converter">
<parameter_description> a #GConverter.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_credentials_get_native">
<description>
Gets a pointer to native credentials of type @native_type from
@credentials.

It is a programming error (which will cause an warning to be
logged) to use this method if there is no #GCredentials support for
the OS or if @native_type isn't supported by the OS.

Since: 2.26

</description>
<parameters>
<parameter name="credentials">
<parameter_description> A #GCredentials.
</parameter_description>
</parameter>
<parameter name="native_type">
<parameter_description> The type of native credentials to get.
</parameter_description>
</parameter>
</parameters>
<return> The pointer to native credentials or %NULL if the
operation there is no #GCredentials support for the OS or if
@native_type isn't supported by the OS. Do not free the returned
data, it is owned by @credentials.

</return>
</function>

<function name="g_credentials_get_unix_user">
<description>
Tries to get the UNIX user identifier from @credentials. This
method is only available on UNIX platforms.

This operation can fail if #GCredentials is not supported on the
OS or if the native credentials type does not contain information
about the UNIX user.

Since: 2.26

</description>
<parameters>
<parameter name="credentials">
<parameter_description> A #GCredentials
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> The UNIX user identifier or -1 if @error is set.

</return>
</function>

<function name="g_credentials_is_same_user">
<description>
Checks if @credentials and @other_credentials is the same user.

This operation can fail if #GCredentials is not supported on the
the OS.

Since: 2.26

</description>
<parameters>
<parameter name="credentials">
<parameter_description> A #GCredentials.
</parameter_description>
</parameter>
<parameter name="other_credentials">
<parameter_description> A #GCredentials.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @credentials and @other_credentials has the same
user, %FALSE otherwise or if @error is set.

</return>
</function>

<function name="g_credentials_new">
<description>
Creates a new #GCredentials object with credentials matching the
the current process.

Since: 2.26

</description>
<parameters>
</parameters>
<return> A #GCredentials. Free with g_object_unref().

</return>
</function>

<function name="g_credentials_set_native">
<description>
Copies the native credentials of type @native_type from @native
into @credentials.

It is a programming error (which will cause an warning to be
logged) to use this method if there is no #GCredentials support for
the OS or if @native_type isn't supported by the OS.

Since: 2.26

</description>
<parameters>
<parameter name="credentials">
<parameter_description> A #GCredentials.
</parameter_description>
</parameter>
<parameter name="native_type">
<parameter_description> The type of native credentials to set.
</parameter_description>
</parameter>
<parameter name="native">
<parameter_description> A pointer to native credentials.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_credentials_set_unix_user">
<description>
Tries to set the UNIX user identifier on @credentials. This method
is only available on UNIX platforms.

This operation can fail if #GCredentials is not supported on the
OS or if the native credentials type does not contain information
about the UNIX user.

Since: 2.26

</description>
<parameters>
<parameter name="credentials">
<parameter_description> A #GCredentials.
</parameter_description>
</parameter>
<parameter name="uid">
<parameter_description> The UNIX user identifier to set.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @uid was set, %FALSE if error is set.

</return>
</function>

<function name="g_credentials_to_string">
<description>
Creates a human-readable textual representation of @credentials
that can be used in logging and debug messages. The format of the
returned string may change in future GLib release.

Since: 2.26

</description>
<parameters>
<parameter name="credentials">
<parameter_description> A #GCredentials object.
</parameter_description>
</parameter>
</parameters>
<return> A string that should be freed with g_free().

</return>
</function>

<function name="g_data_input_stream_get_byte_order">
<description>
Gets the byte order for the data input stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
</parameters>
<return> the @stream's current #GDataStreamByteOrder. 
</return>
</function>

<function name="g_data_input_stream_get_newline_type">
<description>
Gets the current newline type for the @stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
</parameters>
<return> #GDataStreamNewlineType for the given @stream.
</return>
</function>

<function name="g_data_input_stream_new">
<description>
Creates a new data input stream for the @base_stream.


</description>
<parameters>
<parameter name="base_stream">
<parameter_description> a #GInputStream.
</parameter_description>
</parameter>
</parameters>
<return> a new #GDataInputStream.
</return>
</function>

<function name="g_data_input_stream_read_byte">
<description>
Reads an unsigned 8-bit/1-byte value from @stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> an unsigned 8-bit/1-byte value read from the @stream or %0 
if an error occurred.
</return>
</function>

<function name="g_data_input_stream_read_int16">
<description>
Reads a 16-bit/2-byte value from @stream.

In order to get the correct byte order for this read operation, 
see g_data_input_stream_get_byte_order() and g_data_input_stream_set_byte_order().


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> a signed 16-bit/2-byte value read from @stream or %0 if 
an error occurred.
</return>
</function>

<function name="g_data_input_stream_read_int32">
<description>
Reads a signed 32-bit/4-byte value from @stream.

In order to get the correct byte order for this read operation, 
see g_data_input_stream_get_byte_order() and g_data_input_stream_set_byte_order().

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> a signed 32-bit/4-byte value read from the @stream or %0 if 
an error occurred. 
</return>
</function>

<function name="g_data_input_stream_read_int64">
<description>
Reads a 64-bit/8-byte value from @stream.

In order to get the correct byte order for this read operation, 
see g_data_input_stream_get_byte_order() and g_data_input_stream_set_byte_order().

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> a signed 64-bit/8-byte value read from @stream or %0 if 
an error occurred.  
</return>
</function>

<function name="g_data_input_stream_read_line">
<description>
Reads a line from the data input stream.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> a #gsize to get the length of the data read in.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> a string with the line that was read in
(without the newlines).  Set @length to a #gsize to get the
length of the read line.  On an error, it will return %NULL and
@error will be set. If there's no content to read, it will
still return %NULL, but @error won't be set.
</return>
</function>

<function name="g_data_input_stream_read_line_async">
<description>
The asynchronous version of g_data_input_stream_read_line().  It is
an error to have two outstanding calls to this function.

When the operation is finished, @callback will be called. You
can then call g_data_input_stream_read_line_finish() to get
the result of the operation.

Since: 2.20

</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt;
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_data_input_stream_read_line_finish">
<description>
Finish an asynchronous call started by
g_data_input_stream_read_line_async().

Since: 2.20

</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> the #GAsyncResult that was provided to the callback.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> a #gsize to get the length of the data read in.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> a string with the line that was read in
(without the newlines).  Set @length to a #gsize to get the
length of the read line.  On an error, it will return %NULL and
@error will be set. If there's no content to read, it will
still return %NULL, but @error won't be set.

</return>
</function>

<function name="g_data_input_stream_read_uint16">
<description>
Reads an unsigned 16-bit/2-byte value from @stream.

In order to get the correct byte order for this read operation, 
see g_data_input_stream_get_byte_order() and g_data_input_stream_set_byte_order(). 


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> an unsigned 16-bit/2-byte value read from the @stream or %0 if 
an error occurred. 
</return>
</function>

<function name="g_data_input_stream_read_uint32">
<description>
Reads an unsigned 32-bit/4-byte value from @stream.

In order to get the correct byte order for this read operation, 
see g_data_input_stream_get_byte_order() and g_data_input_stream_set_byte_order().

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> an unsigned 32-bit/4-byte value read from the @stream or %0 if 
an error occurred. 
</return>
</function>

<function name="g_data_input_stream_read_uint64">
<description>
Reads an unsigned 64-bit/8-byte value from @stream.

In order to get the correct byte order for this read operation, 
see g_data_input_stream_get_byte_order().

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> an unsigned 64-bit/8-byte read from @stream or %0 if 
an error occurred. 
</return>
</function>

<function name="g_data_input_stream_read_until">
<description>
Reads a string from the data input stream, up to the first
occurrence of any of the stop characters.

Note that, in contrast to g_data_input_stream_read_until_async(),
this function consumes the stop character that it finds.

Don't use this function in new code.  Its functionality is
inconsistent with g_data_input_stream_read_until_async().  Both
functions will be marked as deprecated in a future release.  Use
g_data_input_stream_read_upto() instead, but note that that function
does not consume the stop character.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="stop_chars">
<parameter_description> characters to terminate the read.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> a #gsize to get the length of the data read in.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> a string with the data that was read
before encountering any of the stop characters. Set @length to
a #gsize to get the length of the string. This function will
return %NULL on an error.
</return>
</function>

<function name="g_data_input_stream_read_until_async">
<description>
The asynchronous version of g_data_input_stream_read_until().
It is an error to have two outstanding calls to this function.

Note that, in contrast to g_data_input_stream_read_until(),
this function does not consume the stop character that it finds.  You
must read it for yourself.

When the operation is finished, @callback will be called. You
can then call g_data_input_stream_read_until_finish() to get
the result of the operation.

Don't use this function in new code.  Its functionality is
inconsistent with g_data_input_stream_read_until().  Both functions
will be marked as deprecated in a future release.  Use
g_data_input_stream_read_upto_async() instead.

Since: 2.20

</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="stop_chars">
<parameter_description> characters to terminate the read.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt;
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_data_input_stream_read_until_finish">
<description>
Finish an asynchronous call started by
g_data_input_stream_read_until_async().

Since: 2.20


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> the #GAsyncResult that was provided to the callback.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> a #gsize to get the length of the data read in.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> a string with the data that was read
before encountering any of the stop characters. Set @length to
a #gsize to get the length of the string. This function will
return %NULL on an error.
</return>
</function>

<function name="g_data_input_stream_read_upto">
<description>
Reads a string from the data input stream, up to the first
occurrence of any of the stop characters.

In contrast to g_data_input_stream_read_until(), this function
does &lt;emphasis&gt;not&lt;/emphasis&gt; consume the stop character. You have
to use g_data_input_stream_read_byte() to get it before calling
g_data_input_stream_read_upto() again.

Note that @stop_chars may contain '\0' if @stop_chars_len is
specified.

Since: 2.24

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataInputStream
</parameter_description>
</parameter>
<parameter name="stop_chars">
<parameter_description> characters to terminate the read
</parameter_description>
</parameter>
<parameter name="stop_chars_len">
<parameter_description> length of @stop_chars. May be -1 if @stop_chars is
nul-terminated
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> a #gsize to get the length of the data read in
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting
</parameter_description>
</parameter>
</parameters>
<return> a string with the data that was read
before encountering any of the stop characters. Set @length to
a #gsize to get the length of the string. This function will
return %NULL on an error

</return>
</function>

<function name="g_data_input_stream_read_upto_async">
<description>
The asynchronous version of g_data_input_stream_read_upto().
It is an error to have two outstanding calls to this function.

In contrast to g_data_input_stream_read_until(), this function
does &lt;emphasis&gt;not&lt;/emphasis&gt; consume the stop character. You have
to use g_data_input_stream_read_byte() to get it before calling
g_data_input_stream_read_upto() again.

Note that @stop_chars may contain '\0' if @stop_chars_len is
specified.

When the operation is finished, @callback will be called. You
can then call g_data_input_stream_read_upto_finish() to get
the result of the operation.

Since: 2.24

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataInputStream
</parameter_description>
</parameter>
<parameter name="stop_chars">
<parameter_description> characters to terminate the read
</parameter_description>
</parameter>
<parameter name="stop_chars_len">
<parameter_description> length of @stop_chars. May be -1 if @stop_chars is
nul-terminated
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt;
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_data_input_stream_read_upto_finish">
<description>
Finish an asynchronous call started by
g_data_input_stream_read_upto_async().

Note that this function does &lt;emphasis&gt;not&lt;/emphasis&gt; consume the
stop character. You have to use g_data_input_stream_read_byte() to
get it before calling g_data_input_stream_read_upto_async() again.

Since: 2.24

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataInputStream
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> the #GAsyncResult that was provided to the callback
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> a #gsize to get the length of the data read in
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting
</parameter_description>
</parameter>
</parameters>
<return> a string with the data that was read
before encountering any of the stop characters. Set @length to
a #gsize to get the length of the string. This function will
return %NULL on an error.

</return>
</function>

<function name="g_data_input_stream_set_byte_order">
<description>
This function sets the byte order for the given @stream. All subsequent
reads from the @stream will be read in the given @order.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="order">
<parameter_description> a #GDataStreamByteOrder to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_data_input_stream_set_newline_type">
<description>
Sets the newline type for the @stream.

Note that using G_DATA_STREAM_NEWLINE_TYPE_ANY is slightly unsafe. If a read
chunk ends in &quot;CR&quot; we must read an additional byte to know if this is &quot;CR&quot; or
&quot;CR LF&quot;, and this might block if there is no more data availible.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the type of new line return as #GDataStreamNewlineType.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_data_output_stream_get_byte_order">
<description>
Gets the byte order for the stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataOutputStream.
</parameter_description>
</parameter>
</parameters>
<return> the #GDataStreamByteOrder for the @stream.
</return>
</function>

<function name="g_data_output_stream_new">
<description>
Creates a new data output stream for @base_stream.


</description>
<parameters>
<parameter name="base_stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
</parameters>
<return> #GDataOutputStream.
</return>
</function>

<function name="g_data_output_stream_put_byte">
<description>
Puts a byte into the output stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataOutputStream.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a #guchar.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @data was successfully added to the @stream.
</return>
</function>

<function name="g_data_output_stream_put_int16">
<description>
Puts a signed 16-bit integer into the output stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataOutputStream.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a #gint16.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @data was successfully added to the @stream.
</return>
</function>

<function name="g_data_output_stream_put_int32">
<description>
Puts a signed 32-bit integer into the output stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataOutputStream.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a #gint32.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @data was successfully added to the @stream.
</return>
</function>

<function name="g_data_output_stream_put_int64">
<description>
Puts a signed 64-bit integer into the stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataOutputStream.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a #gint64.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @data was successfully added to the @stream.
</return>
</function>

<function name="g_data_output_stream_put_string">
<description>
Puts a string into the output stream. 


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataOutputStream.
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> a string.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @string was successfully added to the @stream.
</return>
</function>

<function name="g_data_output_stream_put_uint16">
<description>
Puts an unsigned 16-bit integer into the output stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataOutputStream.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a #guint16.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @data was successfully added to the @stream.
</return>
</function>

<function name="g_data_output_stream_put_uint32">
<description>
Puts an unsigned 32-bit integer into the stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataOutputStream.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a #guint32.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @data was successfully added to the @stream.
</return>
</function>

<function name="g_data_output_stream_put_uint64">
<description>
Puts an unsigned 64-bit integer into the stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataOutputStream.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a #guint64.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @data was successfully added to the @stream.
</return>
</function>

<function name="g_data_output_stream_set_byte_order">
<description>
Sets the byte order of the data output stream to @order.

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataOutputStream.
</parameter_description>
</parameter>
<parameter name="order">
<parameter_description> a %GDataStreamByteOrder.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_address_get_for_bus_sync">
<description>
Synchronously looks up the D-Bus address for the well-known message
bus instance specified by @bus_type. This may involve using various
platform specific mechanisms.

Since: 2.26

</description>
<parameters>
<parameter name="bus_type">
<parameter_description> A #GBusType.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> A #GCancellable or %NULL.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> A valid D-Bus address string for @bus_type or %NULL if @error is set.

</return>
</function>

<function name="g_dbus_address_get_stream">
<description>
Asynchronously connects to an endpoint specified by @address and
sets up the connection so it is in a state to run the client-side
of the D-Bus authentication conversation.

When the operation is finished, @callback will be invoked. You can
then call g_dbus_address_get_stream_finish() to get the result of
the operation.

This is an asynchronous failable function. See
g_dbus_address_get_stream_sync() for the synchronous version.

Since: 2.26

</description>
<parameters>
<parameter name="address">
<parameter_description> A valid D-Bus address.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> A #GCancellable or %NULL.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> A #GAsyncReadyCallback to call when the request is satisfied.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> Data to pass to @callback.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_address_get_stream_finish">
<description>
Finishes an operation started with g_dbus_address_get_stream().

Since: 2.26

</description>
<parameters>
<parameter name="res">
<parameter_description> A #GAsyncResult obtained from the GAsyncReadyCallback passed to g_dbus_address_get_stream().
</parameter_description>
</parameter>
<parameter name="out_guid">
<parameter_description> %NULL or return location to store the GUID extracted from @address, if any.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> A #GIOStream or %NULL if @error is set.

</return>
</function>

<function name="g_dbus_address_get_stream_sync">
<description>
Synchronously connects to an endpoint specified by @address and
sets up the connection so it is in a state to run the client-side
of the D-Bus authentication conversation.

This is a synchronous failable function. See
g_dbus_address_get_stream() for the asynchronous version.

Since: 2.26

</description>
<parameters>
<parameter name="address">
<parameter_description> A valid D-Bus address.
</parameter_description>
</parameter>
<parameter name="out_guid">
<parameter_description> %NULL or return location to store the GUID extracted from @address, if any.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> A #GCancellable or %NULL.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> A #GIOStream or %NULL if @error is set.

</return>
</function>

<function name="g_dbus_annotation_info_lookup">
<description>
Looks up the value of an annotation.

This cost of this function is O(n) in number of annotations.

Since: 2.26

</description>
<parameters>
<parameter name="annotations">
<parameter_description> A %NULL-terminated array of annotations or %NULL.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> The name of the annotation to look up.
</parameter_description>
</parameter>
</parameters>
<return> The value or %NULL if not found. Do not free, it is owned by @annotations.

</return>
</function>

<function name="g_dbus_annotation_info_ref">
<description>
If @info is statically allocated does nothing. Otherwise increases
the reference count.

Since: 2.26

</description>
<parameters>
<parameter name="info">
<parameter_description> A #GDBusNodeInfo
</parameter_description>
</parameter>
</parameters>
<return> The same @info.

</return>
</function>

<function name="g_dbus_annotation_info_unref">
<description>
If @info is statically allocated, does nothing. Otherwise decreases
the reference count of @info. When its reference count drops to 0,
the memory used is freed.

Since: 2.26

</description>
<parameters>
<parameter name="info">
<parameter_description> A #GDBusAnnotationInfo.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_arg_info_ref">
<description>
If @info is statically allocated does nothing. Otherwise increases
the reference count.

Since: 2.26

</description>
<parameters>
<parameter name="info">
<parameter_description> A #GDBusArgInfo
</parameter_description>
</parameter>
</parameters>
<return> The same @info.

</return>
</function>

<function name="g_dbus_arg_info_unref">
<description>
If @info is statically allocated, does nothing. Otherwise decreases
the reference count of @info. When its reference count drops to 0,
the memory used is freed.

Since: 2.26

</description>
<parameters>
<parameter name="info">
<parameter_description> A #GDBusArgInfo.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_auth_observer_authorize_authenticated_peer">
<description>
Emits the #GDBusAuthObserver::authorize-authenticated-peer signal on @observer.

Since: 2.26

</description>
<parameters>
<parameter name="observer">
<parameter_description> A #GDBusAuthObserver.
</parameter_description>
</parameter>
<parameter name="stream">
<parameter_description> A #GIOStream for the #GDBusConnection.
</parameter_description>
</parameter>
<parameter name="credentials">
<parameter_description> Credentials received from the peer or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the peer is authorized, %FALSE if not.

</return>
</function>

<function name="g_dbus_auth_observer_new">
<description>
Creates a new #GDBusAuthObserver object.

Since: 2.26

</description>
<parameters>
</parameters>
<return> A #GDBusAuthObserver. Free with g_object_unref().

</return>
</function>

<function name="g_dbus_connection_add_filter">
<description>
Adds a message filter. Filters are handlers that are run on all
incoming and outgoing messages, prior to standard dispatch. Filters
are run in the order that they were added.  The same handler can be
added as a filter more than once, in which case it will be run more
than once.  Filters added during a filter callback won't be run on
the message being processed. Filter functions are allowed to modify
and even drop messages - see the #GDBusMessageFilterResult
enumeration for details.

Note that filters are run in a dedicated message handling thread so
they can't block and, generally, can't do anything but signal a
worker thread. Also note that filters are rarely needed - use API
such as g_dbus_connection_send_message_with_reply(),
g_dbus_connection_signal_subscribe() or
g_dbus_connection_call() instead.

If a filter consumes an incoming message the message is not
dispatched anywhere else - not even the standard dispatch machinery
(that API such as g_dbus_connection_signal_subscribe() and
g_dbus_connection_send_message_with_reply() relies on) will see the
message. Similary, if a filter consumes an outgoing message, the
message will not be sent to the other peer.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
<parameter name="filter_function">
<parameter_description> A filter function.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> User data to pass to @filter_function.
</parameter_description>
</parameter>
<parameter name="user_data_free_func">
<parameter_description> Function to free @user_data with when filter
is removed or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> A filter identifier that can be used with
g_dbus_connection_remove_filter().

</return>
</function>

<function name="g_dbus_connection_call">
<description>
Asynchronously invokes the @method_name method on the
@interface_name D-Bus interface on the remote object at
@object_path owned by @bus_name.

If @connection is closed then the operation will fail with
%G_IO_ERROR_CLOSED. If @cancellable is canceled, the operation will
fail with %G_IO_ERROR_CANCELLED. If @parameters contains a value
not compatible with the D-Bus protocol, the operation fails with
%G_IO_ERROR_INVALID_ARGUMENT.

If @reply_type is non-%NULL then the reply will be checked for having this type and an
error will be raised if it does not match.  Said another way, if you give a @reply_type
then any non-%NULL return value will be of this type.

If the @parameters #GVariant is floating, it is consumed. This allows
convenient 'inline' use of g_variant_new(), e.g.:
|[
g_dbus_connection_call (connection,
&quot;org.freedesktop.StringThings&quot;,
&quot;/org/freedesktop/StringThings&quot;,
&quot;org.freedesktop.StringThings&quot;,
&quot;TwoStrings&quot;,
g_variant_new (&quot;(ss)&quot;,
&quot;Thing One&quot;,
&quot;Thing Two&quot;),
NULL,
G_DBUS_CALL_FLAGS_NONE,
-1,
NULL,
(GAsyncReadyCallback) two_strings_done,
NULL);
]|

This is an asynchronous method. When the operation is finished, @callback will be invoked
in the &lt;link linkend=&quot;g-main-context-push-thread-default&quot;&gt;thread-default main loop&lt;/link&gt;
of the thread you are calling this method from. You can then call
g_dbus_connection_call_finish() to get the result of the operation.
See g_dbus_connection_call_sync() for the synchronous version of this
function.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
<parameter name="bus_name">
<parameter_description> A unique or well-known bus name or %NULL if @connection is not a message bus connection.
</parameter_description>
</parameter>
<parameter name="object_path">
<parameter_description> Path of remote object.
</parameter_description>
</parameter>
<parameter name="interface_name">
<parameter_description> D-Bus interface to invoke method on.
</parameter_description>
</parameter>
<parameter name="method_name">
<parameter_description> The name of the method to invoke.
</parameter_description>
</parameter>
<parameter name="parameters">
<parameter_description> A #GVariant tuple with parameters for the method or %NULL if not passing parameters.
</parameter_description>
</parameter>
<parameter name="reply_type">
<parameter_description> The expected type of the reply, or %NULL.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> Flags from the #GDBusCallFlags enumeration.
</parameter_description>
</parameter>
<parameter name="timeout_msec">
<parameter_description> The timeout in milliseconds, -1 to use the default
timeout or %G_MAXINT for no timeout.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> A #GCancellable or %NULL.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't
care about the result of the method invocation.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> The data to pass to @callback.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_connection_call_finish">
<description>
Finishes an operation started with g_dbus_connection_call().

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> A #GAsyncResult obtained from the #GAsyncReadyCallback passed to g_dbus_connection_call().
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> %NULL if @error is set. Otherwise a #GVariant tuple with
return values. Free with g_variant_unref().

</return>
</function>

<function name="g_dbus_connection_call_sync">
<description>
Synchronously invokes the @method_name method on the
@interface_name D-Bus interface on the remote object at
@object_path owned by @bus_name.

If @connection is closed then the operation will fail with
%G_IO_ERROR_CLOSED. If @cancellable is canceled, the
operation will fail with %G_IO_ERROR_CANCELLED. If @parameters
contains a value not compatible with the D-Bus protocol, the operation
fails with %G_IO_ERROR_INVALID_ARGUMENT.

If @reply_type is non-%NULL then the reply will be checked for having
this type and an error will be raised if it does not match.  Said
another way, if you give a @reply_type then any non-%NULL return
value will be of this type.

If the @parameters #GVariant is floating, it is consumed.
This allows convenient 'inline' use of g_variant_new(), e.g.:
|[
g_dbus_connection_call_sync (connection,
&quot;org.freedesktop.StringThings&quot;,
&quot;/org/freedesktop/StringThings&quot;,
&quot;org.freedesktop.StringThings&quot;,
&quot;TwoStrings&quot;,
g_variant_new (&quot;(ss)&quot;,
&quot;Thing One&quot;,
&quot;Thing Two&quot;),
NULL,
G_DBUS_CALL_FLAGS_NONE,
-1,
NULL,
&amp;error);
]|

The calling thread is blocked until a reply is received. See
g_dbus_connection_call() for the asynchronous version of
this method.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
<parameter name="bus_name">
<parameter_description> A unique or well-known bus name.
</parameter_description>
</parameter>
<parameter name="object_path">
<parameter_description> Path of remote object.
</parameter_description>
</parameter>
<parameter name="interface_name">
<parameter_description> D-Bus interface to invoke method on.
</parameter_description>
</parameter>
<parameter name="method_name">
<parameter_description> The name of the method to invoke.
</parameter_description>
</parameter>
<parameter name="parameters">
<parameter_description> A #GVariant tuple with parameters for the method or %NULL if not passing parameters.
</parameter_description>
</parameter>
<parameter name="reply_type">
<parameter_description> The expected type of the reply, or %NULL.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> Flags from the #GDBusCallFlags enumeration.
</parameter_description>
</parameter>
<parameter name="timeout_msec">
<parameter_description> The timeout in milliseconds, -1 to use the default
timeout or %G_MAXINT for no timeout.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> A #GCancellable or %NULL.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> %NULL if @error is set. Otherwise a #GVariant tuple with
return values. Free with g_variant_unref().

</return>
</function>

<function name="g_dbus_connection_close">
<description>
Closes @connection. Note that this never causes the process to
exit (this might only happen if the other end of a shared message
bus connection disconnects, see #GDBusConnection:exit-on-close).

Once the connection is closed, operations such as sending a message
will return with the error %G_IO_ERROR_CLOSED. Closing a connection
will not automatically flush the connection so queued messages may
be lost. Use g_dbus_connection_flush() if you need such guarantees.

If @connection is already closed, this method fails with
%G_IO_ERROR_CLOSED.

When @connection has been closed, the #GDBusConnection::closed
signal is emitted in the &lt;link
linkend=&quot;g-main-context-push-thread-default&quot;&gt;thread-default main
loop&lt;/link&gt; of the thread that @connection was constructed in.

This is an asynchronous method. When the operation is finished,
@callback will be invoked in the &lt;link
linkend=&quot;g-main-context-push-thread-default&quot;&gt;thread-default main
loop&lt;/link&gt; of the thread you are calling this method from. You can
then call g_dbus_connection_close_finish() to get the result of the
operation.  See g_dbus_connection_close_sync() for the synchronous
version.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> A #GCancellable or %NULL.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't
care about the result.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> The data to pass to @callback.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_connection_close_finish">
<description>
Finishes an operation started with g_dbus_connection_close().

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> A #GAsyncResult obtained from the #GAsyncReadyCallback passed to g_dbus_connection_close().
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the operation succeeded, %FALSE if @error is set.

</return>
</function>

<function name="g_dbus_connection_close_sync">
<description>
Synchronously closees @connection. The calling thread is blocked
until this is done. See g_dbus_connection_close() for the
asynchronous version of this method and more details about what it
does.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> A #GCancellable or %NULL.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the operation succeeded, %FALSE if @error is set.

</return>
</function>

<function name="g_dbus_connection_emit_signal">
<description>
Emits a signal.

If the parameters GVariant is floating, it is consumed.

This can only fail if @parameters is not compatible with the D-Bus protocol.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
<parameter name="destination_bus_name">
<parameter_description> The unique bus name for the destination for the signal or %NULL to emit to all listeners.
</parameter_description>
</parameter>
<parameter name="object_path">
<parameter_description> Path of remote object.
</parameter_description>
</parameter>
<parameter name="interface_name">
<parameter_description> D-Bus interface to emit a signal on.
</parameter_description>
</parameter>
<parameter name="signal_name">
<parameter_description> The name of the signal to emit.
</parameter_description>
</parameter>
<parameter name="parameters">
<parameter_description> A #GVariant tuple with parameters for the signal or %NULL if not passing parameters.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE unless @error is set.

</return>
</function>

<function name="g_dbus_connection_flush">
<description>
Asynchronously flushes @connection, that is, writes all queued
outgoing message to the transport and then flushes the transport
(using g_output_stream_flush_async()). This is useful in programs
that wants to emit a D-Bus signal and then exit
immediately. Without flushing the connection, there is no guarantee
that the message has been sent to the networking buffers in the OS
kernel.

This is an asynchronous method. When the operation is finished,
@callback will be invoked in the &lt;link
linkend=&quot;g-main-context-push-thread-default&quot;&gt;thread-default main
loop&lt;/link&gt; of the thread you are calling this method from. You can
then call g_dbus_connection_flush_finish() to get the result of the
operation.  See g_dbus_connection_flush_sync() for the synchronous
version.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> A #GCancellable or %NULL.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't
care about the result.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> The data to pass to @callback.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_connection_flush_finish">
<description>
Finishes an operation started with g_dbus_connection_flush().

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> A #GAsyncResult obtained from the #GAsyncReadyCallback passed to g_dbus_connection_flush().
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the operation succeeded, %FALSE if @error is set.

</return>
</function>

<function name="g_dbus_connection_flush_sync">
<description>
Synchronously flushes @connection. The calling thread is blocked
until this is done. See g_dbus_connection_flush() for the
asynchronous version of this method and more details about what it
does.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> A #GCancellable or %NULL.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the operation succeeded, %FALSE if @error is set.

</return>
</function>

<function name="g_dbus_connection_get_capabilities">
<description>
Gets the capabilities negotiated with the remote peer

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
</parameters>
<return> Zero or more flags from the #GDBusCapabilityFlags enumeration.

</return>
</function>

<function name="g_dbus_connection_get_exit_on_close">
<description>
Gets whether the process is terminated when @connection is
closed by the remote peer. See
#GDBusConnection:exit-on-close for more details.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
</parameters>
<return> Whether the process is terminated when @connection is
closed by the remote peer.

</return>
</function>

<function name="g_dbus_connection_get_guid">
<description>
The GUID of the peer performing the role of server when
authenticating. See #GDBusConnection:guid for more details.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
</parameters>
<return> The GUID. Do not free this string, it is owned by
@connection.

</return>
</function>

<function name="g_dbus_connection_get_peer_credentials">
<description>
Gets the credentials of the authenticated peer. This will always
return %NULL unless @connection acted as a server
(e.g. %G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER was passed)
when set up and the client passed credentials as part of the
authentication process.

In a message bus setup, the message bus is always the server and
each application is a client. So this method will always return
%NULL for message bus clients.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
</parameters>
<return> A #GCredentials or %NULL if not available. Do not free
this object, it is owned by @connection.

</return>
</function>

<function name="g_dbus_connection_get_stream">
<description>
Gets the underlying stream used for IO.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> a #GDBusConnection
</parameter_description>
</parameter>
</parameters>
<return> the stream used for IO

</return>
</function>

<function name="g_dbus_connection_get_unique_name">
<description>
Gets the unique name of @connection as assigned by the message
bus. This can also be used to figure out if @connection is a
message bus connection.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
</parameters>
<return> The unique name or %NULL if @connection is not a message
bus connection. Do not free this string, it is owned by
@connection.

</return>
</function>

<function name="g_dbus_connection_is_closed">
<description>
Gets whether @connection is closed.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the connection is closed, %FALSE otherwise.

</return>
</function>

<function name="g_dbus_connection_new">
<description>
Asynchronously sets up a D-Bus connection for exchanging D-Bus messages
with the end represented by @stream.

If @observer is not %NULL it may be used to control the
authentication process.

When the operation is finished, @callback will be invoked. You can
then call g_dbus_connection_new_finish() to get the result of the
operation.

This is a asynchronous failable constructor. See
g_dbus_connection_new_sync() for the synchronous
version.

Since: 2.26

</description>
<parameters>
<parameter name="stream">
<parameter_description> A #GIOStream.
</parameter_description>
</parameter>
<parameter name="guid">
<parameter_description> The GUID to use if a authenticating as a server or %NULL.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> Flags describing how to make the connection.
</parameter_description>
</parameter>
<parameter name="observer">
<parameter_description> A #GDBusAuthObserver or %NULL.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> A #GCancellable or %NULL.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> A #GAsyncReadyCallback to call when the request is satisfied.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> The data to pass to @callback.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_connection_new_finish">
<description>
Finishes an operation started with g_dbus_connection_new().

Since: 2.26

</description>
<parameters>
<parameter name="res">
<parameter_description> A #GAsyncResult obtained from the #GAsyncReadyCallback passed to g_dbus_connection_new().
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> A #GDBusConnection or %NULL if @error is set. Free with g_object_unref().

</return>
</function>

<function name="g_dbus_connection_new_for_address">
<description>
Asynchronously connects and sets up a D-Bus client connection for
exchanging D-Bus messages with an endpoint specified by @address
which must be in the D-Bus address format.

This constructor can only be used to initiate client-side
connections - use g_dbus_connection_new() if you need to act as the
server. In particular, @flags cannot contain the
%G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER or
%G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS flags.

When the operation is finished, @callback will be invoked. You can
then call g_dbus_connection_new_finish() to get the result of the
operation.

If @observer is not %NULL it may be used to control the
authentication process.

This is a asynchronous failable constructor. See
g_dbus_connection_new_for_address_sync() for the synchronous
version.

Since: 2.26

</description>
<parameters>
<parameter name="address">
<parameter_description> A D-Bus address.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> Flags describing how to make the connection.
</parameter_description>
</parameter>
<parameter name="observer">
<parameter_description> A #GDBusAuthObserver or %NULL.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> A #GCancellable or %NULL.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> A #GAsyncReadyCallback to call when the request is satisfied.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> The data to pass to @callback.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_connection_new_for_address_finish">
<description>
Finishes an operation started with g_dbus_connection_new_for_address().

Since: 2.26

</description>
<parameters>
<parameter name="res">
<parameter_description> A #GAsyncResult obtained from the #GAsyncReadyCallback passed to g_dbus_connection_new().
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> A #GDBusConnection or %NULL if @error is set. Free with g_object_unref().

</return>
</function>

<function name="g_dbus_connection_new_for_address_sync">
<description>
Synchronously connects and sets up a D-Bus client connection for
exchanging D-Bus messages with an endpoint specified by @address
which must be in the D-Bus address format.

This constructor can only be used to initiate client-side
connections - use g_dbus_connection_new_sync() if you need to act
as the server. In particular, @flags cannot contain the
%G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER or
%G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS flags.

This is a synchronous failable constructor. See
g_dbus_connection_new_for_address() for the asynchronous version.

If @observer is not %NULL it may be used to control the
authentication process.

Since: 2.26

</description>
<parameters>
<parameter name="address">
<parameter_description> A D-Bus address.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> Flags describing how to make the connection.
</parameter_description>
</parameter>
<parameter name="observer">
<parameter_description> A #GDBusAuthObserver or %NULL.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> A #GCancellable or %NULL.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> A #GDBusConnection or %NULL if @error is set. Free with g_object_unref().

</return>
</function>

<function name="g_dbus_connection_new_sync">
<description>
Synchronously sets up a D-Bus connection for exchanging D-Bus messages
with the end represented by @stream.

If @observer is not %NULL it may be used to control the
authentication process.

This is a synchronous failable constructor. See
g_dbus_connection_new() for the asynchronous version.

Since: 2.26

</description>
<parameters>
<parameter name="stream">
<parameter_description> A #GIOStream.
</parameter_description>
</parameter>
<parameter name="guid">
<parameter_description> The GUID to use if a authenticating as a server or %NULL.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> Flags describing how to make the connection.
</parameter_description>
</parameter>
<parameter name="observer">
<parameter_description> A #GDBusAuthObserver or %NULL.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> A #GCancellable or %NULL.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> A #GDBusConnection or %NULL if @error is set. Free with g_object_unref().

</return>
</function>

<function name="g_dbus_connection_register_object">
<description>
Registers callbacks for exported objects at @object_path with the
D-Bus interface that is described in @interface_info.

Calls to functions in @vtable (and @user_data_free_func) will
happen in the &lt;link linkend=&quot;g-main-context-push-thread-default&quot;&gt;thread-default main
loop&lt;/link&gt; of the thread you are calling this method from.

Note that all #GVariant values passed to functions in @vtable will match
the signature given in @interface_info - if a remote caller passes
incorrect values, the &lt;literal&gt;org.freedesktop.DBus.Error.InvalidArgs&lt;/literal&gt;
is returned to the remote caller.

Additionally, if the remote caller attempts to invoke methods or
access properties not mentioned in @interface_info the
&lt;literal&gt;org.freedesktop.DBus.Error.UnknownMethod&lt;/literal&gt; resp.
&lt;literal&gt;org.freedesktop.DBus.Error.InvalidArgs&lt;/literal&gt; errors
are returned to the caller.

It is considered a programming error if the
#GDBusInterfaceGetPropertyFunc function in @vtable returns a
#GVariant of incorrect type.

If an existing callback is already registered at @object_path and
@interface_name, then @error is set to #G_IO_ERROR_EXISTS.

GDBus automatically implements the standard D-Bus interfaces
org.freedesktop.DBus.Properties, org.freedesktop.DBus.Introspectable
and org.freedesktop.Peer, so you don't have to implement those for
the objects you export. You &lt;emphasis&gt;can&lt;/emphasis&gt; implement
org.freedesktop.DBus.Properties yourself, e.g. to handle getting
and setting of properties asynchronously.

Note that the reference count on @interface_info will be
incremented by 1 (unless allocated statically, e.g. if the
reference count is -1, see g_dbus_interface_info_ref()) for as long
as the object is exported. Also note that @vtable will be copied.

See &lt;xref linkend=&quot;gdbus-server&quot;/&gt; for an example of how to use this method.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
<parameter name="object_path">
<parameter_description> The object path to register at.
</parameter_description>
</parameter>
<parameter name="interface_info">
<parameter_description> Introspection data for the interface.
</parameter_description>
</parameter>
<parameter name="vtable">
<parameter_description> A #GDBusInterfaceVTable to call into or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> Data to pass to functions in @vtable.
</parameter_description>
</parameter>
<parameter name="user_data_free_func">
<parameter_description> Function to call when the object path is unregistered.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> 0 if @error is set, otherwise a registration id (never 0)
that can be used with g_dbus_connection_unregister_object() .

</return>
</function>

<function name="g_dbus_connection_register_subtree">
<description>
Registers a whole subtree of &lt;quote&gt;dynamic&lt;/quote&gt; objects.

The @enumerate and @introspection functions in @vtable are used to
convey, to remote callers, what nodes exist in the subtree rooted
by @object_path.

When handling remote calls into any node in the subtree, first the
@enumerate function is used to check if the node exists. If the node exists
or the #G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES flag is set
the @introspection function is used to check if the node supports the
requested method. If so, the @dispatch function is used to determine
where to dispatch the call. The collected #GDBusInterfaceVTable and
#gpointer will be used to call into the interface vtable for processing
the request.

All calls into user-provided code will be invoked in the &lt;link
linkend=&quot;g-main-context-push-thread-default&quot;&gt;thread-default main
loop&lt;/link&gt; of the thread you are calling this method from.

If an existing subtree is already registered at @object_path or
then @error is set to #G_IO_ERROR_EXISTS.

Note that it is valid to register regular objects (using
g_dbus_connection_register_object()) in a subtree registered with
g_dbus_connection_register_subtree() - if so, the subtree handler
is tried as the last resort. One way to think about a subtree
handler is to consider it a &lt;quote&gt;fallback handler&lt;/quote&gt;
for object paths not registered via g_dbus_connection_register_object()
or other bindings.

Note that @vtable will be copied so you cannot change it after
registration.

See &lt;xref linkend=&quot;gdbus-subtree-server&quot;/&gt; for an example of how to use this method.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
<parameter name="object_path">
<parameter_description> The object path to register the subtree at.
</parameter_description>
</parameter>
<parameter name="vtable">
<parameter_description> A #GDBusSubtreeVTable to enumerate, introspect and dispatch nodes in the subtree.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> Flags used to fine tune the behavior of the subtree.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> Data to pass to functions in @vtable.
</parameter_description>
</parameter>
<parameter name="user_data_free_func">
<parameter_description> Function to call when the subtree is unregistered.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> 0 if @error is set, otherwise a subtree registration id (never 0)
that can be used with g_dbus_connection_unregister_subtree() .

</return>
</function>

<function name="g_dbus_connection_remove_filter">
<description>
Removes a filter.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> a #GDBusConnection
</parameter_description>
</parameter>
<parameter name="filter_id">
<parameter_description> an identifier obtained from g_dbus_connection_add_filter()
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_connection_send_message">
<description>
Asynchronously sends @message to the peer represented by @connection.

Unless @flags contain the
%G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL flag, the serial number
will be assigned by @connection and set on @message via
g_dbus_message_set_serial(). If @out_serial is not %NULL, then the
serial number used will be written to this location prior to
submitting the message to the underlying transport.

If @connection is closed then the operation will fail with
%G_IO_ERROR_CLOSED. If @message is not well-formed,
the operation fails with %G_IO_ERROR_INVALID_ARGUMENT.

See &lt;xref linkend=&quot;gdbus-server&quot;/&gt; and &lt;xref
linkend=&quot;gdbus-unix-fd-client&quot;/&gt; for an example of how to use this
low-level API to send and receive UNIX file descriptors.

Note that @message must be unlocked, unless @flags contain the
%G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL flag.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
<parameter name="message">
<parameter_description> A #GDBusMessage
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> Flags affecting how the message is sent.
</parameter_description>
</parameter>
<parameter name="out_serial">
<parameter_description> Return location for serial number assigned to @message when sending it or %NULL.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the message was well-formed and queued for
transmission, %FALSE if @error is set.

</return>
</function>

<function name="g_dbus_connection_send_message_with_reply">
<description>
Asynchronously sends @message to the peer represented by @connection.

Unless @flags contain the
%G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL flag, the serial number
will be assigned by @connection and set on @message via
g_dbus_message_set_serial(). If @out_serial is not %NULL, then the
serial number used will be written to this location prior to
submitting the message to the underlying transport.

If @connection is closed then the operation will fail with
%G_IO_ERROR_CLOSED. If @cancellable is canceled, the operation will
fail with %G_IO_ERROR_CANCELLED. If @message is not well-formed,
the operation fails with %G_IO_ERROR_INVALID_ARGUMENT.

This is an asynchronous method. When the operation is finished, @callback will be invoked
in the &lt;link linkend=&quot;g-main-context-push-thread-default&quot;&gt;thread-default main loop&lt;/link&gt;
of the thread you are calling this method from. You can then call
g_dbus_connection_send_message_with_reply_finish() to get the result of the operation.
See g_dbus_connection_send_message_with_reply_sync() for the synchronous version.

Note that @message must be unlocked, unless @flags contain the
%G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL flag.

See &lt;xref linkend=&quot;gdbus-server&quot;/&gt; and &lt;xref
linkend=&quot;gdbus-unix-fd-client&quot;/&gt; for an example of how to use this
low-level API to send and receive UNIX file descriptors.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> Flags affecting how the message is sent.
</parameter_description>
</parameter>
<parameter name="timeout_msec">
<parameter_description> The timeout in milliseconds, -1 to use the default
timeout or %G_MAXINT for no timeout.
</parameter_description>
</parameter>
<parameter name="out_serial">
<parameter_description> Return location for serial number assigned to @message when sending it or %NULL.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> A #GCancellable or %NULL.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't
care about the result.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> The data to pass to @callback.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_connection_send_message_with_reply_finish">
<description>
Finishes an operation started with g_dbus_connection_send_message_with_reply().

Note that @error is only set if a local in-process error
occured. That is to say that the returned #GDBusMessage object may
be of type %G_DBUS_MESSAGE_TYPE_ERROR. Use
g_dbus_message_to_gerror() to transcode this to a #GError.

See &lt;xref linkend=&quot;gdbus-server&quot;/&gt; and &lt;xref
linkend=&quot;gdbus-unix-fd-client&quot;/&gt; for an example of how to use this
low-level API to send and receive UNIX file descriptors.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> a #GDBusConnection
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> A #GAsyncResult obtained from the #GAsyncReadyCallback passed to g_dbus_connection_send_message_with_reply().
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> A locked #GDBusMessage or %NULL if @error is set.

</return>
</function>

<function name="g_dbus_connection_send_message_with_reply_sync">
<description>
Synchronously sends @message to the peer represented by @connection
and blocks the calling thread until a reply is received or the
timeout is reached. See g_dbus_connection_send_message_with_reply()
for the asynchronous version of this method.

Unless @flags contain the
%G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL flag, the serial number
will be assigned by @connection and set on @message via
g_dbus_message_set_serial(). If @out_serial is not %NULL, then the
serial number used will be written to this location prior to
submitting the message to the underlying transport.

If @connection is closed then the operation will fail with
%G_IO_ERROR_CLOSED. If @cancellable is canceled, the operation will
fail with %G_IO_ERROR_CANCELLED. If @message is not well-formed,
the operation fails with %G_IO_ERROR_INVALID_ARGUMENT.

Note that @error is only set if a local in-process error
occured. That is to say that the returned #GDBusMessage object may
be of type %G_DBUS_MESSAGE_TYPE_ERROR. Use
g_dbus_message_to_gerror() to transcode this to a #GError.

See &lt;xref linkend=&quot;gdbus-server&quot;/&gt; and &lt;xref
linkend=&quot;gdbus-unix-fd-client&quot;/&gt; for an example of how to use this
low-level API to send and receive UNIX file descriptors.

Note that @message must be unlocked, unless @flags contain the
%G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL flag.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> Flags affecting how the message is sent.
</parameter_description>
</parameter>
<parameter name="timeout_msec">
<parameter_description> The timeout in milliseconds, -1 to use the default
timeout or %G_MAXINT for no timeout.
</parameter_description>
</parameter>
<parameter name="out_serial">
<parameter_description> Return location for serial number assigned to @message when sending it or %NULL.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> A #GCancellable or %NULL.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> A locked #GDBusMessage that is the reply to @message or %NULL if @error is set.

</return>
</function>

<function name="g_dbus_connection_set_exit_on_close">
<description>
Sets whether the process should be terminated when @connection is
closed by the remote peer. See #GDBusConnection:exit-on-close for
more details.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
<parameter name="exit_on_close">
<parameter_description> Whether the process should be terminated
when @connection is closed by the remote peer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_connection_signal_subscribe">
<description>
Subscribes to signals on @connection and invokes @callback with a
whenever the signal is received. Note that @callback
will be invoked in the &lt;link
linkend=&quot;g-main-context-push-thread-default&quot;&gt;thread-default main
loop&lt;/link&gt; of the thread you are calling this method from.

If @connection is not a message bus connection, @sender must be
%NULL.

If @sender is a well-known name note that @callback is invoked with
the unique name for the owner of @sender, not the well-known name
as one would expect. This is because the message bus rewrites the
name. As such, to avoid certain race conditions, users should be
tracking the name owner of the well-known name and use that when
processing the received signal.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
<parameter name="sender">
<parameter_description> Sender name to match on (unique or well-known name) or %NULL to listen from all senders.
</parameter_description>
</parameter>
<parameter name="interface_name">
<parameter_description> D-Bus interface name to match on or %NULL to match on all interfaces.
</parameter_description>
</parameter>
<parameter name="member">
<parameter_description> D-Bus signal name to match on or %NULL to match on all signals.
</parameter_description>
</parameter>
<parameter name="object_path">
<parameter_description> Object path to match on or %NULL to match on all object paths.
</parameter_description>
</parameter>
<parameter name="arg0">
<parameter_description> Contents of first string argument to match on or %NULL to match on all kinds of arguments.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> Flags describing how to subscribe to the signal (currently unused).
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> Callback to invoke when there is a signal matching the requested data.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> User data to pass to @callback.
</parameter_description>
</parameter>
<parameter name="user_data_free_func">
<parameter_description> Function to free @user_data with when subscription is removed or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> A subscription identifier that can be used with g_dbus_connection_signal_unsubscribe().

</return>
</function>

<function name="g_dbus_connection_signal_unsubscribe">
<description>
Unsubscribes from signals.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
<parameter name="subscription_id">
<parameter_description> A subscription id obtained from g_dbus_connection_signal_subscribe().
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_connection_start_message_processing">
<description>
If @connection was created with
%G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING, this method
starts processing messages. Does nothing on if @connection wasn't
created with this flag or if the method has already been called.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_connection_unregister_object">
<description>
Unregisters an object.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
<parameter name="registration_id">
<parameter_description> A registration id obtained from g_dbus_connection_register_object().
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the object was unregistered, %FALSE otherwise.

</return>
</function>

<function name="g_dbus_connection_unregister_subtree">
<description>
Unregisters a subtree.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
<parameter name="registration_id">
<parameter_description> A subtree registration id obtained from g_dbus_connection_register_subtree().
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the subtree was unregistered, %FALSE otherwise.

</return>
</function>

<function name="g_dbus_error_encode_gerror">
<description>
Creates a D-Bus error name to use for @error. If @error matches
a registered error (cf. g_dbus_error_register_error()), the corresponding
D-Bus error name will be returned.

Otherwise the a name of the form
&lt;literal&gt;org.gtk.GDBus.UnmappedGError.Quark._ESCAPED_QUARK_NAME.Code_ERROR_CODE&lt;/literal&gt;
will be used. This allows other GDBus applications to map the error
on the wire back to a #GError using g_dbus_error_new_for_dbus_error().

This function is typically only used in object mappings to put a
#GError on the wire. Regular applications should not use it.

Since: 2.26

</description>
<parameters>
<parameter name="error">
<parameter_description> A #GError.
</parameter_description>
</parameter>
</parameters>
<return> A D-Bus error name (never %NULL). Free with g_free().

</return>
</function>

<function name="g_dbus_error_get_remote_error">
<description>
Gets the D-Bus error name used for @error, if any.

This function is guaranteed to return a D-Bus error name for all
#GError&lt;!-- --&gt;s returned from functions handling remote method
calls (e.g. g_dbus_connection_call_finish()) unless
g_dbus_error_strip_remote_error() has been used on @error.

Since: 2.26

</description>
<parameters>
<parameter name="error">
<parameter_description> A #GError.
</parameter_description>
</parameter>
</parameters>
<return> An allocated string or %NULL if the D-Bus error name could not be found. Free with g_free().

</return>
</function>

<function name="g_dbus_error_is_remote_error">
<description>
Checks if @error represents an error received via D-Bus from a remote peer. If so,
use g_dbus_error_get_remote_error() to get the name of the error.

Since: 2.26

</description>
<parameters>
<parameter name="error">
<parameter_description> A #GError.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @error represents an error from a remote peer,
%FALSE otherwise.

</return>
</function>

<function name="g_dbus_error_new_for_dbus_error">
<description>
Creates a #GError based on the contents of @dbus_error_name and
@dbus_error_message.

Errors registered with g_dbus_error_register_error() will be looked
up using @dbus_error_name and if a match is found, the error domain
and code is used. Applications can use g_dbus_error_get_remote_error()
to recover @dbus_error_name.

If a match against a registered error is not found and the D-Bus
error name is in a form as returned by g_dbus_error_encode_gerror()
the error domain and code encoded in the name is used to
create the #GError. Also, @dbus_error_name is added to the error message
such that it can be recovered with g_dbus_error_get_remote_error().

Otherwise, a #GError with the error code %G_IO_ERROR_DBUS_ERROR
in the #G_IO_ERROR error domain is returned. Also, @dbus_error_name is
added to the error message such that it can be recovered with
g_dbus_error_get_remote_error().

In all three cases, @dbus_error_name can always be recovered from the
returned #GError using the g_dbus_error_get_remote_error() function
(unless g_dbus_error_strip_remote_error() hasn't been used on the returned error).

This function is typically only used in object mappings to prepare
#GError instances for applications. Regular applications should not use
it.

Since: 2.26

</description>
<parameters>
<parameter name="dbus_error_name">
<parameter_description> D-Bus error name.
</parameter_description>
</parameter>
<parameter name="dbus_error_message">
<parameter_description> D-Bus error message.
</parameter_description>
</parameter>
</parameters>
<return> An allocated #GError. Free with g_error_free().

</return>
</function>

<function name="g_dbus_error_register_error">
<description>
Creates an association to map between @dbus_error_name and
#GError&lt;!-- --&gt;s specified by @error_domain and @error_code.

This is typically done in the routine that returns the #GQuark for
an error domain.

Since: 2.26

</description>
<parameters>
<parameter name="error_domain">
<parameter_description> A #GQuark for a error domain.
</parameter_description>
</parameter>
<parameter name="error_code">
<parameter_description> An error code.
</parameter_description>
</parameter>
<parameter name="dbus_error_name">
<parameter_description> A D-Bus error name.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the association was created, %FALSE if it already
exists.

</return>
</function>

<function name="g_dbus_error_register_error_domain">
<description>
Helper function for associating a #GError error domain with D-Bus error names.

Since: 2.26

</description>
<parameters>
<parameter name="error_domain_quark_name">
<parameter_description> The error domain name.
</parameter_description>
</parameter>
<parameter name="quark_volatile">
<parameter_description> A pointer where to store the #GQuark.
</parameter_description>
</parameter>
<parameter name="entries">
<parameter_description> A pointer to @num_entries #GDBusErrorEntry struct items.
</parameter_description>
</parameter>
<parameter name="num_entries">
<parameter_description> Number of items to register.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_error_set_dbus_error">
<description>
Does nothing if @error is %NULL. Otherwise sets *@error to
a new #GError created with g_dbus_error_new_for_dbus_error()
with @dbus_error_message prepend with @format (unless %NULL).

Since: 2.26

</description>
<parameters>
<parameter name="error">
<parameter_description> A pointer to a #GError or %NULL.
</parameter_description>
</parameter>
<parameter name="dbus_error_name">
<parameter_description> D-Bus error name.
</parameter_description>
</parameter>
<parameter name="dbus_error_message">
<parameter_description> D-Bus error message.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> printf()-style format to prepend to @dbus_error_message or %NULL.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> Arguments for @format.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_error_set_dbus_error_valist">
<description>
Like g_dbus_error_set_dbus_error() but intended for language bindings.

Since: 2.26

</description>
<parameters>
<parameter name="error">
<parameter_description> A pointer to a #GError or %NULL.
</parameter_description>
</parameter>
<parameter name="dbus_error_name">
<parameter_description> D-Bus error name.
</parameter_description>
</parameter>
<parameter name="dbus_error_message">
<parameter_description> D-Bus error message.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> printf()-style format to prepend to @dbus_error_message or %NULL.
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> Arguments for @format.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_error_strip_remote_error">
<description>
Looks for extra information in the error message used to recover
the D-Bus error name and strips it if found. If stripped, the
message field in @error will correspond exactly to what was
received on the wire.

This is typically used when presenting errors to the end user.

Since: 2.26

</description>
<parameters>
<parameter name="error">
<parameter_description> A #GError.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if information was stripped, %FALSE otherwise.

</return>
</function>

<function name="g_dbus_error_unregister_error">
<description>
Destroys an association previously set up with g_dbus_error_register_error().

Since: 2.26

</description>
<parameters>
<parameter name="error_domain">
<parameter_description> A #GQuark for a error domain.
</parameter_description>
</parameter>
<parameter name="error_code">
<parameter_description> An error code.
</parameter_description>
</parameter>
<parameter name="dbus_error_name">
<parameter_description> A D-Bus error name.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the association was destroyed, %FALSE if it wasn't found.

</return>
</function>

<function name="g_dbus_generate_guid">
<description>
Generate a D-Bus GUID that can be used with
e.g. g_dbus_connection_new().

See the D-Bus specification regarding what strings are valid D-Bus
GUID (for example, D-Bus GUIDs are not RFC-4122 compliant).

Since: 2.26

</description>
<parameters>
</parameters>
<return> A valid D-Bus GUID. Free with g_free().

</return>
</function>

<function name="g_dbus_interface_info_generate_xml">
<description>
Appends an XML representation of @info (and its children) to @string_builder.

This function is typically used for generating introspection XML
documents at run-time for handling the
&lt;literal&gt;org.freedesktop.DBus.Introspectable.Introspect&lt;/literal&gt;
method.

Since: 2.26

</description>
<parameters>
<parameter name="info">
<parameter_description> A #GDBusNodeInfo
</parameter_description>
</parameter>
<parameter name="indent">
<parameter_description> Indentation level.
</parameter_description>
</parameter>
<parameter name="string_builder">
<parameter_description> A #GString to to append XML data to.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_interface_info_lookup_method">
<description>
Looks up information about a method.

This cost of this function is O(n) in number of methods.

Since: 2.26

</description>
<parameters>
<parameter name="info">
<parameter_description> A #GDBusInterfaceInfo.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> A D-Bus method name (typically in CamelCase)
</parameter_description>
</parameter>
</parameters>
<return> A #GDBusMethodInfo or %NULL if not found. Do not free, it is owned by @info.

</return>
</function>

<function name="g_dbus_interface_info_lookup_property">
<description>
Looks up information about a property.

This cost of this function is O(n) in number of properties.

Since: 2.26

</description>
<parameters>
<parameter name="info">
<parameter_description> A #GDBusInterfaceInfo.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> A D-Bus property name (typically in CamelCase).
</parameter_description>
</parameter>
</parameters>
<return> A #GDBusPropertyInfo or %NULL if not found. Do not free, it is owned by @info.

</return>
</function>

<function name="g_dbus_interface_info_lookup_signal">
<description>
Looks up information about a signal.

This cost of this function is O(n) in number of signals.

Since: 2.26

</description>
<parameters>
<parameter name="info">
<parameter_description> A #GDBusInterfaceInfo.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> A D-Bus signal name (typically in CamelCase)
</parameter_description>
</parameter>
</parameters>
<return> A #GDBusSignalInfo or %NULL if not found. Do not free, it is owned by @info.

</return>
</function>

<function name="g_dbus_interface_info_ref">
<description>
If @info is statically allocated does nothing. Otherwise increases
the reference count.

Since: 2.26

</description>
<parameters>
<parameter name="info">
<parameter_description> A #GDBusInterfaceInfo
</parameter_description>
</parameter>
</parameters>
<return> The same @info.

</return>
</function>

<function name="g_dbus_interface_info_unref">
<description>
If @info is statically allocated, does nothing. Otherwise decreases
the reference count of @info. When its reference count drops to 0,
the memory used is freed.

Since: 2.26

</description>
<parameters>
<parameter name="info">
<parameter_description> A #GDBusInterfaceInfo.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_is_address">
<description>
Checks if @string is a D-Bus address.

This doesn't check if @string is actually supported by #GDBusServer
or #GDBusConnection - use g_dbus_is_supported_address() to do more
checks.

Since: 2.26

</description>
<parameters>
<parameter name="string">
<parameter_description> A string.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @string is a valid D-Bus address, %FALSE otherwise.

</return>
</function>

<function name="g_dbus_is_guid">
<description>
Checks if @string is a D-Bus GUID.

See the D-Bus specification regarding what strings are valid D-Bus
GUID (for example, D-Bus GUIDs are not RFC-4122 compliant).

Since: 2.26

</description>
<parameters>
<parameter name="string">
<parameter_description> The string to check.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @string is a guid, %FALSE otherwise.

</return>
</function>

<function name="g_dbus_is_interface_name">
<description>
Checks if @string is a valid D-Bus interface name.

Since: 2.26

</description>
<parameters>
<parameter name="string">
<parameter_description> The string to check.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if valid, %FALSE otherwise.

</return>
</function>

<function name="g_dbus_is_member_name">
<description>
Checks if @string is a valid D-Bus member (e.g. signal or method) name.

Since: 2.26

</description>
<parameters>
<parameter name="string">
<parameter_description> The string to check.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if valid, %FALSE otherwise.

</return>
</function>

<function name="g_dbus_is_name">
<description>
Checks if @string is a valid D-Bus bus name (either unique or well-known).

Since: 2.26

</description>
<parameters>
<parameter name="string">
<parameter_description> The string to check.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if valid, %FALSE otherwise.

</return>
</function>

<function name="g_dbus_is_supported_address">
<description>
Like g_dbus_is_address() but also checks if the library suppors the
transports in @string and that key/value pairs for each transport
are valid.

Since: 2.26

</description>
<parameters>
<parameter name="string">
<parameter_description> A string.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @string is a valid D-Bus address that is
supported by this library, %FALSE if @error is set.

</return>
</function>

<function name="g_dbus_is_unique_name">
<description>
Checks if @string is a valid D-Bus unique bus name.

Since: 2.26

</description>
<parameters>
<parameter name="string">
<parameter_description> The string to check.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if valid, %FALSE otherwise.

</return>
</function>

<function name="g_dbus_message_bytes_needed">
<description>
Utility function to calculate how many bytes are needed to
completely deserialize the D-Bus message stored at @blob.

Since: 2.26

</description>
<parameters>
<parameter name="blob">
<parameter_description> A blob represent a binary D-Bus message.
</parameter_description>
</parameter>
<parameter name="blob_len">
<parameter_description> The length of @blob (must be at least 16).
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> Number of bytes needed or -1 if @error is set (e.g. if
@blob contains invalid data or not enough data is available to
determine the size).

</return>
</function>

<function name="g_dbus_message_copy">
<description>
Copies @message. The copy is a deep copy and the returned
#GDBusMessage is completely identical except that it is guaranteed
to not be locked.

This operation can fail if e.g. @message contains file descriptors
and the per-process or system-wide open files limit is reached.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> A new #GDBusMessage or %NULL if @error is set. Free with
g_object_unref().

</return>
</function>

<function name="g_dbus_message_get_arg0">
<description>
Convenience to get the first item in the body of @message.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
</parameters>
<return> The string item or %NULL if the first item in the body of
@message is not a string.

</return>
</function>

<function name="g_dbus_message_get_body">
<description>
Gets the body of a message.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
</parameters>
<return> A #GVariant or %NULL if the body is empty. Do not free, it is owned by @message.

</return>
</function>

<function name="g_dbus_message_get_byte_order">
<description>
Gets the byte order of @message.


</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
</parameters>
<return> The byte order.
</return>
</function>

<function name="g_dbus_message_get_destination">
<description>
Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION header field.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
</parameters>
<return> The value.

</return>
</function>

<function name="g_dbus_message_get_error_name">
<description>
Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME header field.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
</parameters>
<return> The value.

</return>
</function>

<function name="g_dbus_message_get_flags">
<description>
Gets the flags for @message.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
</parameters>
<return> Flags that are set (typically values from the #GDBusMessageFlags enumeration bitwise ORed together).

</return>
</function>

<function name="g_dbus_message_get_header">
<description>
Gets a header field on @message.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
<parameter name="header_field">
<parameter_description> A 8-bit unsigned integer (typically a value from the #GDBusMessageHeaderField enumeration)
</parameter_description>
</parameter>
</parameters>
<return> A #GVariant with the value if the header was found, %NULL
otherwise. Do not free, it is owned by @message.

</return>
</function>

<function name="g_dbus_message_get_header_fields">
<description>
Gets an array of all header fields on @message that are set.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
</parameters>
<return> An array of header fields terminated by
%G_DBUS_MESSAGE_HEADER_FIELD_INVALID.  Each element is a
#guchar. Free with g_free().

</return>
</function>

<function name="g_dbus_message_get_interface">
<description>
Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE header field.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
</parameters>
<return> The value.

</return>
</function>

<function name="g_dbus_message_get_locked">
<description>
Checks whether @message is locked. To monitor changes to this
value, conncet to the #GObject::notify signal to listen for changes
on the #GDBusMessage:locked property.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @message is locked, %FALSE otherwise.

</return>
</function>

<function name="g_dbus_message_get_member">
<description>
Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_MEMBER header field.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
</parameters>
<return> The value.

</return>
</function>

<function name="g_dbus_message_get_message_type">
<description>
Gets the type of @message.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
</parameters>
<return> A 8-bit unsigned integer (typically a value from the #GDBusMessageType enumeration).

</return>
</function>

<function name="g_dbus_message_get_num_unix_fds">
<description>
Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS header field.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
</parameters>
<return> The value.

</return>
</function>

<function name="g_dbus_message_get_path">
<description>
Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_PATH header field.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
</parameters>
<return> The value.

</return>
</function>

<function name="g_dbus_message_get_reply_serial">
<description>
Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL header field.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
</parameters>
<return> The value.

</return>
</function>

<function name="g_dbus_message_get_sender">
<description>
Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_SENDER header field.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
</parameters>
<return> The value.

</return>
</function>

<function name="g_dbus_message_get_serial">
<description>
Gets the serial for @message.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
</parameters>
<return> A #guint32.

</return>
</function>

<function name="g_dbus_message_get_signature">
<description>
Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE header field.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
</parameters>
<return> The value.

</return>
</function>

<function name="g_dbus_message_get_unix_fd_list">
<description>
Gets the UNIX file descriptors associated with @message, if any.

This method is only available on UNIX.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
</parameters>
<return>A #GUnixFDList or %NULL if no file descriptors are
associated. Do not free, this object is owned by @message.

</return>
</function>

<function name="g_dbus_message_lock">
<description>
If @message is locked, does nothing. Otherwise locks the message.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_message_new">
<description>
Creates a new empty #GDBusMessage.

Since: 2.26

</description>
<parameters>
</parameters>
<return> A #GDBusMessage. Free with g_object_unref().

</return>
</function>

<function name="g_dbus_message_new_from_blob">
<description>
Creates a new #GDBusMessage from the data stored at @blob. The byte
order that the message was in can be retrieved using
g_dbus_message_get_byte_order().

Since: 2.26

</description>
<parameters>
<parameter name="blob">
<parameter_description> A blob represent a binary D-Bus message.
</parameter_description>
</parameter>
<parameter name="blob_len">
<parameter_description> The length of @blob.
</parameter_description>
</parameter>
<parameter name="capabilities">
<parameter_description> A #GDBusCapabilityFlags describing what protocol features are supported.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> A new #GDBusMessage or %NULL if @error is set. Free with
g_object_unref().

</return>
</function>

<function name="g_dbus_message_new_method_call">
<description>
Creates a new #GDBusMessage for a method call.

Since: 2.26

</description>
<parameters>
<parameter name="name">
<parameter_description> A valid D-Bus name or %NULL.
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> A valid object path.
</parameter_description>
</parameter>
<parameter name="interface_">
<parameter_description> A valid D-Bus interface name or %NULL.
</parameter_description>
</parameter>
<parameter name="method">
<parameter_description> A valid method name.
</parameter_description>
</parameter>
</parameters>
<return> A #GDBusMessage. Free with g_object_unref().

</return>
</function>

<function name="g_dbus_message_new_method_error">
<description>
Creates a new #GDBusMessage that is an error reply to @method_call_message.

Since: 2.26

</description>
<parameters>
<parameter name="method_call_message">
<parameter_description> A message of type %G_DBUS_MESSAGE_TYPE_METHOD_CALL to
create a reply message to.
</parameter_description>
</parameter>
<parameter name="error_name">
<parameter_description> A valid D-Bus error name.
</parameter_description>
</parameter>
<parameter name="error_message_format">
<parameter_description> The D-Bus error message in a printf() format.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> Arguments for @error_message_format.
</parameter_description>
</parameter>
</parameters>
<return> A #GDBusMessage. Free with g_object_unref().

</return>
</function>

<function name="g_dbus_message_new_method_error_literal">
<description>
Creates a new #GDBusMessage that is an error reply to @method_call_message.

Since: 2.26

</description>
<parameters>
<parameter name="method_call_message">
<parameter_description> A message of type %G_DBUS_MESSAGE_TYPE_METHOD_CALL to
create a reply message to.
</parameter_description>
</parameter>
<parameter name="error_name">
<parameter_description> A valid D-Bus error name.
</parameter_description>
</parameter>
<parameter name="error_message">
<parameter_description> The D-Bus error message.
</parameter_description>
</parameter>
</parameters>
<return> A #GDBusMessage. Free with g_object_unref().

</return>
</function>

<function name="g_dbus_message_new_method_error_valist">
<description>
Like g_dbus_message_new_method_error() but intended for language bindings.

Since: 2.26

</description>
<parameters>
<parameter name="method_call_message">
<parameter_description> A message of type %G_DBUS_MESSAGE_TYPE_METHOD_CALL to
create a reply message to.
</parameter_description>
</parameter>
<parameter name="error_name">
<parameter_description> A valid D-Bus error name.
</parameter_description>
</parameter>
<parameter name="error_message_format">
<parameter_description> The D-Bus error message in a printf() format.
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> Arguments for @error_message_format.
</parameter_description>
</parameter>
</parameters>
<return> A #GDBusMessage. Free with g_object_unref().

</return>
</function>

<function name="g_dbus_message_new_method_reply">
<description>
Creates a new #GDBusMessage that is a reply to @method_call_message.

Since: 2.26

</description>
<parameters>
<parameter name="method_call_message">
<parameter_description> A message of type %G_DBUS_MESSAGE_TYPE_METHOD_CALL to
create a reply message to.
</parameter_description>
</parameter>
</parameters>
<return>  #GDBusMessage. Free with g_object_unref().

</return>
</function>

<function name="g_dbus_message_new_signal">
<description>
Creates a new #GDBusMessage for a signal emission.

Since: 2.26

</description>
<parameters>
<parameter name="path">
<parameter_description> A valid object path.
</parameter_description>
</parameter>
<parameter name="interface_">
<parameter_description> A valid D-Bus interface name.
</parameter_description>
</parameter>
<parameter name="signal">
<parameter_description> A valid signal name.
</parameter_description>
</parameter>
</parameters>
<return> A #GDBusMessage. Free with g_object_unref().

</return>
</function>

<function name="g_dbus_message_print">
<description>
Produces a human-readable multi-line description of @message.

The contents of the description has no ABI guarantees, the contents
and formatting is subject to change at any time. Typical output
looks something like this:
&lt;programlisting&gt;
Type:    method-call
Flags:   none
Version: 0
Serial:  4
Headers:
path -&gt; objectpath '/org/gtk/GDBus/TestObject'
interface -&gt; 'org.gtk.GDBus.TestInterface'
member -&gt; 'GimmeStdout'
destination -&gt; ':1.146'
Body: ()
UNIX File Descriptors:
(none)
&lt;/programlisting&gt;
or
&lt;programlisting&gt;
Type:    method-return
Flags:   no-reply-expected
Version: 0
Serial:  477
Headers:
reply-serial -&gt; uint32 4
destination -&gt; ':1.159'
sender -&gt; ':1.146'
num-unix-fds -&gt; uint32 1
Body: ()
UNIX File Descriptors:
fd 12: dev=0:10,mode=020620,ino=5,uid=500,gid=5,rdev=136:2,size=0,atime=1273085037,mtime=1273085851,ctime=1272982635
&lt;/programlisting&gt;

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
<parameter name="indent">
<parameter_description> Indentation level.
</parameter_description>
</parameter>
</parameters>
<return> A string that should be freed with g_free().

</return>
</function>

<function name="g_dbus_message_set_body">
<description>
Sets the body @message. As a side-effect the
%G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE header field is set to the
type string of @body (or cleared if @body is %NULL).

If @body is floating, @message assumes ownership of @body.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
<parameter name="body">
<parameter_description> Either %NULL or a #GVariant that is a tuple.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_message_set_byte_order">
<description>
Sets the byte order of @message.

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
<parameter name="byte_order">
<parameter_description> The byte order.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_message_set_destination">
<description>
Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION header field.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> The value to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_message_set_error_name">
<description>
Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME header field.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> The value to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_message_set_flags">
<description>
Sets the flags to set on @message.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> Flags for @message that are set (typically values from the #GDBusMessageFlags
enumeration bitwise ORed together).
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_message_set_header">
<description>
Sets a header field on @message.

If @value is floating, @message assumes ownership of @value.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
<parameter name="header_field">
<parameter_description> A 8-bit unsigned integer (typically a value from the #GDBusMessageHeaderField enumeration)
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> A #GVariant to set the header field or %NULL to clear the header field.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_message_set_interface">
<description>
Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE header field.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> The value to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_message_set_member">
<description>
Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_MEMBER header field.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> The value to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_message_set_message_type">
<description>
Sets @message to be of @type.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> A 8-bit unsigned integer (typically a value from the #GDBusMessageType enumeration).
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_message_set_num_unix_fds">
<description>
Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS header field.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> The value to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_message_set_path">
<description>
Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_PATH header field.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> The value to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_message_set_reply_serial">
<description>
Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL header field.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> The value to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_message_set_sender">
<description>
Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_SENDER header field.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> The value to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_message_set_serial">
<description>
Sets the serial for @message.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
<parameter name="serial">
<parameter_description> A #guint32.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_message_set_signature">
<description>
Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE header field.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> The value to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_message_set_unix_fd_list">
<description>
Sets the UNIX file descriptors associated with @message. As a
side-effect the %G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS header
field is set to the number of fds in @fd_list (or cleared if
@fd_list is %NULL).

This method is only available on UNIX.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
<parameter name="fd_list">
<parameter_description> A #GUnixFDList or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_message_to_blob">
<description>
Serializes @message to a blob. The byte order returned by
g_dbus_message_get_byte_order() will be used.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
<parameter name="out_size">
<parameter_description> Return location for size of generated blob.
</parameter_description>
</parameter>
<parameter name="capabilities">
<parameter_description> A #GDBusCapabilityFlags describing what protocol features are supported.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error.
</parameter_description>
</parameter>
</parameters>
<return> A pointer to a valid binary D-Bus message of @out_size bytes
generated by @message or %NULL if @error is set. Free with g_free().

</return>
</function>

<function name="g_dbus_message_to_gerror">
<description>
If @message is not of type %G_DBUS_MESSAGE_TYPE_ERROR does
nothing and returns %FALSE.

Otherwise this method encodes the error in @message as a #GError
using g_dbus_error_set_dbus_error() using the information in the
%G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME header field of @message as
well as the first string item in @message's body.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GDBusMessage.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> The #GError to set.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @error was set, %FALSE otherwise.

</return>
</function>

<function name="g_dbus_method_info_ref">
<description>
If @info is statically allocated does nothing. Otherwise increases
the reference count.

Since: 2.26

</description>
<parameters>
<parameter name="info">
<parameter_description> A #GDBusMethodInfo
</parameter_description>
</parameter>
</parameters>
<return> The same @info.

</return>
</function>

<function name="g_dbus_method_info_unref">
<description>
If @info is statically allocated, does nothing. Otherwise decreases
the reference count of @info. When its reference count drops to 0,
the memory used is freed.

Since: 2.26

</description>
<parameters>
<parameter name="info">
<parameter_description> A #GDBusMethodInfo.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_method_invocation_get_connection">
<description>
Gets the #GDBusConnection the method was invoked on.

Since: 2.26

</description>
<parameters>
<parameter name="invocation">
<parameter_description> A #GDBusMethodInvocation.
</parameter_description>
</parameter>
</parameters>
<return>A #GDBusConnection. Do not free, it is owned by @invocation.

</return>
</function>

<function name="g_dbus_method_invocation_get_interface_name">
<description>
Gets the name of the D-Bus interface the method was invoked on.

Since: 2.26

</description>
<parameters>
<parameter name="invocation">
<parameter_description> A #GDBusMethodInvocation.
</parameter_description>
</parameter>
</parameters>
<return> A string. Do not free, it is owned by @invocation.

</return>
</function>

<function name="g_dbus_method_invocation_get_message">
<description>
Gets the #GDBusMessage for the method invocation. This is useful if
you need to use low-level protocol features, such as UNIX file
descriptor passing, that cannot be properly expressed in the
#GVariant API.

See &lt;xref linkend=&quot;gdbus-server&quot;/&gt; and &lt;xref
linkend=&quot;gdbus-unix-fd-client&quot;/&gt; for an example of how to use this
low-level API to send and receive UNIX file descriptors.

Since: 2.26

</description>
<parameters>
<parameter name="invocation">
<parameter_description> A #GDBusMethodInvocation.
</parameter_description>
</parameter>
</parameters>
<return> #GDBusMessage. Do not free, it is owned by @invocation.

</return>
</function>

<function name="g_dbus_method_invocation_get_method_info">
<description>
Gets information about the method call, if any.

Since: 2.26

</description>
<parameters>
<parameter name="invocation">
<parameter_description> A #GDBusMethodInvocation.
</parameter_description>
</parameter>
</parameters>
<return> A #GDBusMethodInfo or %NULL. Do not free, it is owned by @invocation.

</return>
</function>

<function name="g_dbus_method_invocation_get_method_name">
<description>
Gets the name of the method that was invoked.

Since: 2.26

</description>
<parameters>
<parameter name="invocation">
<parameter_description> A #GDBusMethodInvocation.
</parameter_description>
</parameter>
</parameters>
<return> A string. Do not free, it is owned by @invocation.

</return>
</function>

<function name="g_dbus_method_invocation_get_object_path">
<description>
Gets the object path the method was invoked on.

Since: 2.26

</description>
<parameters>
<parameter name="invocation">
<parameter_description> A #GDBusMethodInvocation.
</parameter_description>
</parameter>
</parameters>
<return> A string. Do not free, it is owned by @invocation.

</return>
</function>

<function name="g_dbus_method_invocation_get_parameters">
<description>
Gets the parameters of the method invocation.

Since: 2.26

</description>
<parameters>
<parameter name="invocation">
<parameter_description> A #GDBusMethodInvocation.
</parameter_description>
</parameter>
</parameters>
<return> A #GVariant. Do not free, it is owned by @invocation.

</return>
</function>

<function name="g_dbus_method_invocation_get_sender">
<description>
Gets the bus name that invoked the method.

Since: 2.26

</description>
<parameters>
<parameter name="invocation">
<parameter_description> A #GDBusMethodInvocation.
</parameter_description>
</parameter>
</parameters>
<return> A string. Do not free, it is owned by @invocation.

</return>
</function>

<function name="g_dbus_method_invocation_get_user_data">
<description>
Gets the @user_data #gpointer passed to g_dbus_connection_register_object().

Since: 2.26

</description>
<parameters>
<parameter name="invocation">
<parameter_description> A #GDBusMethodInvocation.
</parameter_description>
</parameter>
</parameters>
<return> A #gpointer.

</return>
</function>

<function name="g_dbus_method_invocation_return_dbus_error">
<description>
Finishes handling a D-Bus method call by returning an error.

This method will free @invocation, you cannot use it afterwards.

Since: 2.26

</description>
<parameters>
<parameter name="invocation">
<parameter_description> A #GDBusMethodInvocation.
</parameter_description>
</parameter>
<parameter name="error_name">
<parameter_description> A valid D-Bus error name.
</parameter_description>
</parameter>
<parameter name="error_message">
<parameter_description> A valid D-Bus error message.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_method_invocation_return_error">
<description>
Finishes handling a D-Bus method call by returning an error.

See g_dbus_error_encode_gerror() for details about what error name
will be returned on the wire. In a nutshell, if the given error is
registered using g_dbus_error_register_error() the name given
during registration is used. Otherwise, a name of the form
&lt;literal&gt;org.gtk.GDBus.UnmappedGError.Quark...&lt;/literal&gt; is
used. This provides transparent mapping of #GError between
applications using GDBus.

If you are writing an application intended to be portable,
&lt;emphasis&gt;always&lt;/emphasis&gt; register errors with g_dbus_error_register_error()
or use g_dbus_method_invocation_return_dbus_error().

This method will free @invocation, you cannot use it afterwards.

Since: 2.26

</description>
<parameters>
<parameter name="invocation">
<parameter_description> A #GDBusMethodInvocation.
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> A #GQuark for the #GError error domain.
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> The error code.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> printf()-style format.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> Parameters for @format.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_method_invocation_return_error_literal">
<description>
Like g_dbus_method_invocation_return_error() but without printf()-style formatting.

This method will free @invocation, you cannot use it afterwards.

Since: 2.26

</description>
<parameters>
<parameter name="invocation">
<parameter_description> A #GDBusMethodInvocation.
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> A #GQuark for the #GError error domain.
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> The error code.
</parameter_description>
</parameter>
<parameter name="message">
<parameter_description> The error message.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_method_invocation_return_error_valist">
<description>
Like g_dbus_method_invocation_return_error() but intended for
language bindings.

This method will free @invocation, you cannot use it afterwards.

Since: 2.26

</description>
<parameters>
<parameter name="invocation">
<parameter_description> A #GDBusMethodInvocation.
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> A #GQuark for the #GError error domain.
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> The error code.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> printf()-style format.
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> #va_list of parameters for @format.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_method_invocation_return_gerror">
<description>
Like g_dbus_method_invocation_return_error() but takes a #GError
instead of the error domain, error code and message.

This method will free @invocation, you cannot use it afterwards.

Since: 2.26

</description>
<parameters>
<parameter name="invocation">
<parameter_description> A #GDBusMethodInvocation.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> A #GError.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_method_invocation_return_value">
<description>
Finishes handling a D-Bus method call by returning @parameters.
If the @parameters GVariant is floating, it is consumed.

It is an error if @parameters is not of the right format.

This method will free @invocation, you cannot use it afterwards.

Since: 2.26

</description>
<parameters>
<parameter name="invocation">
<parameter_description> A #GDBusMethodInvocation.
</parameter_description>
</parameter>
<parameter name="parameters">
<parameter_description> A #GVariant tuple with out parameters for the method or %NULL if not passing any parameters.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_node_info_generate_xml">
<description>
Appends an XML representation of @info (and its children) to @string_builder.

This function is typically used for generating introspection XML documents at run-time for
handling the &lt;literal&gt;org.freedesktop.DBus.Introspectable.Introspect&lt;/literal&gt; method.

Since: 2.26

</description>
<parameters>
<parameter name="info">
<parameter_description> A #GDBusNodeInfo.
</parameter_description>
</parameter>
<parameter name="indent">
<parameter_description> Indentation level.
</parameter_description>
</parameter>
<parameter name="string_builder">
<parameter_description> A #GString to to append XML data to.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_node_info_lookup_interface">
<description>
Looks up information about an interface.

This cost of this function is O(n) in number of interfaces.

Since: 2.26

</description>
<parameters>
<parameter name="info">
<parameter_description> A #GDBusNodeInfo.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> A D-Bus interface name.
</parameter_description>
</parameter>
</parameters>
<return> A #GDBusInterfaceInfo or %NULL if not found. Do not free, it is owned by @info.

</return>
</function>

<function name="g_dbus_node_info_new_for_xml">
<description>
Parses @xml_data and returns a #GDBusNodeInfo representing the data.

Since: 2.26

</description>
<parameters>
<parameter name="xml_data">
<parameter_description> Valid D-Bus introspection XML.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error.
</parameter_description>
</parameter>
</parameters>
<return> A #GDBusNodeInfo structure or %NULL if @error is set. Free
with g_dbus_node_info_unref().

</return>
</function>

<function name="g_dbus_node_info_ref">
<description>
If @info is statically allocated does nothing. Otherwise increases
the reference count.

Since: 2.26

</description>
<parameters>
<parameter name="info">
<parameter_description> A #GDBusNodeInfo
</parameter_description>
</parameter>
</parameters>
<return> The same @info.

</return>
</function>

<function name="g_dbus_node_info_unref">
<description>
If @info is statically allocated, does nothing. Otherwise decreases
the reference count of @info. When its reference count drops to 0,
the memory used is freed.

Since: 2.26

</description>
<parameters>
<parameter name="info">
<parameter_description> A #GDBusNodeInfo.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_property_info_ref">
<description>
If @info is statically allocated does nothing. Otherwise increases
the reference count.

Since: 2.26

</description>
<parameters>
<parameter name="info">
<parameter_description> A #GDBusPropertyInfo
</parameter_description>
</parameter>
</parameters>
<return> The same @info.

</return>
</function>

<function name="g_dbus_property_info_unref">
<description>
If @info is statically allocated, does nothing. Otherwise decreases
the reference count of @info. When its reference count drops to 0,
the memory used is freed.

Since: 2.26

</description>
<parameters>
<parameter name="info">
<parameter_description> A #GDBusPropertyInfo.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_proxy_call">
<description>
Asynchronously invokes the @method_name method on @proxy.

If @method_name contains any dots, then @name is split into interface and
method name parts. This allows using @proxy for invoking methods on
other interfaces.

If the #GDBusConnection associated with @proxy is closed then
the operation will fail with %G_IO_ERROR_CLOSED. If
@cancellable is canceled, the operation will fail with
%G_IO_ERROR_CANCELLED. If @parameters contains a value not
compatible with the D-Bus protocol, the operation fails with
%G_IO_ERROR_INVALID_ARGUMENT.

If the @parameters #GVariant is floating, it is consumed. This allows
convenient 'inline' use of g_variant_new(), e.g.:
|[
g_dbus_proxy_call (proxy,
&quot;TwoStrings&quot;,
g_variant_new (&quot;(ss)&quot;,
&quot;Thing One&quot;,
&quot;Thing Two&quot;),
G_DBUS_CALL_FLAGS_NONE,
-1,
NULL,
(GAsyncReadyCallback) two_strings_done,
&amp;data);
]|

This is an asynchronous method. When the operation is finished,
@callback will be invoked in the
&lt;link linkend=&quot;g-main-context-push-thread-default&quot;&gt;thread-default
main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call g_dbus_proxy_call_finish() to get the result of
the operation. See g_dbus_proxy_call_sync() for the synchronous
version of this method.

Since: 2.26

</description>
<parameters>
<parameter name="proxy">
<parameter_description> A #GDBusProxy.
</parameter_description>
</parameter>
<parameter name="method_name">
<parameter_description> Name of method to invoke.
</parameter_description>
</parameter>
<parameter name="parameters">
<parameter_description> A #GVariant tuple with parameters for the signal or %NULL if not passing parameters.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> Flags from the #GDBusCallFlags enumeration.
</parameter_description>
</parameter>
<parameter name="timeout_msec">
<parameter_description> The timeout in milliseconds (with %G_MAXINT meaning
&quot;infinite&quot;) or -1 to use the proxy default timeout.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> A #GCancellable or %NULL.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't
care about the result of the method invocation.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> The data to pass to @callback.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_proxy_call_finish">
<description>
Finishes an operation started with g_dbus_proxy_call().

Since: 2.26

</description>
<parameters>
<parameter name="proxy">
<parameter_description> A #GDBusProxy.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> A #GAsyncResult obtained from the #GAsyncReadyCallback passed to g_dbus_proxy_call().
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> %NULL if @error is set. Otherwise a #GVariant tuple with
return values. Free with g_variant_unref().

</return>
</function>

<function name="g_dbus_proxy_call_sync">
<description>
Synchronously invokes the @method_name method on @proxy.

If @method_name contains any dots, then @name is split into interface and
method name parts. This allows using @proxy for invoking methods on
other interfaces.

If the #GDBusConnection associated with @proxy is disconnected then
the operation will fail with %G_IO_ERROR_CLOSED. If
@cancellable is canceled, the operation will fail with
%G_IO_ERROR_CANCELLED. If @parameters contains a value not
compatible with the D-Bus protocol, the operation fails with
%G_IO_ERROR_INVALID_ARGUMENT.

If the @parameters #GVariant is floating, it is consumed. This allows
convenient 'inline' use of g_variant_new(), e.g.:
|[
g_dbus_proxy_call_sync (proxy,
&quot;TwoStrings&quot;,
g_variant_new (&quot;(ss)&quot;,
&quot;Thing One&quot;,
&quot;Thing Two&quot;),
G_DBUS_CALL_FLAGS_NONE,
-1,
NULL,
&amp;error);
]|

The calling thread is blocked until a reply is received. See
g_dbus_proxy_call() for the asynchronous version of this
method.

Since: 2.26

</description>
<parameters>
<parameter name="proxy">
<parameter_description> A #GDBusProxy.
</parameter_description>
</parameter>
<parameter name="method_name">
<parameter_description> Name of method to invoke.
</parameter_description>
</parameter>
<parameter name="parameters">
<parameter_description> A #GVariant tuple with parameters for the signal or %NULL if not passing parameters.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> Flags from the #GDBusCallFlags enumeration.
</parameter_description>
</parameter>
<parameter name="timeout_msec">
<parameter_description> The timeout in milliseconds (with %G_MAXINT meaning
&quot;infinite&quot;) or -1 to use the proxy default timeout.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> A #GCancellable or %NULL.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> %NULL if @error is set. Otherwise a #GVariant tuple with
return values. Free with g_variant_unref().

</return>
</function>

<function name="g_dbus_proxy_get_cached_property">
<description>
Looks up the value for a property from the cache. This call does no
blocking IO.

If @proxy has an expected interface (see
#GDBusProxy:g-interface-info), then @property_name (for existence)
is checked against it.

Since: 2.26

</description>
<parameters>
<parameter name="proxy">
<parameter_description> A #GDBusProxy.
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> Property name.
</parameter_description>
</parameter>
</parameters>
<return> A reference to the #GVariant instance that holds the value
for @property_name or %NULL if the value is not in the cache. The
returned reference must be freed with g_variant_unref().

</return>
</function>

<function name="g_dbus_proxy_get_cached_property_names">
<description>
Gets the names of all cached properties on @proxy.

Since: 2.26

</description>
<parameters>
<parameter name="proxy">
<parameter_description> A #GDBusProxy.
</parameter_description>
</parameter>
</parameters>
<return> A %NULL-terminated array of strings or %NULL if @proxy has
no cached properties. Free the returned array with g_strfreev().

</return>
</function>

<function name="g_dbus_proxy_get_connection">
<description>
Gets the connection @proxy is for.

Since: 2.26

</description>
<parameters>
<parameter name="proxy">
<parameter_description> A #GDBusProxy.
</parameter_description>
</parameter>
</parameters>
<return> A #GDBusConnection owned by @proxy. Do not free.

</return>
</function>

<function name="g_dbus_proxy_get_default_timeout">
<description>
Gets the timeout to use if -1 (specifying default timeout) is
passed as @timeout_msec in the g_dbus_proxy_call() and
g_dbus_proxy_call_sync() functions.

See the #GDBusProxy:g-default-timeout property for more details.

Since: 2.26

</description>
<parameters>
<parameter name="proxy">
<parameter_description> A #GDBusProxy.
</parameter_description>
</parameter>
</parameters>
<return> Timeout to use for @proxy.

</return>
</function>

<function name="g_dbus_proxy_get_flags">
<description>
Gets the flags that @proxy was constructed with.

Since: 2.26

</description>
<parameters>
<parameter name="proxy">
<parameter_description> A #GDBusProxy.
</parameter_description>
</parameter>
</parameters>
<return> Flags from the #GDBusProxyFlags enumeration.

</return>
</function>

<function name="g_dbus_proxy_get_interface_info">
<description>
Returns the #GDBusInterfaceInfo, if any, specifying the minimal
interface that @proxy conforms to.

See the #GDBusProxy:g-interface-info property for more details.

Since: 2.26

</description>
<parameters>
<parameter name="proxy">
<parameter_description> A #GDBusProxy
</parameter_description>
</parameter>
</parameters>
<return> A #GDBusInterfaceInfo or %NULL. Do not unref the returned
object, it is owned by @proxy.

</return>
</function>

<function name="g_dbus_proxy_get_interface_name">
<description>
Gets the D-Bus interface name @proxy is for.

Since: 2.26

</description>
<parameters>
<parameter name="proxy">
<parameter_description> A #GDBusProxy.
</parameter_description>
</parameter>
</parameters>
<return> A string owned by @proxy. Do not free.

</return>
</function>

<function name="g_dbus_proxy_get_name">
<description>
Gets the name that @proxy was constructed for.

Since: 2.26

</description>
<parameters>
<parameter name="proxy">
<parameter_description> A #GDBusProxy.
</parameter_description>
</parameter>
</parameters>
<return> A string owned by @proxy. Do not free.

</return>
</function>

<function name="g_dbus_proxy_get_name_owner">
<description>
The unique name that owns the name that @proxy is for or %NULL if
no-one currently owns that name. You may connect to the
#GObject::notify signal to track changes to the
#GDBusProxy:g-name-owner property.

Since: 2.26

</description>
<parameters>
<parameter name="proxy">
<parameter_description> A #GDBusProxy.
</parameter_description>
</parameter>
</parameters>
<return> The name owner or %NULL if no name owner exists. Free with g_free().

</return>
</function>

<function name="g_dbus_proxy_get_object_path">
<description>
Gets the object path @proxy is for.

Since: 2.26

</description>
<parameters>
<parameter name="proxy">
<parameter_description> A #GDBusProxy.
</parameter_description>
</parameter>
</parameters>
<return> A string owned by @proxy. Do not free.

</return>
</function>

<function name="g_dbus_proxy_new">
<description>
Creates a proxy for accessing @interface_name on the remote object
at @object_path owned by @name at @connection and asynchronously
loads D-Bus properties unless the
%G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES flag is used. Connect to
the #GDBusProxy::g-properties-changed signal to get notified about
property changes.

If the %G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS flag is not set, also sets up
match rules for signals. Connect to the #GDBusProxy::g-signal signal
to handle signals from the remote object.

If @name is a well-known name and the
%G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START flag isn't set and no name
owner currently exists, the message bus will be requested to launch
a name owner for the name.

This is a failable asynchronous constructor - when the proxy is
ready, @callback will be invoked and you can use
g_dbus_proxy_new_finish() to get the result.

See g_dbus_proxy_new_sync() and for a synchronous version of this constructor.

See &lt;xref linkend=&quot;gdbus-wellknown-proxy&quot;/&gt; for an example of how #GDBusProxy can be used.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> Flags used when constructing the proxy.
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> A #GDBusInterfaceInfo specifying the minimal interface that @proxy conforms to or %NULL.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
</parameter_description>
</parameter>
<parameter name="object_path">
<parameter_description> An object path.
</parameter_description>
</parameter>
<parameter name="interface_name">
<parameter_description> A D-Bus interface name.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> A #GCancellable or %NULL.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> Callback function to invoke when the proxy is ready.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> User data to pass to @callback.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_proxy_new_finish">
<description>
Finishes creating a #GDBusProxy.

Since: 2.26

</description>
<parameters>
<parameter name="res">
<parameter_description> A #GAsyncResult obtained from the #GAsyncReadyCallback function passed to g_dbus_proxy_new().
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> A #GDBusProxy or %NULL if @error is set. Free with g_object_unref().

</return>
</function>

<function name="g_dbus_proxy_new_for_bus">
<description>
Like g_dbus_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

See &lt;xref linkend=&quot;gdbus-wellknown-proxy&quot;/&gt; for an example of how #GDBusProxy can be used.

Since: 2.26

</description>
<parameters>
<parameter name="bus_type">
<parameter_description> A #GBusType.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> Flags used when constructing the proxy.
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> A #GDBusInterfaceInfo specifying the minimal interface that @proxy conforms to or %NULL.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> A bus name (well-known or unique).
</parameter_description>
</parameter>
<parameter name="object_path">
<parameter_description> An object path.
</parameter_description>
</parameter>
<parameter name="interface_name">
<parameter_description> A D-Bus interface name.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> A #GCancellable or %NULL.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> Callback function to invoke when the proxy is ready.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> User data to pass to @callback.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_proxy_new_for_bus_finish">
<description>
Finishes creating a #GDBusProxy.

Since: 2.26

</description>
<parameters>
<parameter name="res">
<parameter_description> A #GAsyncResult obtained from the #GAsyncReadyCallback function passed to g_dbus_proxy_new_for_bus().
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> A #GDBusProxy or %NULL if @error is set. Free with g_object_unref().

</return>
</function>

<function name="g_dbus_proxy_new_for_bus_sync">
<description>
Like g_dbus_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

See &lt;xref linkend=&quot;gdbus-wellknown-proxy&quot;/&gt; for an example of how #GDBusProxy can be used.

Since: 2.26

</description>
<parameters>
<parameter name="bus_type">
<parameter_description> A #GBusType.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> Flags used when constructing the proxy.
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> A #GDBusInterfaceInfo specifying the minimal interface that @proxy conforms to or %NULL.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> A bus name (well-known or unique).
</parameter_description>
</parameter>
<parameter name="object_path">
<parameter_description> An object path.
</parameter_description>
</parameter>
<parameter name="interface_name">
<parameter_description> A D-Bus interface name.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> A #GCancellable or %NULL.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> A #GDBusProxy or %NULL if error is set. Free with g_object_unref().

</return>
</function>

<function name="g_dbus_proxy_new_sync">
<description>
Creates a proxy for accessing @interface_name on the remote object
at @object_path owned by @name at @connection and synchronously
loads D-Bus properties unless the
%G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES flag is used.

If the %G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS flag is not set, also sets up
match rules for signals. Connect to the #GDBusProxy::g-signal signal
to handle signals from the remote object.

If @name is a well-known name and the
%G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START flag isn't set and no name
owner currently exists, the message bus will be requested to launch
a name owner for the name.

This is a synchronous failable constructor. See g_dbus_proxy_new()
and g_dbus_proxy_new_finish() for the asynchronous version.

See &lt;xref linkend=&quot;gdbus-wellknown-proxy&quot;/&gt; for an example of how #GDBusProxy can be used.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GDBusConnection.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> Flags used when constructing the proxy.
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> A #GDBusInterfaceInfo specifying the minimal interface that @proxy conforms to or %NULL.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
</parameter_description>
</parameter>
<parameter name="object_path">
<parameter_description> An object path.
</parameter_description>
</parameter>
<parameter name="interface_name">
<parameter_description> A D-Bus interface name.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> A #GCancellable or %NULL.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> A #GDBusProxy or %NULL if error is set. Free with g_object_unref().

</return>
</function>

<function name="g_dbus_proxy_set_cached_property">
<description>
If @value is not %NULL, sets the cached value for the property with
name @property_name to the value in @value.

If @value is %NULL, then the cached value is removed from the
property cache.

If @proxy has an expected interface (see
#GDBusProxy:g-interface-info), then @property_name (for existence)
and @value (for the type) is checked against it.

If the @value #GVariant is floating, it is consumed. This allows
convenient 'inline' use of g_variant_new(), e.g.
|[
g_dbus_proxy_set_cached_property (proxy,
&quot;SomeProperty&quot;,
g_variant_new (&quot;(si)&quot;,
&quot;A String&quot;,
42));
]|

Normally you will not need to use this method since @proxy is
tracking changes using the
&lt;literal&gt;org.freedesktop.DBus.Properties.PropertiesChanged&lt;/literal&gt;
D-Bus signal. However, for performance reasons an object may decide
to not use this signal for some properties and instead use a
proprietary out-of-band mechanism to transmit changes.

As a concrete example, consider an object with a property
&lt;literal&gt;ChatroomParticipants&lt;/literal&gt; which is an array of
strings. Instead of transmitting the same (long) array every time
the property changes, it is more efficient to only transmit the
delta using e.g. signals &lt;literal&gt;ChatroomParticipantJoined(String
name)&lt;/literal&gt; and &lt;literal&gt;ChatroomParticipantParted(String
name)&lt;/literal&gt;.

Since: 2.26

</description>
<parameters>
<parameter name="proxy">
<parameter_description> A #GDBusProxy
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> Property name.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> Value for the property or %NULL to remove it from the cache.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_proxy_set_default_timeout">
<description>
Sets the timeout to use if -1 (specifying default timeout) is
passed as @timeout_msec in the g_dbus_proxy_call() and
g_dbus_proxy_call_sync() functions.

See the #GDBusProxy:g-default-timeout property for more details.

Since: 2.26

</description>
<parameters>
<parameter name="proxy">
<parameter_description> A #GDBusProxy.
</parameter_description>
</parameter>
<parameter name="timeout_msec">
<parameter_description> Timeout in milliseconds.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_proxy_set_interface_info">
<description>
Ensure that interactions with @proxy conform to the given
interface.  For example, when completing a method call, if the type
signature of the message isn't what's expected, the given #GError
is set.  Signals that have a type signature mismatch are simply
dropped.

See the #GDBusProxy:g-interface-info property for more details.

Since: 2.26

</description>
<parameters>
<parameter name="proxy">
<parameter_description> A #GDBusProxy
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> Minimum interface this proxy conforms to or %NULL to unset.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_server_get_client_address">
<description>
Gets a D-Bus address string that can be used by clients to connect
to @server.

Since: 2.26

</description>
<parameters>
<parameter name="server">
<parameter_description> A #GDBusServer.
</parameter_description>
</parameter>
</parameters>
<return> A D-Bus address string. Do not free, the string is owned
by @server.

</return>
</function>

<function name="g_dbus_server_get_flags">
<description>
Gets the flags for @server.

Since: 2.26

</description>
<parameters>
<parameter name="server">
<parameter_description> A #GDBusServer.
</parameter_description>
</parameter>
</parameters>
<return> A set of flags from the #GDBusServerFlags enumeration.

</return>
</function>

<function name="g_dbus_server_get_guid">
<description>
Gets the GUID for @server.

Since: 2.26

</description>
<parameters>
<parameter name="server">
<parameter_description> A #GDBusServer.
</parameter_description>
</parameter>
</parameters>
<return> A D-Bus GUID. Do not free this string, it is owned by @server.

</return>
</function>

<function name="g_dbus_server_is_active">
<description>
Gets whether @server is active.

Since: 2.26

</description>
<parameters>
<parameter name="server">
<parameter_description> A #GDBusServer.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if server is active, %FALSE otherwise.

</return>
</function>

<function name="g_dbus_server_new_sync">
<description>
Creates a new D-Bus server that listens on the first address in
@address that works.

Once constructed, you can use g_dbus_server_get_client_address() to
get a D-Bus address string that clients can use to connect.

Connect to the #GDBusServer::new-connection signal to handle
incoming connections.

The returned #GDBusServer isn't active - you have to start it with
g_dbus_server_start().

See &lt;xref linkend=&quot;gdbus-peer-to-peer&quot;/&gt; for how #GDBusServer can
be used.

This is a synchronous failable constructor. See
g_dbus_server_new() for the asynchronous version.

Since: 2.26

</description>
<parameters>
<parameter name="address">
<parameter_description> A D-Bus address.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> Flags from the #GDBusServerFlags enumeration.
</parameter_description>
</parameter>
<parameter name="guid">
<parameter_description> A D-Bus GUID.
</parameter_description>
</parameter>
<parameter name="observer">
<parameter_description> A #GDBusAuthObserver or %NULL.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> A #GCancellable or %NULL.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for server or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> A #GDBusServer or %NULL if @error is set. Free with
g_object_unref().

</return>
</function>

<function name="g_dbus_server_start">
<description>
Starts @server.

Since: 2.26

</description>
<parameters>
<parameter name="server">
<parameter_description> A #GDBusServer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_server_stop">
<description>
Stops @server.

Since: 2.26

</description>
<parameters>
<parameter name="server">
<parameter_description> A #GDBusServer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dbus_signal_info_ref">
<description>
If @info is statically allocated does nothing. Otherwise increases
the reference count.

Since: 2.26

</description>
<parameters>
<parameter name="info">
<parameter_description> A #GDBusSignalInfo
</parameter_description>
</parameter>
</parameters>
<return> The same @info.

</return>
</function>

<function name="g_dbus_signal_info_unref">
<description>
If @info is statically allocated, does nothing. Otherwise decreases
the reference count of @info. When its reference count drops to 0,
the memory used is freed.

Since: 2.26

</description>
<parameters>
<parameter name="info">
<parameter_description> A #GDBusSignalInfo.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_desktop_app_info_get_filename">
<description>
When @info was created from a known filename, return it.  In some
situations such as the #GDesktopAppInfo returned from
g_desktop_app_info_new_from_keyfile(), this function will return %NULL.

Since: 2.24

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GDesktopAppInfo
</parameter_description>
</parameter>
</parameters>
<return> The full path to the file for @info, or %NULL if not known.
</return>
</function>

<function name="g_desktop_app_info_get_is_hidden">
<description>
A desktop file is hidden if the Hidden key in it is
set to True.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GDesktopAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if hidden, %FALSE otherwise. 
</return>
</function>

<function name="g_desktop_app_info_launch_uris_as_manager">
<description>
This function performs the equivalent of g_app_info_launch_uris(),
but is intended primarily for operating system components that
launch applications.  Ordinary applications should use
g_app_info_launch_uris().

In contrast to g_app_info_launch_uris(), all processes created will
always be run directly as children as if by the UNIX fork()/exec()
calls.

This guarantee allows additional control over the exact environment
of the child processes, which is provided via a setup function
@setup, as well as the process identifier of each child process via
@pid_callback.  See g_spawn_async() for more information about the
semantics of the @setup function.

</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GDesktopAppInfo
</parameter_description>
</parameter>
<parameter name="uris">
<parameter_description> List of URIs
</parameter_description>
</parameter>
<parameter name="launch_context">
<parameter_description> a #GAppLaunchContext
</parameter_description>
</parameter>
<parameter name="spawn_flags">
<parameter_description> #GSpawnFlags, used for each process
</parameter_description>
</parameter>
<parameter name="user_setup">
<parameter_description> a #GSpawnChildSetupFunc, used once for
each process.
</parameter_description>
</parameter>
<parameter name="user_setup_data">
<parameter_description> User data for @user_setup
</parameter_description>
</parameter>
<parameter name="pid_callback">
<parameter_description> Callback for child processes
</parameter_description>
</parameter>
<parameter name="pid_callback_data">
<parameter_description> User data for @callback
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_desktop_app_info_lookup_get_default_for_uri_scheme">
<description>
Gets the default application for launching applications 
using this URI scheme for a particular GDesktopAppInfoLookup
implementation.

The GDesktopAppInfoLookup interface and this function is used
to implement g_app_info_get_default_for_uri_scheme() backends
in a GIO module. There is no reason for applications to use it
directly. Applications should use g_app_info_get_default_for_uri_scheme().

Deprecated: The #GDesktopAppInfoLookup interface is deprecated and unused by gio.

</description>
<parameters>
<parameter name="lookup">
<parameter_description> a #GDesktopAppInfoLookup
</parameter_description>
</parameter>
<parameter name="uri_scheme">
<parameter_description> a string containing a URI scheme.
</parameter_description>
</parameter>
</parameters>
<return> #GAppInfo for given @uri_scheme or %NULL on error.

</return>
</function>

<function name="g_desktop_app_info_new">
<description>
Creates a new #GDesktopAppInfo based on a desktop file id. 

A desktop file id is the basename of the desktop file, including the 
.desktop extension. GIO is looking for a desktop file with this name 
in the &lt;filename&gt;applications&lt;/filename&gt; subdirectories of the XDG data
directories (i.e. the directories specified in the 
&lt;envar&gt;XDG_DATA_HOME&lt;/envar&gt; and &lt;envar&gt;XDG_DATA_DIRS&lt;/envar&gt; environment 
variables). GIO also supports the prefix-to-subdirectory mapping that is
described in the &lt;ulink url=&quot;http://standards.freedesktop.org/menu-spec/latest/&quot;&gt;Menu Spec&lt;/ulink&gt; 
(i.e. a desktop id of kde-foo.desktop will match
&lt;filename&gt;/usr/share/applications/kde/foo.desktop&lt;/filename&gt;).


</description>
<parameters>
<parameter name="desktop_id">
<parameter_description> the desktop file id
</parameter_description>
</parameter>
</parameters>
<return> a new #GDesktopAppInfo, or %NULL if no desktop file with that id
</return>
</function>

<function name="g_desktop_app_info_new_from_filename">
<description>
Creates a new #GDesktopAppInfo.


</description>
<parameters>
<parameter name="filename">
<parameter_description> the path of a desktop file, in the GLib filename encoding
</parameter_description>
</parameter>
</parameters>
<return> a new #GDesktopAppInfo or %NULL on error.
</return>
</function>

<function name="g_desktop_app_info_new_from_keyfile">
<description>
Creates a new #GDesktopAppInfo.

Since: 2.18

</description>
<parameters>
<parameter name="key_file">
<parameter_description> an opened #GKeyFile
</parameter_description>
</parameter>
</parameters>
<return> a new #GDesktopAppInfo or %NULL on error.

</return>
</function>

<function name="g_desktop_app_info_set_desktop_env">
<description>
Sets the name of the desktop that the application is running in.
This is used by g_app_info_should_show() to evaluate the
&lt;literal&gt;OnlyShowIn&lt;/literal&gt; and &lt;literal&gt;NotShowIn&lt;/literal&gt;
desktop entry fields.

The &lt;ulink url=&quot;http://standards.freedesktop.org/menu-spec/latest/&quot;&gt;Desktop 
Menu specification&lt;/ulink&gt; recognizes the following:
&lt;simplelist&gt;
&lt;member&gt;GNOME&lt;/member&gt;
&lt;member&gt;KDE&lt;/member&gt;
&lt;member&gt;ROX&lt;/member&gt;
&lt;member&gt;XFCE&lt;/member&gt;
&lt;member&gt;Old&lt;/member&gt; 
&lt;/simplelist&gt;

Should be called only once; subsequent calls are ignored.

</description>
<parameters>
<parameter name="desktop_env">
<parameter_description> a string specifying what desktop this is
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_drive_can_eject">
<description>
Checks if a drive can be ejected.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @drive can be ejected, %FALSE otherwise.
</return>
</function>

<function name="g_drive_can_poll_for_media">
<description>
Checks if a drive can be polled for media changes.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @drive can be polled for media changes,
%FALSE otherwise.
</return>
</function>

<function name="g_drive_can_start">
<description>
Checks if a drive can be started.

Since: 2.22

</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @drive can be started, %FALSE otherwise.

</return>
</function>

<function name="g_drive_can_start_degraded">
<description>
Checks if a drive can be started degraded.

Since: 2.22

</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @drive can be started degraded, %FALSE otherwise.

</return>
</function>

<function name="g_drive_can_stop">
<description>
Checks if a drive can be stopped.

Since: 2.22

</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @drive can be stopped, %FALSE otherwise.

</return>
</function>

<function name="g_drive_eject">
<description>
Asynchronously ejects a drive.

When the operation is finished, @callback will be called.
You can then call g_drive_eject_finish() to obtain the
result of the operation.

Deprecated: 2.22: Use g_drive_eject_with_operation() instead.

</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the unmount if required for eject
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to @callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_drive_eject_finish">
<description>
Finishes ejecting a drive.

Deprecated: 2.22: Use g_drive_eject_with_operation_finish() instead.

</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the drive has been ejected successfully,
%FALSE otherwise.

</return>
</function>

<function name="g_drive_eject_with_operation">
<description>
Ejects a drive. This is an asynchronous operation, and is
finished by calling g_drive_eject_with_operation_finish() with the @drive
and #GAsyncResult data returned in the @callback.

Since: 2.22

</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the unmount if required for eject
</parameter_description>
</parameter>
<parameter name="mount_operation">
<parameter_description> a #GMountOperation or %NULL to avoid
user interaction.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_drive_eject_with_operation_finish">
<description>
Finishes ejecting a drive. If any errors occurred during the operation,
@error will be set to contain the errors and %FALSE will be returned.

Since: 2.22

</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the drive was successfully ejected. %FALSE otherwise.

</return>
</function>

<function name="g_drive_enumerate_identifiers">
<description>
Gets the kinds of identifiers that @drive has. 
Use g_drive_get_identifer() to obtain the identifiers
themselves.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive
</parameter_description>
</parameter>
</parameters>
<return> a %NULL-terminated
array of strings containing kinds of identifiers. Use g_strfreev()
to free.
</return>
</function>

<function name="g_drive_get_icon">
<description>
Gets the icon for @drive.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
</parameters>
<return> #GIcon for the @drive.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_drive_get_identifier">
<description>
Gets the identifier of the given kind for @drive.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive
</parameter_description>
</parameter>
<parameter name="kind">
<parameter_description> the kind of identifier to return
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string containing the
requested identfier, or %NULL if the #GDrive
doesn't have this kind of identifier.
</return>
</function>

<function name="g_drive_get_name">
<description>
Gets the name of @drive.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
</parameters>
<return> a string containing @drive's name. The returned 
string should be freed when no longer needed.
</return>
</function>

<function name="g_drive_get_start_stop_type">
<description>
Gets a hint about how a drive can be started/stopped.

Since: 2.22

</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
</parameters>
<return> A value from the #GDriveStartStopType enumeration.

</return>
</function>

<function name="g_drive_get_volumes">
<description>
Get a list of mountable volumes for @drive.

The returned list should be freed with g_list_free(), after
its elements have been unreffed with g_object_unref().


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
</parameters>
<return> #GList containing any #GVolume objects on the given @drive.
</return>
</function>

<function name="g_drive_has_media">
<description>
Checks if the @drive has media. Note that the OS may not be polling
the drive for media changes; see g_drive_is_media_check_automatic()
for more details.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @drive has media, %FALSE otherwise.
</return>
</function>

<function name="g_drive_has_volumes">
<description>
Check if @drive has any mountable volumes.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @drive contains volumes, %FALSE otherwise.
</return>
</function>

<function name="g_drive_is_media_check_automatic">
<description>
Checks if @drive is capabable of automatically detecting media changes.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @drive is capabable of automatically detecting 
media changes, %FALSE otherwise.
</return>
</function>

<function name="g_drive_is_media_removable">
<description>
Checks if the @drive supports removable media.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @drive supports removable media, %FALSE otherwise.
</return>
</function>

<function name="g_drive_poll_for_media">
<description>
Asynchronously polls @drive to see if media has been inserted or removed.

When the operation is finished, @callback will be called.
You can then call g_drive_poll_for_media_finish() to obtain the
result of the operation.

</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to @callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_drive_poll_for_media_finish">
<description>
Finishes an operation started with g_drive_poll_for_media() on a drive.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the drive has been poll_for_mediaed successfully,
%FALSE otherwise.
</return>
</function>

<function name="g_drive_start">
<description>
Asynchronously starts a drive.

When the operation is finished, @callback will be called.
You can then call g_drive_start_finish() to obtain the
result of the operation.

Since: 2.22

</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the start operation.
</parameter_description>
</parameter>
<parameter name="mount_operation">
<parameter_description> a #GMountOperation or %NULL to avoid
user interaction.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to @callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_drive_start_finish">
<description>
Finishes starting a drive.

Since: 2.22

</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the drive has been started successfully,
%FALSE otherwise.

</return>
</function>

<function name="g_drive_stop">
<description>
Asynchronously stops a drive.

When the operation is finished, @callback will be called.
You can then call g_drive_stop_finish() to obtain the
result of the operation.

Since: 2.22

</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the unmount if required for stopping.
</parameter_description>
</parameter>
<parameter name="mount_operation">
<parameter_description> a #GMountOperation or %NULL to avoid
user interaction.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to @callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_drive_stop_finish">
<description>
Finishes stopping a drive.

Since: 2.22

</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the drive has been stopped successfully,
%FALSE otherwise.

</return>
</function>

<function name="g_emblem_get_icon">
<description>
Gives back the icon from @emblem.

Since: 2.18

</description>
<parameters>
<parameter name="emblem">
<parameter_description> a #GEmblem from which the icon should be extracted.
</parameter_description>
</parameter>
</parameters>
<return> a #GIcon. The returned object belongs to
the emblem and should not be modified or freed.

</return>
</function>

<function name="g_emblem_get_origin">
<description>
Gets the origin of the emblem.

Since: 2.18

</description>
<parameters>
<parameter name="emblem">
<parameter_description> a #GEmblem
</parameter_description>
</parameter>
</parameters>
<return> the origin of the emblem

</return>
</function>

<function name="g_emblem_new">
<description>
Creates a new emblem for @icon.

Since: 2.18

</description>
<parameters>
<parameter name="icon">
<parameter_description> a GIcon containing the icon.
</parameter_description>
</parameter>
</parameters>
<return> a new #GEmblem.

</return>
</function>

<function name="g_emblem_new_with_origin">
<description>
Creates a new emblem for @icon.

Since: 2.18

</description>
<parameters>
<parameter name="icon">
<parameter_description> a GIcon containing the icon.
</parameter_description>
</parameter>
<parameter name="origin">
<parameter_description> a GEmblemOrigin enum defining the emblem's origin
</parameter_description>
</parameter>
</parameters>
<return> a new #GEmblem.

</return>
</function>

<function name="g_emblemed_icon_add_emblem">
<description>
Adds @emblem to the #GList of #GEmblem &lt;!-- --&gt;s.

Since: 2.18

</description>
<parameters>
<parameter name="emblemed">
<parameter_description> a #GEmblemedIcon
</parameter_description>
</parameter>
<parameter name="emblem">
<parameter_description> a #GEmblem
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_emblemed_icon_clear_emblems">
<description>
Removes all the emblems from @icon.

Since: 2.28

</description>
<parameters>
<parameter name="emblemed">
<parameter_description> a #GEmblemedIcon
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_emblemed_icon_get_emblems">
<description>
Gets the list of emblems for the @icon.

Since: 2.18

</description>
<parameters>
<parameter name="emblemed">
<parameter_description> a #GEmblemedIcon
</parameter_description>
</parameter>
</parameters>
<return> a #GList of
#GEmblem &lt;!-- --&gt;s that is owned by @emblemed

</return>
</function>

<function name="g_emblemed_icon_get_icon">
<description>
Gets the main icon for @emblemed.

Since: 2.18

</description>
<parameters>
<parameter name="emblemed">
<parameter_description> a #GEmblemedIcon
</parameter_description>
</parameter>
</parameters>
<return> a #GIcon that is owned by @emblemed

</return>
</function>

<function name="g_emblemed_icon_new">
<description>
Creates a new emblemed icon for @icon with the emblem @emblem.

Since: 2.18

</description>
<parameters>
<parameter name="icon">
<parameter_description> a #GIcon
</parameter_description>
</parameter>
<parameter name="emblem">
<parameter_description> a #GEmblem, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GIcon

</return>
</function>

<function name="g_file_append_to">
<description>
Gets an output stream for appending data to the file. If
the file doesn't already exist it is created.

By default files created are generally readable by everyone,
but if you pass #G_FILE_CREATE_PRIVATE in @flags the file
will be made readable only to the current user, to the level that
is supported on the target filesystem.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

Some file systems don't allow all file names, and may
return an %G_IO_ERROR_INVALID_FILENAME error.
If the file is a directory the %G_IO_ERROR_IS_DIRECTORY error will be
returned. Other errors are possible too, and depend on what kind of
filesystem the file is on.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCreateFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileOutputStream, or %NULL on error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_append_to_async">
<description>
Asynchronously opens @file for appending.

For more details, see g_file_append_to() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then call
g_file_append_to_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCreateFlags.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt; 
of the request. 
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_append_to_finish">
<description>
Finishes an asynchronous file append operation started with 
g_file_append_to_async(). 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> #GAsyncResult
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a valid #GFileOutputStream or %NULL on error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_attribute_info_list_add">
<description>
Adds a new attribute with @name to the @list, setting
its @type and @flags.

</description>
<parameters>
<parameter name="list">
<parameter_description> a #GFileAttributeInfoList.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the attribute to add.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the #GFileAttributeType for the attribute.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> #GFileAttributeInfoFlags for the attribute.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_attribute_info_list_dup">
<description>
Makes a duplicate of a file attribute info list.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GFileAttributeInfoList to duplicate.
</parameter_description>
</parameter>
</parameters>
<return> a copy of the given @list.
</return>
</function>

<function name="g_file_attribute_info_list_lookup">
<description>
Gets the file attribute with the name @name from @list.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GFileAttributeInfoList.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the attribute to lookup.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileAttributeInfo for the @name, or %NULL if an
attribute isn't found.
</return>
</function>

<function name="g_file_attribute_info_list_new">
<description>
Creates a new file attribute info list.


</description>
<parameters>
</parameters>
<return> a #GFileAttributeInfoList.
</return>
</function>

<function name="g_file_attribute_info_list_ref">
<description>
References a file attribute info list.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GFileAttributeInfoList to reference.
</parameter_description>
</parameter>
</parameters>
<return> #GFileAttributeInfoList or %NULL on error.
</return>
</function>

<function name="g_file_attribute_info_list_unref">
<description>
Removes a reference from the given @list. If the reference count
falls to zero, the @list is deleted.

</description>
<parameters>
<parameter name="list">
<parameter_description> The #GFileAttributeInfoList to unreference.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_attribute_matcher_enumerate_namespace">
<description>
Checks if the matcher will match all of the keys in a given namespace.
This will always return %TRUE if a wildcard character is in use (e.g. if
matcher was created with &quot;standard::*&quot; and @ns is &quot;standard&quot;, or if matcher was created
using &quot;*&quot; and namespace is anything.)

TODO: this is awkwardly worded.


</description>
<parameters>
<parameter name="matcher">
<parameter_description> a #GFileAttributeMatcher.
</parameter_description>
</parameter>
<parameter name="ns">
<parameter_description> a string containing a file attribute namespace.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the matcher matches all of the entries
in the given @ns, %FALSE otherwise.
</return>
</function>

<function name="g_file_attribute_matcher_enumerate_next">
<description>
Gets the next matched attribute from a #GFileAttributeMatcher.


</description>
<parameters>
<parameter name="matcher">
<parameter_description> a #GFileAttributeMatcher.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the next attribute or %NULL if
no more attribute exist.
</return>
</function>

<function name="g_file_attribute_matcher_matches">
<description>
Checks if an attribute will be matched by an attribute matcher. If
the matcher was created with the &quot;*&quot; matching string, this function
will always return %TRUE.


</description>
<parameters>
<parameter name="matcher">
<parameter_description> a #GFileAttributeMatcher.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @attribute matches @matcher. %FALSE otherwise.
</return>
</function>

<function name="g_file_attribute_matcher_matches_only">
<description>
Checks if a attribute matcher only matches a given attribute. Always
returns %FALSE if &quot;*&quot; was used when creating the matcher.


</description>
<parameters>
<parameter name="matcher">
<parameter_description> a #GFileAttributeMatcher.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the matcher only matches @attribute. %FALSE otherwise.
</return>
</function>

<function name="g_file_attribute_matcher_new">
<description>
Creates a new file attribute matcher, which matches attributes
against a given string. #GFileAttributeMatcher&lt;!-- --&gt;s are reference
counted structures, and are created with a reference count of 1. If
the number of references falls to 0, the #GFileAttributeMatcher is
automatically destroyed.

The @attribute string should be formatted with specific keys separated
from namespaces with a double colon. Several &quot;namespace::key&quot; strings may be
concatenated with a single comma (e.g. &quot;standard::type,standard::is-hidden&quot;).
The wildcard &quot;*&quot; may be used to match all keys and namespaces, or
&quot;namespace::*&quot; will match all keys in a given namespace.

Examples of strings to use:
&lt;table&gt;
&lt;title&gt;File Attribute Matcher strings and results&lt;/title&gt;
&lt;tgroup cols='2' align='left'&gt;&lt;thead&gt;
&lt;row&gt;&lt;entry&gt; Matcher String &lt;/entry&gt;&lt;entry&gt; Matches &lt;/entry&gt;&lt;/row&gt;&lt;/thead&gt;
&lt;tbody&gt;
&lt;row&gt;&lt;entry&gt;&quot;*&quot;&lt;/entry&gt;&lt;entry&gt;matches all attributes.&lt;/entry&gt;&lt;/row&gt;
&lt;row&gt;&lt;entry&gt;&quot;standard::is-hidden&quot;&lt;/entry&gt;&lt;entry&gt;matches only the key is-hidden in the standard namespace.&lt;/entry&gt;&lt;/row&gt;
&lt;row&gt;&lt;entry&gt;&quot;standard::type,unix::*&quot;&lt;/entry&gt;&lt;entry&gt;matches the type key in the standard namespace and
all keys in the unix namespace.&lt;/entry&gt;&lt;/row&gt;
&lt;/tbody&gt;&lt;/tgroup&gt;
&lt;/table&gt;


</description>
<parameters>
<parameter name="attributes">
<parameter_description> an attribute string to match.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileAttributeMatcher.
</return>
</function>

<function name="g_file_attribute_matcher_ref">
<description>
References a file attribute matcher.


</description>
<parameters>
<parameter name="matcher">
<parameter_description> a #GFileAttributeMatcher.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileAttributeMatcher.
</return>
</function>

<function name="g_file_attribute_matcher_unref">
<description>
Unreferences @matcher. If the reference count falls below 1,
the @matcher is automatically freed.


</description>
<parameters>
<parameter name="matcher">
<parameter_description> a #GFileAttributeMatcher.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_copy">
<description>
Copies the file @source to the location specified by @destination.
Can not handle recursive copies of directories.

If the flag #G_FILE_COPY_OVERWRITE is specified an already
existing @destination file is overwritten.

If the flag #G_FILE_COPY_NOFOLLOW_SYMLINKS is specified then symlinks
will be copied as symlinks, otherwise the target of the
@source symlink will be copied.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

If @progress_callback is not %NULL, then the operation can be monitored by
setting this to a #GFileProgressCallback function. @progress_callback_data
will be passed to this function. It is guaranteed that this callback will
be called after all data has been transferred with the total number of bytes
copied during the operation.

If the @source file does not exist then the G_IO_ERROR_NOT_FOUND
error is returned, independent on the status of the @destination.

If #G_FILE_COPY_OVERWRITE is not specified and the target exists, then the
error G_IO_ERROR_EXISTS is returned.

If trying to overwrite a file over a directory the G_IO_ERROR_IS_DIRECTORY
error is returned. If trying to overwrite a directory with a directory the
G_IO_ERROR_WOULD_MERGE error is returned.

If the source is a directory and the target does not exist, or #G_FILE_COPY_OVERWRITE is
specified and the target is a file, then the G_IO_ERROR_WOULD_RECURSE error
is returned.

If you are interested in copying the #GFile object itself (not the on-disk
file), see g_file_dup().


</description>
<parameters>
<parameter name="source">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="destination">
<parameter_description> destination #GFile
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> set of #GFileCopyFlags
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="progress_callback">
<parameter_description> function to callback with progress information
</parameter_description>
</parameter>
<parameter name="progress_callback_data">
<parameter_description> user data to pass to @progress_callback
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError to set on error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE otherwise.
</return>
</function>

<function name="g_file_copy_async">
<description>
Copies the file @source to the location specified by @destination 
asynchronously. For details of the behaviour, see g_file_copy().

If @progress_callback is not %NULL, then that function that will be called
just like in g_file_copy(), however the callback will run in the main loop,
not in the thread that is doing the I/O operation.

When the operation is finished, @callback will be called. You can then call
g_file_copy_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="source">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="destination">
<parameter_description> destination #GFile
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> set of #GFileCopyFlags
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt; 
of the request. 
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="progress_callback">
<parameter_description> function to callback with progress information
</parameter_description>
</parameter>
<parameter name="progress_callback_data">
<parameter_description> user data to pass to @progress_callback
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_copy_attributes">
<description>
Copies the file attributes from @source to @destination. 

Normally only a subset of the file attributes are copied,
those that are copies in a normal file copy operation
(which for instance does not include e.g. owner). However
if #G_FILE_COPY_ALL_METADATA is specified in @flags, then
all the metadata that is possible to copy is copied. This
is useful when implementing move by copy + delete source.


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GFile with attributes.
</parameter_description>
</parameter>
<parameter name="destination">
<parameter_description> a #GFile to copy attributes to.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCopyFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the attributes were copied successfully, %FALSE otherwise.
</return>
</function>

<function name="g_file_copy_finish">
<description>
Finishes copying the file started with 
g_file_copy_async().


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a %TRUE on success, %FALSE on error.
</return>
</function>

<function name="g_file_create">
<description>
Creates a new file and returns an output stream for writing to it.
The file must not already exist.

By default files created are generally readable by everyone,
but if you pass #G_FILE_CREATE_PRIVATE in @flags the file
will be made readable only to the current user, to the level that
is supported on the target filesystem.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

If a file or directory with this name already exists the G_IO_ERROR_EXISTS
error will be returned.
Some file systems don't allow all file names, and may
return an G_IO_ERROR_INVALID_FILENAME error, and if the name
is to long G_IO_ERROR_FILENAME_TOO_LONG will be returned.
Other errors are possible too, and depend on what kind of
filesystem the file is on.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCreateFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileOutputStream for the newly created file, or 
%NULL on error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_create_async">
<description>
Asynchronously creates a new file and returns an output stream for writing to it.
The file must not already exist.

For more details, see g_file_create() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then call
g_file_create_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCreateFlags.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt; 
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_create_finish">
<description>
Finishes an asynchronous file create operation started with 
g_file_create_async(). 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileOutputStream or %NULL on error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_create_readwrite">
<description>
Creates a new file and returns a stream for reading and writing to it.
The file must not already exist.

By default files created are generally readable by everyone,
but if you pass #G_FILE_CREATE_PRIVATE in @flags the file
will be made readable only to the current user, to the level that
is supported on the target filesystem.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.

If a file or directory with this name already exists the %G_IO_ERROR_EXISTS
error will be returned. Some file systems don't allow all file names,
and may return an %G_IO_ERROR_INVALID_FILENAME error, and if the name
is too long, %G_IO_ERROR_FILENAME_TOO_LONG will be returned. Other errors
are possible too, and depend on what kind of filesystem the file is on.

Note that in many non-local file cases read and write streams are not
supported, so make sure you really need to do read and write streaming,
rather than just opening for reading or writing.

Since: 2.22

</description>
<parameters>
<parameter name="file">
<parameter_description> a #GFile
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCreateFlags
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileIOStream for the newly created file, or %NULL on error.
Free the returned object with g_object_unref().

</return>
</function>

<function name="g_file_create_readwrite_async">
<description>
Asynchronously creates a new file and returns a stream for reading and
writing to it. The file must not already exist.

For more details, see g_file_create_readwrite() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then
call g_file_create_readwrite_finish() to get the result of the operation.

Since: 2.22

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCreateFlags
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt;
of the request
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_create_readwrite_finish">
<description>
Finishes an asynchronous file create operation started with
g_file_create_readwrite_async().

Since: 2.22

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileIOStream or %NULL on error.
Free the returned object with g_object_unref().

</return>
</function>

<function name="g_file_delete">
<description>
Deletes a file. If the @file is a directory, it will only be deleted if it 
is empty.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

Virtual: delete_file

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL 
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the file was deleted. %FALSE otherwise.
</return>
</function>

<function name="g_file_descriptor_based_get_fd">
<description>
Gets the underlying file descriptor.

Since: 2.24

</description>
<parameters>
<parameter name="fd_based">
<parameter_description> a #GFileDescriptorBased.
</parameter_description>
</parameter>
</parameters>
<return> The file descriptor

</return>
</function>

<function name="g_file_dup">
<description>
Duplicates a #GFile handle. This operation does not duplicate 
the actual file or directory represented by the #GFile; see 
g_file_copy() if attempting to copy a file. 

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
</parameters>
<return> a new #GFile that is a duplicate of the given #GFile. 
</return>
</function>

<function name="g_file_eject_mountable">
<description>
Starts an asynchronous eject on a mountable.  
When this operation has completed, @callback will be called with
@user_user data, and the operation can be finalized with 
g_file_eject_mountable_finish().

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

Deprecated: 2.22: Use g_file_eject_mountable_with_operation() instead.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the operation
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_eject_mountable_finish">
<description>
Finishes an asynchronous eject operation started by 
g_file_eject_mountable().

Deprecated: 2.22: Use g_file_eject_mountable_with_operation_finish() instead.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @file was ejected successfully. %FALSE 
otherwise.

</return>
</function>

<function name="g_file_eject_mountable_with_operation">
<description>
Starts an asynchronous eject on a mountable.
When this operation has completed, @callback will be called with
@user_user data, and the operation can be finalized with
g_file_eject_mountable_with_operation_finish().

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.

Since: 2.22

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the operation
</parameter_description>
</parameter>
<parameter name="mount_operation">
<parameter_description> a #GMountOperation, or %NULL to avoid user interaction.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_eject_mountable_with_operation_finish">
<description>
Finishes an asynchronous eject operation started by
g_file_eject_mountable_with_operation().

Since: 2.22

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @file was ejected successfully. %FALSE
otherwise.

</return>
</function>

<function name="g_file_enumerate_children">
<description>
Gets the requested information about the files in a directory. The result
is a #GFileEnumerator object that will give out #GFileInfo objects for
all the files in the directory.

The @attributes value is a string that specifies the file attributes that
should be gathered. It is not an error if it's not possible to read a particular
requested attribute from a file - it just won't be set. @attributes should
be a comma-separated list of attributes or attribute wildcards. The wildcard &quot;*&quot;
means all attributes, and a wildcard like &quot;standard::*&quot; means all attributes in the standard
namespace. An example attribute query be &quot;standard::*,owner::user&quot;.
The standard attributes are available as defines, like #G_FILE_ATTRIBUTE_STANDARD_NAME.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

If the file does not exist, the G_IO_ERROR_NOT_FOUND error will be returned.
If the file is not a directory, the G_FILE_ERROR_NOTDIR error will be returned.
Other errors are possible too.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> an attribute query string.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> A #GFileEnumerator if successful, %NULL on error. 
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_enumerate_children_async">
<description>
Asynchronously gets the requested information about the files in a directory. The result
is a #GFileEnumerator object that will give out #GFileInfo objects for
all the files in the directory.

For more details, see g_file_enumerate_children() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then call
g_file_enumerate_children_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> an attribute query string.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt; 
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the
request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_enumerate_children_finish">
<description>
Finishes an async enumerate children operation.
See g_file_enumerate_children_async().


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileEnumerator or %NULL if an error occurred.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_enumerator_close">
<description>
Releases all resources used by this enumerator, making the
enumerator return %G_IO_ERROR_CLOSED on all calls.

This will be automatically called when the last reference
is dropped, but you might want to call this function to make 
sure resources are released as early as possible.


</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GFileEnumerator.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> #TRUE on success or #FALSE on error.
</return>
</function>

<function name="g_file_enumerator_close_async">
<description>
Asynchronously closes the file enumerator. 

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned in 
g_file_enumerator_close_finish(). 

</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GFileEnumerator.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt; 
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_enumerator_close_finish">
<description>
Finishes closing a file enumerator, started from g_file_enumerator_close_async().

If the file enumerator was already closed when g_file_enumerator_close_async() 
was called, then this function will report %G_IO_ERROR_CLOSED in @error, and 
return %FALSE. If the file enumerator had pending operation when the close 
operation was started, then this function will report %G_IO_ERROR_PENDING, and
return %FALSE.  If @cancellable was not %NULL, then the operation may have been 
cancelled by triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be set, and %FALSE will be 
returned. 


</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GFileEnumerator.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the close operation has finished successfully.
</return>
</function>

<function name="g_file_enumerator_get_container">
<description>
Get the #GFile container which is being enumerated.

Since: 2.18

</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GFileEnumerator
</parameter_description>
</parameter>
</parameters>
<return> the #GFile which is being enumerated.

</return>
</function>

<function name="g_file_enumerator_has_pending">
<description>
Checks if the file enumerator has pending operations.


</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GFileEnumerator.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @enumerator has pending operations.
</return>
</function>

<function name="g_file_enumerator_is_closed">
<description>
Checks if the file enumerator has been closed.


</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GFileEnumerator.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @enumerator is closed.
</return>
</function>

<function name="g_file_enumerator_next_file">
<description>
Returns information for the next file in the enumerated object.
Will block until the information is available. The #GFileInfo 
returned from this function will contain attributes that match the 
attribute string that was passed when the #GFileEnumerator was created.

On error, returns %NULL and sets @error to the error. If the
enumerator is at the end, %NULL will be returned and @error will
be unset.


</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GFileEnumerator.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> A #GFileInfo or %NULL on error or end of enumerator.
Free the returned object with g_object_unref() when no longer needed.
</return>
</function>

<function name="g_file_enumerator_next_files_async">
<description>
Request information for a number of files from the enumerator asynchronously.
When all i/o for the operation is finished the @callback will be called with
the requested information. 

The callback can be called with less than @num_files files in case of error
or at the end of the enumerator. In case of a partial error the callback will
be called with any succeeding items and no error, and on the next request the
error will be reported. If a request is cancelled the callback will be called
with %G_IO_ERROR_CANCELLED.

During an async request no other sync and async calls are allowed, and will
result in %G_IO_ERROR_PENDING errors. 

Any outstanding i/o request with higher priority (lower numerical value) will
be executed before an outstanding request with lower priority. Default
priority is %G_PRIORITY_DEFAULT.

</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GFileEnumerator.
</parameter_description>
</parameter>
<parameter name="num_files">
<parameter_description> the number of file info objects to request
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;gioscheduler&quot;&gt;io priority&lt;/link&gt; 
of the request. 
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_enumerator_next_files_finish">
<description>
Finishes the asynchronous operation started with g_file_enumerator_next_files_async().


</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GFileEnumerator.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GList of #GFileInfo&lt;!----&gt;s. You must free the list with 
g_list_free() and unref the infos with g_object_unref() when you're 
done with them.
</return>
</function>

<function name="g_file_enumerator_set_pending">
<description>
Sets the file enumerator as having pending operations.

</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GFileEnumerator.
</parameter_description>
</parameter>
<parameter name="pending">
<parameter_description> a boolean value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_equal">
<description>
Checks equality of two given #GFile&lt;!-- --&gt;s. Note that two
#GFile&lt;!-- --&gt;s that differ can still refer to the same
file on the filesystem due to various forms of filename
aliasing.

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file1">
<parameter_description> the first #GFile.
</parameter_description>
</parameter>
<parameter name="file2">
<parameter_description> the second #GFile.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @file1 and @file2 are equal.
%FALSE if either is not a #GFile.
</return>
</function>

<function name="g_file_find_enclosing_mount">
<description>
Gets a #GMount for the #GFile. 

If the #GFileIface for @file does not have a mount (e.g. possibly a 
remote share), @error will be set to %G_IO_ERROR_NOT_FOUND and %NULL
will be returned.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError. 
</parameter_description>
</parameter>
</parameters>
<return> a #GMount where the @file is located or %NULL on error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_find_enclosing_mount_async">
<description>
Asynchronously gets the mount for the file.

For more details, see g_file_find_enclosing_mount() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then call
g_file_find_enclosing_mount_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> a #GFile
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt; 
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_find_enclosing_mount_finish">
<description>
Finishes an asynchronous find mount request. 
See g_file_find_enclosing_mount_async().


</description>
<parameters>
<parameter name="file">
<parameter_description> a #GFile
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError
</parameter_description>
</parameter>
</parameters>
<return> #GMount for given @file or %NULL on error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_get_basename">
<description>
Gets the base name (the last component of the path) for a given #GFile.

If called for the top level of a system (such as the filesystem root
or a uri like sftp://host/) it will return a single directory separator
(and on Windows, possibly a drive letter).

The base name is a byte string (*not* UTF-8). It has no defined encoding
or rules other than it may not contain zero bytes.  If you want to use
filenames in a user interface you should use the display name that you
can get by requesting the %G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME
attribute with g_file_query_info().

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
</parameters>
<return> string containing the #GFile's base name, or %NULL 
if given #GFile is invalid. The returned string should be 
freed with g_free() when no longer needed.
</return>
</function>

<function name="g_file_get_child">
<description>
Gets a child of @file with basename equal to @name.

Note that the file with that specific name might not exist, but
you can still have a #GFile that points to it. You can use this
for instance to create that file.

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> string containing the child's basename.
</parameter_description>
</parameter>
</parameters>
<return> a #GFile to a child specified by @name.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_get_child_for_display_name">
<description>
Gets the child of @file for a given @display_name (i.e. a UTF8
version of the name). If this function fails, it returns %NULL and @error will be 
set. This is very useful when constructing a GFile for a new file
and the user entered the filename in the user interface, for instance
when you select a directory and type a filename in the file selector.

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="display_name">
<parameter_description> string to a possible child.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError.
</parameter_description>
</parameter>
</parameters>
<return> a #GFile to the specified child, or 
%NULL if the display name couldn't be converted.  
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_get_parent">
<description>
Gets the parent directory for the @file. 
If the @file represents the root directory of the 
file system, then %NULL will be returned.

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
</parameters>
<return> a #GFile structure to the parent of the given
#GFile or %NULL if there is no parent. 
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_get_parse_name">
<description>
Gets the parse name of the @file.
A parse name is a UTF-8 string that describes the
file such that one can get the #GFile back using
g_file_parse_name().

This is generally used to show the #GFile as a nice
full-pathname kind of string in a user interface,
like in a location entry.

For local files with names that can safely be converted
to UTF8 the pathname is used, otherwise the IRI is used
(a form of URI that allows UTF8 characters unescaped).

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the #GFile's parse name. The returned 
string should be freed with g_free() when no longer needed.
</return>
</function>

<function name="g_file_get_path">
<description>
Gets the local pathname for #GFile, if one exists. 

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
</parameters>
<return> string containing the #GFile's path, or %NULL if 
no such path exists. The returned string should be 
freed with g_free() when no longer needed.
</return>
</function>

<function name="g_file_get_relative_path">
<description>
Gets the path for @descendant relative to @parent. 

This call does no blocking i/o.


</description>
<parameters>
<parameter name="parent">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="descendant">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
</parameters>
<return> string with the relative path from @descendant 
to @parent, or %NULL if @descendant doesn't have @parent as prefix. 
The returned string should be freed with g_free() when no longer needed.
</return>
</function>

<function name="g_file_get_uri">
<description>
Gets the URI for the @file.

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the #GFile's URI.
The returned string should be freed with g_free() when no longer needed.
</return>
</function>

<function name="g_file_get_uri_scheme">
<description>
Gets the URI scheme for a #GFile.
RFC 3986 decodes the scheme as:
&lt;programlisting&gt;
URI = scheme &quot;:&quot; hier-part [ &quot;?&quot; query ] [ &quot;#&quot; fragment ] 
&lt;/programlisting&gt;
Common schemes include &quot;file&quot;, &quot;http&quot;, &quot;ftp&quot;, etc. 

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the URI scheme for the given 
#GFile. The returned string should be freed with g_free() 
when no longer needed.
</return>
</function>

<function name="g_file_has_parent">
<description>
Checks if @file has a parent, and optionally, if it is @parent.

If @parent is %NULL then this function returns %TRUE if @file has any
parent at all.  If @parent is non-%NULL then %TRUE is only returned
if @file is a child of @parent.

Since: 2.24

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> the parent to check for, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @file is a child of @parent (or any parent in the
case that @parent is %NULL).

</return>
</function>

<function name="g_file_has_prefix">
<description>
Checks whether @file has the prefix specified by @prefix. In other word, 
if the names of inital elements of @file&lt;!-- --&gt;s pathname match @prefix.
Only full pathname elements are matched, so a path like /foo is not
considered a prefix of /foobar, only of /foo/bar.

This call does no i/o, as it works purely on names. As such it can 
sometimes return %FALSE even if @file is inside a @prefix (from a 
filesystem point of view), because the prefix of @file is an alias 
of @prefix.

Virtual: prefix_matches

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="prefix">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
</parameters>
<return>  %TRUE if the @files's parent, grandparent, etc is @prefix. 
%FALSE otherwise.
</return>
</function>

<function name="g_file_has_uri_scheme">
<description>
Checks to see if a #GFile has a given URI scheme.

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="uri_scheme">
<parameter_description> a string containing a URI scheme.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if #GFile's backend supports the
given URI scheme, %FALSE if URI scheme is %NULL,
not supported, or #GFile is invalid.
</return>
</function>

<function name="g_file_hash">
<description>
Creates a hash value for a #GFile.

This call does no blocking i/o.

Virtual: hash

</description>
<parameters>
<parameter name="file">
<parameter_description> #gconstpointer to a #GFile.
</parameter_description>
</parameter>
</parameters>
<return> 0 if @file is not a valid #GFile, otherwise an 
integer that can be used as hash value for the #GFile. 
This function is intended for easily hashing a #GFile to 
add to a #GHashTable or similar data structure.
</return>
</function>

<function name="g_file_icon_get_file">
<description>
Gets the #GFile associated with the given @icon.


</description>
<parameters>
<parameter name="icon">
<parameter_description> a #GIcon.
</parameter_description>
</parameter>
</parameters>
<return> a #GFile, or %NULL.
</return>
</function>

<function name="g_file_icon_new">
<description>
Creates a new icon for a file.


</description>
<parameters>
<parameter name="file">
<parameter_description> a #GFile.
</parameter_description>
</parameter>
</parameters>
<return> a #GIcon for the given @file, or %NULL on error.
</return>
</function>

<function name="g_file_info_clear_status">
<description>
Clears the status information from @info.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_copy_into">
<description>
Copies all of the #GFileAttribute&lt;!-- --&gt;s from @src_info to @dest_info.

</description>
<parameters>
<parameter name="src_info">
<parameter_description> source to copy attributes from.
</parameter_description>
</parameter>
<parameter name="dest_info">
<parameter_description> destination to copy attributes to.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_dup">
<description>
Duplicates a file info structure.


</description>
<parameters>
<parameter name="other">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> a duplicate #GFileInfo of @other.
</return>
</function>

<function name="g_file_info_get_attribute_as_string">
<description>
Gets the value of a attribute, formated as a string.
This escapes things as needed to make the string valid
utf8.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> a UTF-8 string associated with the given @attribute.
When you're done with the string it must be freed with g_free().
</return>
</function>

<function name="g_file_info_get_attribute_boolean">
<description>
Gets the value of a boolean attribute. If the attribute does not
contain a boolean value, %FALSE will be returned.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> the boolean value contained within the attribute.
</return>
</function>

<function name="g_file_info_get_attribute_byte_string">
<description>
Gets the value of a byte string attribute. If the attribute does
not contain a byte string, %NULL will be returned.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> the contents of the @attribute value as a byte string, or
%NULL otherwise.
</return>
</function>

<function name="g_file_info_get_attribute_data">
<description>
Gets the attribute type, value and status for an attribute key.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> return location for the attribute type, or %NULL
</parameter_description>
</parameter>
<parameter name="value_pp">
<parameter_description> return location for the attribute value, or %NULL
</parameter_description>
</parameter>
<parameter name="status">
<parameter_description> return location for the attribute status, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @info has an attribute named @attribute,
%FALSE otherwise.
</return>
</function>

<function name="g_file_info_get_attribute_int32">
<description>
Gets a signed 32-bit integer contained within the attribute. If the
attribute does not contain a signed 32-bit integer, or is invalid,
0 will be returned.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> a signed 32-bit integer from the attribute.
</return>
</function>

<function name="g_file_info_get_attribute_int64">
<description>
Gets a signed 64-bit integer contained within the attribute. If the
attribute does not contain an signed 64-bit integer, or is invalid,
0 will be returned.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> a signed 64-bit integer from the attribute.
</return>
</function>

<function name="g_file_info_get_attribute_object">
<description>
Gets the value of a #GObject attribute. If the attribute does
not contain a #GObject, %NULL will be returned.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> a #GObject associated with the given @attribute, or
%NULL otherwise.
</return>
</function>

<function name="g_file_info_get_attribute_status">
<description>
Gets the attribute status for an attribute key.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key
</parameter_description>
</parameter>
</parameters>
<return> a #GFileAttributeStatus for the given @attribute, or
%G_FILE_ATTRIBUTE_STATUS_UNSET if the key is invalid.

</return>
</function>

<function name="g_file_info_get_attribute_string">
<description>
Gets the value of a string attribute. If the attribute does
not contain a string, %NULL will be returned.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> the contents of the @attribute value as a UTF-8 string, or
%NULL otherwise.
</return>
</function>

<function name="g_file_info_get_attribute_stringv">
<description>
Gets the value of a stringv attribute. If the attribute does
not contain a stringv, %NULL will be returned.

Since: 2.22

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> the contents of the @attribute value as a stringv, or
%NULL otherwise. Do not free. These returned strings are UTF-8.

</return>
</function>

<function name="g_file_info_get_attribute_type">
<description>
Gets the attribute type for an attribute key.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileAttributeType for the given @attribute, or
%G_FILE_ATTRIBUTE_TYPE_INVALID if the key is not set.
</return>
</function>

<function name="g_file_info_get_attribute_uint32">
<description>
Gets an unsigned 32-bit integer contained within the attribute. If the
attribute does not contain an unsigned 32-bit integer, or is invalid,
0 will be returned.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> an unsigned 32-bit integer from the attribute.
</return>
</function>

<function name="g_file_info_get_attribute_uint64">
<description>
Gets a unsigned 64-bit integer contained within the attribute. If the
attribute does not contain an unsigned 64-bit integer, or is invalid,
0 will be returned.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> a unsigned 64-bit integer from the attribute.
</return>
</function>

<function name="g_file_info_get_content_type">
<description>
Gets the file's content type.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the file's content type.
</return>
</function>

<function name="g_file_info_get_display_name">
<description>
Gets a display name for a file.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the display name.
</return>
</function>

<function name="g_file_info_get_edit_name">
<description>
Gets the edit name for a file.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the edit name.
</return>
</function>

<function name="g_file_info_get_etag">
<description>
Gets the &lt;link linkend=&quot;gfile-etag&quot;&gt;entity tag&lt;/link&gt; for a given
#GFileInfo. See %G_FILE_ATTRIBUTE_ETAG_VALUE.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the value of the &quot;etag:value&quot; attribute.
</return>
</function>

<function name="g_file_info_get_file_type">
<description>
Gets a file's type (whether it is a regular file, symlink, etc).
This is different from the file's content type, see g_file_info_get_content_type().


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileType for the given file.
</return>
</function>

<function name="g_file_info_get_icon">
<description>
Gets the icon for a file.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> #GIcon for the given @info.
</return>
</function>

<function name="g_file_info_get_is_backup">
<description>
Checks if a file is a backup file.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if file is a backup file, %FALSE otherwise.
</return>
</function>

<function name="g_file_info_get_is_hidden">
<description>
Checks if a file is hidden.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the file is a hidden file, %FALSE otherwise.
</return>
</function>

<function name="g_file_info_get_is_symlink">
<description>
Checks if a file is a symlink.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the given @info is a symlink.
</return>
</function>

<function name="g_file_info_get_modification_time">
<description>
Gets the modification time of the current @info and sets it
in @result.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GTimeVal.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_get_name">
<description>
Gets the name for a file.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the file name.
</return>
</function>

<function name="g_file_info_get_size">
<description>
Gets the file's size.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> a #goffset containing the file's size.
</return>
</function>

<function name="g_file_info_get_sort_order">
<description>
Gets the value of the sort_order attribute from the #GFileInfo.
See %G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> a #gint32 containing the value of the &quot;standard::sort_order&quot; attribute.
</return>
</function>

<function name="g_file_info_get_symlink_target">
<description>
Gets the symlink target for a given #GFileInfo.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the symlink target.
</return>
</function>

<function name="g_file_info_has_attribute">
<description>
Checks if a file info structure has an attribute named @attribute.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @Ginfo has an attribute named @attribute,
%FALSE otherwise.
</return>
</function>

<function name="g_file_info_has_namespace">
<description>
Checks if a file info structure has an attribute in the
specified @name_space.

Since: 2.22

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="name_space">
<parameter_description> a file attribute namespace.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @Ginfo has an attribute in @name_space,
%FALSE otherwise.

</return>
</function>

<function name="g_file_info_list_attributes">
<description>
Lists the file info structure's attributes.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="name_space">
<parameter_description> a file attribute key's namespace.
</parameter_description>
</parameter>
</parameters>
<return> a null-terminated array of strings of all of the
possible attribute types for the given @name_space, or
%NULL on error.
</return>
</function>

<function name="g_file_info_new">
<description>
Creates a new file info structure.


</description>
<parameters>
</parameters>
<return> a #GFileInfo.
</return>
</function>

<function name="g_file_info_remove_attribute">
<description>
Removes all cases of @attribute from @info if it exists.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_attribute">
<description>
Sets the @attribute to contain the given value, if possible.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #GFileAttributeType
</parameter_description>
</parameter>
<parameter name="value_p">
<parameter_description> pointer to the value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_attribute_boolean">
<description>
Sets the @attribute to contain the given @attr_value,
if possible.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
<parameter name="attr_value">
<parameter_description> a boolean value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_attribute_byte_string">
<description>
Sets the @attribute to contain the given @attr_value,
if possible.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
<parameter name="attr_value">
<parameter_description> a byte string.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_attribute_int32">
<description>
Sets the @attribute to contain the given @attr_value,
if possible.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
<parameter name="attr_value">
<parameter_description> a signed 32-bit integer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_attribute_int64">
<description>
Sets the @attribute to contain the given @attr_value,
if possible.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> attribute name to set.
</parameter_description>
</parameter>
<parameter name="attr_value">
<parameter_description> int64 value to set attribute to.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_attribute_mask">
<description>
Sets @mask on @info to match specific attribute types.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> a #GFileAttributeMatcher.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_attribute_object">
<description>
Sets the @attribute to contain the given @attr_value,
if possible.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
<parameter name="attr_value">
<parameter_description> a #GObject.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_attribute_status">
<description>
Sets the attribute status for an attribute key. This is only
needed by external code that implement g_file_set_attributes_from_info()
or similar functions.

The attribute must exist in @info for this to work. Otherwise %FALSE
is returned and @info is unchanged.

Since: 2.22

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key
</parameter_description>
</parameter>
<parameter name="status">
<parameter_description> a #GFileAttributeStatus
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the status was changed, %FALSE if the key was not set.

</return>
</function>

<function name="g_file_info_set_attribute_string">
<description>
Sets the @attribute to contain the given @attr_value,
if possible.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
<parameter name="attr_value">
<parameter_description> a UTF-8 string.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_attribute_stringv">
<description>
Sets the @attribute to contain the given @attr_value,
if possible.

Sinze: 2.22

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key
</parameter_description>
</parameter>
<parameter name="attr_value">
<parameter_description> a %NULL terminated array of UTF-8 strings.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_attribute_uint32">
<description>
Sets the @attribute to contain the given @attr_value,
if possible.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
<parameter name="attr_value">
<parameter_description> an unsigned 32-bit integer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_attribute_uint64">
<description>
Sets the @attribute to contain the given @attr_value,
if possible.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
<parameter name="attr_value">
<parameter_description> an unsigned 64-bit integer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_content_type">
<description>
Sets the content type attribute for a given #GFileInfo.
See %G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="content_type">
<parameter_description> a content type. See #GContentType.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_display_name">
<description>
Sets the display name for the current #GFileInfo.
See %G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="display_name">
<parameter_description> a string containing a display name.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_edit_name">
<description>
Sets the edit name for the current file.
See %G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="edit_name">
<parameter_description> a string containing an edit name.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_file_type">
<description>
Sets the file type in a #GFileInfo to @type.
See %G_FILE_ATTRIBUTE_STANDARD_TYPE.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #GFileType.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_icon">
<description>
Sets the icon for a given #GFileInfo.
See %G_FILE_ATTRIBUTE_STANDARD_ICON.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="icon">
<parameter_description> a #GIcon.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_is_hidden">
<description>
Sets the &quot;is_hidden&quot; attribute in a #GFileInfo according to @is_symlink.
See %G_FILE_ATTRIBUTE_STANDARD_IS_HIDDEN.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="is_hidden">
<parameter_description> a #gboolean.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_is_symlink">
<description>
Sets the &quot;is_symlink&quot; attribute in a #GFileInfo according to @is_symlink.
See %G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="is_symlink">
<parameter_description> a #gboolean.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_modification_time">
<description>
Sets the %G_FILE_ATTRIBUTE_TIME_MODIFIED attribute in the file
info to the given time value.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="mtime">
<parameter_description> a #GTimeVal.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_name">
<description>
Sets the name attribute for the current #GFileInfo.
See %G_FILE_ATTRIBUTE_STANDARD_NAME.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> a string containing a name.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_size">
<description>
Sets the %G_FILE_ATTRIBUTE_STANDARD_SIZE attribute in the file info
to the given size.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> a #goffset containing the file's size.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_sort_order">
<description>
Sets the sort order attribute in the file info structure. See
%G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="sort_order">
<parameter_description> a sort order integer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_symlink_target">
<description>
Sets the %G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET attribute in the file info
to the given symlink target.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="symlink_target">
<parameter_description> a static string containing a path to a symlink target.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_unset_attribute_mask">
<description>
Unsets a mask set by g_file_info_set_attribute_mask(), if one
is set.

</description>
<parameters>
<parameter name="info">
<parameter_description> #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_input_stream_query_info">
<description>
Queries a file input stream the given @attributes. This function blocks 
while querying the stream. For the asynchronous (non-blocking) version 
of this function, see g_file_input_stream_query_info_async(). While the 
stream is blocked, the stream will set the pending flag internally, and 
any other operations on the stream will fail with %G_IO_ERROR_PENDING.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFileInputStream.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> a file attribute query string.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileInfo, or %NULL on error.
</return>
</function>

<function name="g_file_input_stream_query_info_async">
<description>
Queries the stream information asynchronously.
When the operation is finished @callback will be called. 
You can then call g_file_input_stream_query_info_finish() 
to get the result of the operation.

For the synchronous version of this function, 
see g_file_input_stream_query_info(). 

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be set


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFileInputStream.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> a file attribute query string.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt; 
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_input_stream_query_info_finish">
<description>
Finishes an asynchronous info query operation.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFileInputStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, 
or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> #GFileInfo. 
</return>
</function>

<function name="g_file_io_stream_get_etag">
<description>
Gets the entity tag for the file when it has been written.
This must be called after the stream has been written
and closed, as the etag can change while writing.

Since: 2.22

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFileIOStream.
</parameter_description>
</parameter>
</parameters>
<return> the entity tag for the stream.

</return>
</function>

<function name="g_file_io_stream_query_info">
<description>
Queries a file io stream for the given @attributes.
This function blocks while querying the stream. For the asynchronous
version of this function, see g_file_io_stream_query_info_async().
While the stream is blocked, the stream will set the pending flag
internally, and any other operations on the stream will fail with
%G_IO_ERROR_PENDING.

Can fail if the stream was already closed (with @error being set to
%G_IO_ERROR_CLOSED), the stream has pending operations (with @error being
set to %G_IO_ERROR_PENDING), or if querying info is not supported for
the stream's interface (with @error being set to %G_IO_ERROR_NOT_SUPPORTED). I
all cases of failure, %NULL will be returned.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be set, and %NULL will
be returned.

Since: 2.22

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFileIOStream.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> a file attribute query string.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileInfo for the @stream, or %NULL on error.

</return>
</function>

<function name="g_file_io_stream_query_info_async">
<description>
Asynchronously queries the @stream for a #GFileInfo. When completed,
@callback will be called with a #GAsyncResult which can be used to
finish the operation with g_file_io_stream_query_info_finish().

For the synchronous version of this function, see
g_file_io_stream_query_info().

Since: 2.22

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFileIOStream.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> a file attribute query string.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;gio-GIOScheduler&quot;&gt;I/O priority&lt;/link&gt;
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_io_stream_query_info_finish">
<description>
Finalizes the asynchronous query started
by g_file_io_stream_query_info_async().

Since: 2.22

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFileIOStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> A #GFileInfo for the finished query.

</return>
</function>

<function name="g_file_is_native">
<description>
Checks to see if a file is native to the platform.

A native file s one expressed in the platform-native filename format,
e.g. &quot;C:\Windows&quot; or &quot;/usr/bin/&quot;. This does not mean the file is local,
as it might be on a locally mounted remote filesystem.

On some systems non-native files may be available using
the native filesystem via a userspace filesystem (FUSE), in
these cases this call will return %FALSE, but g_file_get_path()
will still return a native path.

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if file is native. 
</return>
</function>

<function name="g_file_load_contents">
<description>
Loads the content of the file into memory. The data is always 
zero-terminated, but this is not included in the resultant @length.
The returned @content should be freed with g_free() when no longer
needed.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="contents">
<parameter_description> a location to place the contents of the file.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> a location to place the length of the contents of the file,
or %NULL if the length is not needed
</parameter_description>
</parameter>
<parameter name="etag_out">
<parameter_description> a location to place the current entity tag for the file,
or %NULL if the entity tag is not needed
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @file's contents were successfully loaded.
%FALSE if there were errors.
</return>
</function>

<function name="g_file_load_contents_async">
<description>
Starts an asynchronous load of the @file's contents.

For more details, see g_file_load_contents() which is
the synchronous version of this call.

When the load operation has completed, @callback will be called 
with @user data. To finish the operation, call 
g_file_load_contents_finish() with the #GAsyncResult returned by 
the @callback.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_load_contents_finish">
<description>
Finishes an asynchronous load of the @file's contents. 
The contents are placed in @contents, and @length is set to the 
size of the @contents string. The @content should be freed with
g_free() when no longer needed. If @etag_out is present, it will be 
set to the new entity tag for the @file.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult. 
</parameter_description>
</parameter>
<parameter name="contents">
<parameter_description> a location to place the contents of the file.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> a location to place the length of the contents of the file,
or %NULL if the length is not needed
</parameter_description>
</parameter>
<parameter name="etag_out">
<parameter_description> a location to place the current entity tag for the file,
or %NULL if the entity tag is not needed
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the load was successful. If %FALSE and @error is 
present, it will be set appropriately. 
</return>
</function>

<function name="g_file_load_partial_contents_async">
<description>
Reads the partial contents of a file. A #GFileReadMoreCallback should be 
used to stop reading from the file when appropriate, else this function
will behave exactly as g_file_load_contents_async(). This operation 
can be finished by g_file_load_partial_contents_finish().

Users of this function should be aware that @user_data is passed to 
both the @read_more_callback and the @callback.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="read_more_callback">
<parameter_description> a #GFileReadMoreCallback to receive partial data and to specify whether further data should be read.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to the callback functions.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_load_partial_contents_finish">
<description>
Finishes an asynchronous partial load operation that was started
with g_file_load_partial_contents_async(). The data is always 
zero-terminated, but this is not included in the resultant @length.
The returned @content should be freed with g_free() when no longer
needed.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult. 
</parameter_description>
</parameter>
<parameter name="contents">
<parameter_description> a location to place the contents of the file.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> a location to place the length of the contents of the file,
or %NULL if the length is not needed
</parameter_description>
</parameter>
<parameter name="etag_out">
<parameter_description> a location to place the current entity tag for the file,
or %NULL if the entity tag is not needed
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the load was successful. If %FALSE and @error is 
present, it will be set appropriately. 
</return>
</function>

<function name="g_file_make_directory">
<description>
Creates a directory. Note that this will only create a child directory of
the immediate parent directory of the path or URI given by the #GFile. To 
recursively create directories, see g_file_make_directory_with_parents().
This function will fail if the parent directory does not exist, setting 
@error to %G_IO_ERROR_NOT_FOUND. If the file system doesn't support creating
directories, this function will fail, setting @error to 
%G_IO_ERROR_NOT_SUPPORTED.

For a local #GFile the newly created directory will have the default
(current) ownership and permissions of the current process.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL 
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on successful creation, %FALSE otherwise.
</return>
</function>

<function name="g_file_make_directory_with_parents">
<description>
Creates a directory and any parent directories that may not exist similar to
'mkdir -p'. If the file system does not support creating directories, this
function will fail, setting @error to %G_IO_ERROR_NOT_SUPPORTED.

For a local #GFile the newly created directories will have the default
(current) ownership and permissions of the current process.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

Since: 2.18

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL 
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if all directories have been successfully created, %FALSE
otherwise.

</return>
</function>

<function name="g_file_make_symbolic_link">
<description>
Creates a symbolic link named @file which contains the string
@symlink_value.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.


</description>
<parameters>
<parameter name="file">
<parameter_description> a #GFile with the name of the symlink to create
</parameter_description>
</parameter>
<parameter name="symlink_value">
<parameter_description> a string with the path for the target of the new symlink
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on the creation of a new symlink, %FALSE otherwise.
</return>
</function>

<function name="g_file_monitor">
<description>
Obtains a file or directory monitor for the given file, depending
on the type of the file.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

Since: 2.18

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileMonitorFlags
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileMonitor for the given @file, or %NULL on error.
Free the returned object with g_object_unref().

</return>
</function>

<function name="g_file_monitor_cancel">
<description>
Cancels a file monitor.


</description>
<parameters>
<parameter name="monitor">
<parameter_description> a #GFileMonitor.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if monitor was cancelled.
</return>
</function>

<function name="g_file_monitor_directory">
<description>
Obtains a directory monitor for the given file.
This may fail if directory monitoring is not supported.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

Virtual: monitor_dir

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileMonitorFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileMonitor for the given @file, or %NULL on error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_monitor_emit_event">
<description>
Emits the #GFileMonitor::changed signal if a change
has taken place. Should be called from file monitor 
implementations only.

The signal will be emitted from an idle handler (in the &lt;link
linkend=&quot;g-main-context-push-thread-default&quot;&gt;thread-default main
context&lt;/link&gt;).

</description>
<parameters>
<parameter name="monitor">
<parameter_description> a #GFileMonitor.
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a #GFile.
</parameter_description>
</parameter>
<parameter name="other_file">
<parameter_description> a #GFile.
</parameter_description>
</parameter>
<parameter name="event_type">
<parameter_description> a set of #GFileMonitorEvent flags.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_monitor_file">
<description>
Obtains a file monitor for the given file. If no file notification
mechanism exists, then regular polling of the file is used.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileMonitorFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileMonitor for the given @file, or %NULL on error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_monitor_is_cancelled">
<description>
Returns whether the monitor is canceled.


</description>
<parameters>
<parameter name="monitor">
<parameter_description> a #GFileMonitor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if monitor is canceled. %FALSE otherwise.
</return>
</function>

<function name="g_file_monitor_set_rate_limit">
<description>
Sets the rate limit to which the @monitor will report
consecutive change events to the same file.

</description>
<parameters>
<parameter name="monitor">
<parameter_description> a #GFileMonitor.
</parameter_description>
</parameter>
<parameter name="limit_msecs">
<parameter_description> a non-negative integer with the limit in milliseconds
to poll for changes
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_mount_enclosing_volume">
<description>
Starts a @mount_operation, mounting the volume that contains the file @location. 

When this operation has completed, @callback will be called with
@user_user data, and the operation can be finalized with 
g_file_mount_enclosing_volume_finish().

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

</description>
<parameters>
<parameter name="location">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the operation
</parameter_description>
</parameter>
<parameter name="mount_operation">
<parameter_description> a #GMountOperation or %NULL to avoid user interaction.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_mount_enclosing_volume_finish">
<description>
Finishes a mount operation started by g_file_mount_enclosing_volume().


</description>
<parameters>
<parameter name="location">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful. If an error
has occurred, this function will return %FALSE and set @error
appropriately if present.
</return>
</function>

<function name="g_file_mount_mountable">
<description>
Mounts a file of type G_FILE_TYPE_MOUNTABLE.
Using @mount_operation, you can request callbacks when, for instance, 
passwords are needed during authentication.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.

When the operation is finished, @callback will be called. You can then call
g_file_mount_mountable_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the operation
</parameter_description>
</parameter>
<parameter name="mount_operation">
<parameter_description> a #GMountOperation, or %NULL to avoid user interaction.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_mount_mountable_finish">
<description>
Finishes a mount operation. See g_file_mount_mountable() for details.

Finish an asynchronous mount operation that was started 
with g_file_mount_mountable().


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFile or %NULL on error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_move">
<description>
Tries to move the file or directory @source to the location specified by @destination.
If native move operations are supported then this is used, otherwise a copy + delete
fallback is used. The native implementation may support moving directories (for instance
on moves inside the same filesystem), but the fallback code does not.

If the flag #G_FILE_COPY_OVERWRITE is specified an already
existing @destination file is overwritten.

If the flag #G_FILE_COPY_NOFOLLOW_SYMLINKS is specified then symlinks
will be copied as symlinks, otherwise the target of the
@source symlink will be copied.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

If @progress_callback is not %NULL, then the operation can be monitored by
setting this to a #GFileProgressCallback function. @progress_callback_data
will be passed to this function. It is guaranteed that this callback will
be called after all data has been transferred with the total number of bytes
copied during the operation.

If the @source file does not exist then the G_IO_ERROR_NOT_FOUND
error is returned, independent on the status of the @destination.

If #G_FILE_COPY_OVERWRITE is not specified and the target exists, then the
error G_IO_ERROR_EXISTS is returned.

If trying to overwrite a file over a directory the G_IO_ERROR_IS_DIRECTORY
error is returned. If trying to overwrite a directory with a directory the
G_IO_ERROR_WOULD_MERGE error is returned.

If the source is a directory and the target does not exist, or #G_FILE_COPY_OVERWRITE is
specified and the target is a file, then the G_IO_ERROR_WOULD_RECURSE error
may be returned (if the native move operation isn't available).


</description>
<parameters>
<parameter name="source">
<parameter_description> #GFile pointing to the source location.
</parameter_description>
</parameter>
<parameter name="destination">
<parameter_description> #GFile pointing to the destination location.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> set of #GFileCopyFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="progress_callback">
<parameter_description> #GFileProgressCallback function for updates.
</parameter_description>
</parameter>
<parameter name="progress_callback_data">
<parameter_description> gpointer to user data for the callback function.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for returning error conditions, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on successful move, %FALSE otherwise.
</return>
</function>

<function name="g_file_new_for_commandline_arg">
<description>
Creates a #GFile with the given argument from the command line. The value of
@arg can be either a URI, an absolute path or a relative path resolved
relative to the current working directory.
This operation never fails, but the returned object might not support any
I/O operation if @arg points to a malformed path.


</description>
<parameters>
<parameter name="arg">
<parameter_description> a command line string.
</parameter_description>
</parameter>
</parameters>
<return> a new #GFile. 
</return>
</function>

<function name="g_file_new_for_path">
<description>
Constructs a #GFile for a given path. This operation never
fails, but the returned object might not support any I/O
operation if @path is malformed.


</description>
<parameters>
<parameter name="path">
<parameter_description> a string containing a relative or absolute path. The string
must be encoded in the glib filename encoding.
</parameter_description>
</parameter>
</parameters>
<return> a new #GFile for the given @path. 
</return>
</function>

<function name="g_file_new_for_uri">
<description>
Constructs a #GFile for a given URI. This operation never 
fails, but the returned object might not support any I/O 
operation if @uri is malformed or if the uri type is 
not supported.


</description>
<parameters>
<parameter name="uri">
<parameter_description> a UTF8 string containing a URI.
</parameter_description>
</parameter>
</parameters>
<return> a #GFile for the given @uri.
</return>
</function>

<function name="g_file_open_readwrite">
<description>
Opens an existing file for reading and writing. The result is
a #GFileIOStream that can be used to read and write the contents of the file.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.

If the file does not exist, the G_IO_ERROR_NOT_FOUND error will be returned.
If the file is a directory, the G_IO_ERROR_IS_DIRECTORY error will be returned.
Other errors are possible too, and depend on what kind of filesystem the file is on.
Note that in many non-local file cases read and write streams are not supported,
so make sure you really need to do read and write streaming, rather than
just opening for reading or writing.

Since: 2.22

</description>
<parameters>
<parameter name="file">
<parameter_description> #GFile to open
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> #GFileIOStream or %NULL on error.
Free the returned object with g_object_unref().

</return>
</function>

<function name="g_file_open_readwrite_async">
<description>
Asynchronously opens @file for reading and writing.

For more details, see g_file_open_readwrite() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then call
g_file_open_readwrite_finish() to get the result of the operation.

Since: 2.22

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt;
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_open_readwrite_finish">
<description>
Finishes an asynchronous file read operation started with
g_file_open_readwrite_async().

Since: 2.22

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileIOStream or %NULL on error.
Free the returned object with g_object_unref().

</return>
</function>

<function name="g_file_output_stream_get_etag">
<description>
Gets the entity tag for the file when it has been written.
This must be called after the stream has been written
and closed, as the etag can change while writing.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFileOutputStream.
</parameter_description>
</parameter>
</parameters>
<return> the entity tag for the stream.
</return>
</function>

<function name="g_file_output_stream_query_info">
<description>
Queries a file output stream for the given @attributes. 
This function blocks while querying the stream. For the asynchronous 
version of this function, see g_file_output_stream_query_info_async(). 
While the stream is blocked, the stream will set the pending flag 
internally, and any other operations on the stream will fail with 
%G_IO_ERROR_PENDING.

Can fail if the stream was already closed (with @error being set to 
%G_IO_ERROR_CLOSED), the stream has pending operations (with @error being
set to %G_IO_ERROR_PENDING), or if querying info is not supported for 
the stream's interface (with @error being set to %G_IO_ERROR_NOT_SUPPORTED). In
all cases of failure, %NULL will be returned.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be set, and %NULL will 
be returned. 


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFileOutputStream.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> a file attribute query string.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileInfo for the @stream, or %NULL on error.
</return>
</function>

<function name="g_file_output_stream_query_info_async">
<description>
Asynchronously queries the @stream for a #GFileInfo. When completed,
@callback will be called with a #GAsyncResult which can be used to 
finish the operation with g_file_output_stream_query_info_finish().

For the synchronous version of this function, see 
g_file_output_stream_query_info().


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFileOutputStream.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> a file attribute query string.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;gio-GIOScheduler&quot;&gt;I/O priority&lt;/link&gt; 
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_output_stream_query_info_finish">
<description>
Finalizes the asynchronous query started 
by g_file_output_stream_query_info_async().


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFileOutputStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> A #GFileInfo for the finished query.
</return>
</function>

<function name="g_file_parse_name">
<description>
Constructs a #GFile with the given @parse_name (i.e. something given by g_file_get_parse_name()).
This operation never fails, but the returned object might not support any I/O
operation if the @parse_name cannot be parsed.


</description>
<parameters>
<parameter name="parse_name">
<parameter_description> a file name or path to be parsed.
</parameter_description>
</parameter>
</parameters>
<return> a new #GFile.
</return>
</function>

<function name="g_file_poll_mountable">
<description>
Polls a file of type G_FILE_TYPE_MOUNTABLE.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.

When the operation is finished, @callback will be called. You can then call
g_file_mount_mountable_finish() to get the result of the operation.

Since: 2.22

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_poll_mountable_finish">
<description>
Finishes a poll operation. See g_file_poll_mountable() for details.

Finish an asynchronous poll operation that was polled
with g_file_poll_mountable().

Since: 2.22

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the operation finished successfully. %FALSE
otherwise.

</return>
</function>

<function name="g_file_query_default_handler">
<description>
Returns the #GAppInfo that is registered as the default
application to handle the file specified by @file.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> a #GFile to open.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GAppInfo if the handle was found, %NULL if there were errors.
When you are done with it, release it with g_object_unref()
</return>
</function>

<function name="g_file_query_exists">
<description>
Utility function to check if a particular file exists. This is
implemented using g_file_query_info() and as such does blocking I/O.

Note that in many cases it is racy to first check for file existence
and then execute something based on the outcome of that, because the
file might have been created or removed in between the operations. The
general approach to handling that is to not check, but just do the
operation and handle the errors as they come.

As an example of race-free checking, take the case of reading a file, and
if it doesn't exist, creating it. There are two racy versions: read it, and
on error create it; and: check if it exists, if not create it. These
can both result in two processes creating the file (with perhaps a partially
written file as the result). The correct approach is to always try to create
the file with g_file_create() which will either atomically create the file
or fail with a G_IO_ERROR_EXISTS error.

However, in many cases an existence check is useful in a user
interface, for instance to make a menu item sensitive/insensitive, so that
you don't have to fool users that something is possible and then just show
and error dialog. If you do this, you should make sure to also handle the
errors that can happen due to races when you execute the operation.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the file exists (and can be detected without error), %FALSE otherwise (or if cancelled).
</return>
</function>

<function name="g_file_query_file_type">
<description>
Utility function to inspect the #GFileType of a file. This is
implemented using g_file_query_info() and as such does blocking I/O.

The primary use case of this method is to check if a file is a regular file,
directory, or symlink.

Since: 2.18

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileQueryInfoFlags passed to g_file_query_info().
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> The #GFileType of the file and #G_FILE_TYPE_UNKNOWN if the file
does not exist

</return>
</function>

<function name="g_file_query_filesystem_info">
<description>
Similar to g_file_query_info(), but obtains information
about the filesystem the @file is on, rather than the file itself.
For instance the amount of space available and the type of
the filesystem.

The @attributes value is a string that specifies the file attributes that
should be gathered. It is not an error if it's not possible to read a particular
requested attribute from a file - it just won't be set. @attributes should
be a comma-separated list of attributes or attribute wildcards. The wildcard &quot;*&quot;
means all attributes, and a wildcard like &quot;fs:*&quot; means all attributes in the fs
namespace. The standard namespace for filesystem attributes is &quot;fs&quot;.
Common attributes of interest are #G_FILE_ATTRIBUTE_FILESYSTEM_SIZE
(the total size of the filesystem in bytes), #G_FILE_ATTRIBUTE_FILESYSTEM_FREE (number of
bytes available), and #G_FILE_ATTRIBUTE_FILESYSTEM_TYPE (type of the filesystem).

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

If the file does not exist, the G_IO_ERROR_NOT_FOUND error will be returned.
Other errors are possible too, and depend on what kind of filesystem the file is on.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description>  an attribute query string.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError. 
</parameter_description>
</parameter>
</parameters>
<return> a #GFileInfo or %NULL if there was an error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_query_filesystem_info_async">
<description>
Asynchronously gets the requested information about the filesystem
that the specified @file is on. The result is a #GFileInfo object
that contains key-value attributes (such as type or size for the
file).

For more details, see g_file_query_filesystem_info() which is the
synchronous version of this call.

When the operation is finished, @callback will be called. You can
then call g_file_query_info_finish() to get the result of the
operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> an attribute query string.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt; 
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_query_filesystem_info_finish">
<description>
Finishes an asynchronous filesystem info query.  See
g_file_query_filesystem_info_async().


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError. 
</parameter_description>
</parameter>
</parameters>
<return> #GFileInfo for given @file or %NULL on error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_query_info">
<description>
Gets the requested information about specified @file. The result
is a #GFileInfo object that contains key-value attributes (such as 
the type or size of the file).

The @attributes value is a string that specifies the file attributes that
should be gathered. It is not an error if it's not possible to read a particular
requested attribute from a file - it just won't be set. @attributes should
be a comma-separated list of attributes or attribute wildcards. The wildcard &quot;*&quot;
means all attributes, and a wildcard like &quot;standard::*&quot; means all attributes in the standard
namespace. An example attribute query be &quot;standard::*,owner::user&quot;.
The standard attributes are available as defines, like #G_FILE_ATTRIBUTE_STANDARD_NAME.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

For symlinks, normally the information about the target of the
symlink is returned, rather than information about the symlink itself.
However if you pass #G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS in @flags the
information about the symlink itself will be returned. Also, for symlinks
that point to non-existing files the information about the symlink itself
will be returned.

If the file does not exist, the G_IO_ERROR_NOT_FOUND error will be returned.
Other errors are possible too, and depend on what kind of filesystem the file is on.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> an attribute query string.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileInfo for the given @file, or %NULL on error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_query_info_async">
<description>
Asynchronously gets the requested information about specified @file. The result
is a #GFileInfo object that contains key-value attributes (such as type or size
for the file).

For more details, see g_file_query_info() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then call
g_file_query_info_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> an attribute query string.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt; 
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_query_info_finish">
<description>
Finishes an asynchronous file info query. 
See g_file_query_info_async().


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError. 
</parameter_description>
</parameter>
</parameters>
<return> #GFileInfo for given @file or %NULL on error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_query_settable_attributes">
<description>
Obtain the list of settable attributes for the file.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileAttributeInfoList describing the settable attributes.
When you are done with it, release it with g_file_attribute_info_list_unref()
</return>
</function>

<function name="g_file_query_writable_namespaces">
<description>
Obtain the list of attribute namespaces where new attributes 
can be created by a user. An example of this is extended
attributes (in the &quot;xattr&quot; namespace).

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileAttributeInfoList describing the writable namespaces.
When you are done with it, release it with g_file_attribute_info_list_unref()
</return>
</function>

<function name="g_file_read">
<description>
Opens a file for reading. The result is a #GFileInputStream that
can be used to read the contents of the file.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

If the file does not exist, the G_IO_ERROR_NOT_FOUND error will be returned.
If the file is a directory, the G_IO_ERROR_IS_DIRECTORY error will be returned.
Other errors are possible too, and depend on what kind of filesystem the file is on.

Virtual: read_fn

</description>
<parameters>
<parameter name="file">
<parameter_description> #GFile to read.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> #GFileInputStream or %NULL on error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_read_async">
<description>
Asynchronously opens @file for reading.

For more details, see g_file_read() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then call
g_file_read_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt;
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_read_finish">
<description>
Finishes an asynchronous file read operation started with 
g_file_read_async(). 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileInputStream or %NULL on error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_replace">
<description>
Returns an output stream for overwriting the file, possibly
creating a backup copy of the file first. If the file doesn't exist,
it will be created.

This will try to replace the file in the safest way possible so
that any errors during the writing will not affect an already
existing copy of the file. For instance, for local files it
may write to a temporary file and then atomically rename over
the destination when the stream is closed.

By default files created are generally readable by everyone,
but if you pass #G_FILE_CREATE_PRIVATE in @flags the file
will be made readable only to the current user, to the level that
is supported on the target filesystem.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

If you pass in a non-#NULL @etag value, then this value is
compared to the current entity tag of the file, and if they differ
an G_IO_ERROR_WRONG_ETAG error is returned. This generally means
that the file has been changed since you last read it. You can get
the new etag from g_file_output_stream_get_etag() after you've
finished writing and closed the #GFileOutputStream. When you load
a new file you can use g_file_input_stream_query_info() to get
the etag of the file.

If @make_backup is %TRUE, this function will attempt to make a backup
of the current file before overwriting it. If this fails a G_IO_ERROR_CANT_CREATE_BACKUP
error will be returned. If you want to replace anyway, try again with
@make_backup set to %FALSE.

If the file is a directory the G_IO_ERROR_IS_DIRECTORY error will be returned,
and if the file is some other form of non-regular file then a
G_IO_ERROR_NOT_REGULAR_FILE error will be returned.
Some file systems don't allow all file names, and may
return an G_IO_ERROR_INVALID_FILENAME error, and if the name
is to long G_IO_ERROR_FILENAME_TOO_LONG will be returned.
Other errors are possible too, and depend on what kind of
filesystem the file is on.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="etag">
<parameter_description> an optional &lt;link linkend=&quot;gfile-etag&quot;&gt;entity tag&lt;/link&gt; for the 
current #GFile, or #NULL to ignore.
</parameter_description>
</parameter>
<parameter name="make_backup">
<parameter_description> %TRUE if a backup should be created.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCreateFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileOutputStream or %NULL on error. 
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_replace_async">
<description>
Asynchronously overwrites the file, replacing the contents, possibly
creating a backup copy of the file first.

For more details, see g_file_replace() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then call
g_file_replace_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="etag">
<parameter_description> an &lt;link linkend=&quot;gfile-etag&quot;&gt;entity tag&lt;/link&gt; for the 
current #GFile, or NULL to ignore.
</parameter_description>
</parameter>
<parameter name="make_backup">
<parameter_description> %TRUE if a backup should be created.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCreateFlags.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt; 
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_replace_contents">
<description>
Replaces the contents of @file with @contents of @length bytes.
 
If @etag is specified (not %NULL) any existing file must have that etag, or
the error %G_IO_ERROR_WRONG_ETAG will be returned.

If @make_backup is %TRUE, this function will attempt to make a backup of @file.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

The returned @new_etag can be used to verify that the file hasn't changed the
next time it is saved over.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="contents">
<parameter_description> a string containing the new contents for @file.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of @contents in bytes.
</parameter_description>
</parameter>
<parameter name="etag">
<parameter_description> the old &lt;link linkend=&quot;gfile-etag&quot;&gt;entity tag&lt;/link&gt; 
for the document, or %NULL
</parameter_description>
</parameter>
<parameter name="make_backup">
<parameter_description> %TRUE if a backup should be created.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCreateFlags.
</parameter_description>
</parameter>
<parameter name="new_etag">
<parameter_description> a location to a new &lt;link linkend=&quot;gfile-etag&quot;&gt;entity tag&lt;/link&gt;
for the document. This should be freed with g_free() when no longer 
needed, or %NULL
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful. If an error
has occurred, this function will return %FALSE and set @error
appropriately if present.
</return>
</function>

<function name="g_file_replace_contents_async">
<description>
Starts an asynchronous replacement of @file with the given 
@contents of @length bytes. @etag will replace the document's 
current entity tag.

When this operation has completed, @callback will be called with
@user_user data, and the operation can be finalized with 
g_file_replace_contents_finish().

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

If @make_backup is %TRUE, this function will attempt to 
make a backup of @file.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="contents">
<parameter_description> string of contents to replace the file with.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of @contents in bytes.
</parameter_description>
</parameter>
<parameter name="etag">
<parameter_description> a new &lt;link linkend=&quot;gfile-etag&quot;&gt;entity tag&lt;/link&gt; for the @file, or %NULL
</parameter_description>
</parameter>
<parameter name="make_backup">
<parameter_description> %TRUE if a backup should be created.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCreateFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_replace_contents_finish">
<description>
Finishes an asynchronous replace of the given @file. See
g_file_replace_contents_async(). Sets @new_etag to the new entity 
tag for the document, if present.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult. 
</parameter_description>
</parameter>
<parameter name="new_etag">
<parameter_description> a location of a new &lt;link linkend=&quot;gfile-etag&quot;&gt;entity tag&lt;/link&gt; 
for the document. This should be freed with g_free() when it is no 
longer needed, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL 
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on failure.
</return>
</function>

<function name="g_file_replace_finish">
<description>
Finishes an asynchronous file replace operation started with 
g_file_replace_async(). 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileOutputStream, or %NULL on error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_replace_readwrite">
<description>
Returns an output stream for overwriting the file in readwrite mode,
possibly creating a backup copy of the file first. If the file doesn't
exist, it will be created.

For details about the behaviour, see g_file_replace() which does the same
thing but returns an output stream only.

Note that in many non-local file cases read and write streams are not
supported, so make sure you really need to do read and write streaming,
rather than just opening for reading or writing.

Since: 2.22

</description>
<parameters>
<parameter name="file">
<parameter_description> a #GFile
</parameter_description>
</parameter>
<parameter name="etag">
<parameter_description> an optional &lt;link linkend=&quot;gfile-etag&quot;&gt;entity tag&lt;/link&gt; for the
current #GFile, or #NULL to ignore
</parameter_description>
</parameter>
<parameter name="make_backup">
<parameter_description> %TRUE if a backup should be created
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCreateFlags
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileIOStream or %NULL on error.
Free the returned object with g_object_unref().

</return>
</function>

<function name="g_file_replace_readwrite_async">
<description>
Asynchronously overwrites the file in read-write mode, replacing the
contents, possibly creating a backup copy of the file first.

For more details, see g_file_replace_readwrite() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then
call g_file_replace_readwrite_finish() to get the result of the operation.

Since: 2.22

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="etag">
<parameter_description> an &lt;link linkend=&quot;gfile-etag&quot;&gt;entity tag&lt;/link&gt; for the
current #GFile, or NULL to ignore.
</parameter_description>
</parameter>
<parameter name="make_backup">
<parameter_description> %TRUE if a backup should be created.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCreateFlags.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt;
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_replace_readwrite_finish">
<description>
Finishes an asynchronous file replace operation started with
g_file_replace_readwrite_async().

Since: 2.22

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileIOStream, or %NULL on error.
Free the returned object with g_object_unref().

</return>
</function>

<function name="g_file_resolve_relative_path">
<description>
Resolves a relative path for @file to an absolute path.

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="relative_path">
<parameter_description> a given relative path string.
</parameter_description>
</parameter>
</parameters>
<return> #GFile to the resolved path. %NULL if @relative_path 
is %NULL or if @file is invalid.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_set_attribute">
<description>
Sets an attribute in the file with attribute name @attribute to @value.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a string containing the attribute's name.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> The type of the attribute
</parameter_description>
</parameter>
<parameter name="value_p">
<parameter_description> a pointer to the value (or the pointer itself if the type is a pointer type)
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the attribute was set, %FALSE otherwise.
</return>
</function>

<function name="g_file_set_attribute_byte_string">
<description>
Sets @attribute of type %G_FILE_ATTRIBUTE_TYPE_BYTE_STRING to @value. 
If @attribute is of a different type, this operation will fail, 
returning %FALSE. 

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a string containing the attribute's name.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a string containing the attribute's new value.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @attribute was successfully set to @value 
in the @file, %FALSE otherwise.
</return>
</function>

<function name="g_file_set_attribute_int32">
<description>
Sets @attribute of type %G_FILE_ATTRIBUTE_TYPE_INT32 to @value. 
If @attribute is of a different type, this operation will fail.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a string containing the attribute's name.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #gint32 containing the attribute's new value.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @attribute was successfully set to @value 
in the @file, %FALSE otherwise. 
</return>
</function>

<function name="g_file_set_attribute_int64">
<description>
Sets @attribute of type %G_FILE_ATTRIBUTE_TYPE_INT64 to @value. 
If @attribute is of a different type, this operation will fail.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a string containing the attribute's name.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #guint64 containing the attribute's new value.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @attribute was successfully set, %FALSE otherwise.
</return>
</function>

<function name="g_file_set_attribute_string">
<description>
Sets @attribute of type %G_FILE_ATTRIBUTE_TYPE_STRING to @value. 
If @attribute is of a different type, this operation will fail.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a string containing the attribute's name.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a string containing the attribute's value.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @attribute was successfully set, %FALSE otherwise.
</return>
</function>

<function name="g_file_set_attribute_uint32">
<description>
Sets @attribute of type %G_FILE_ATTRIBUTE_TYPE_UINT32 to @value. 
If @attribute is of a different type, this operation will fail.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a string containing the attribute's name.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #guint32 containing the attribute's new value.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @attribute was successfully set to @value 
in the @file, %FALSE otherwise.
</return>
</function>

<function name="g_file_set_attribute_uint64">
<description>
Sets @attribute of type %G_FILE_ATTRIBUTE_TYPE_UINT64 to @value. 
If @attribute is of a different type, this operation will fail.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile. 
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a string containing the attribute's name.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #guint64 containing the attribute's new value.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @attribute was successfully set to @value 
in the @file, %FALSE otherwise.
</return>
</function>

<function name="g_file_set_attributes_async">
<description>
Asynchronously sets the attributes of @file with @info.

For more details, see g_file_set_attributes_from_info() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then call
g_file_set_attributes_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt; 
of the request. 
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback. 
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> a #gpointer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_set_attributes_finish">
<description>
Finishes setting an attribute started in g_file_set_attributes_async().


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the attributes were set correctly, %FALSE otherwise.
</return>
</function>

<function name="g_file_set_attributes_from_info">
<description>
Tries to set all attributes in the #GFileInfo on the target values, 
not stopping on the first error.

If there is any error during this operation then @error will be set to
the first error. Error on particular fields are flagged by setting 
the &quot;status&quot; field in the attribute value to 
%G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING, which means you can also detect
further errors.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> #GFileQueryInfoFlags
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL 
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there was any error, %FALSE otherwise.
</return>
</function>

<function name="g_file_set_display_name">
<description>
Renames @file to the specified display name.

The display name is converted from UTF8 to the correct encoding for the target
filesystem if possible and the @file is renamed to this.

If you want to implement a rename operation in the user interface the edit name
(#G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME) should be used as the initial value in the rename
widget, and then the result after editing should be passed to g_file_set_display_name().

On success the resulting converted filename is returned.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="display_name">
<parameter_description> a string.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFile specifying what @file was renamed to, or %NULL 
if there was an error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_set_display_name_async">
<description>
Asynchronously sets the display name for a given #GFile.

For more details, see g_file_set_display_name() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then call
g_file_set_display_name_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="display_name">
<parameter_description> a string.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt; 
of the request. 
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_set_display_name_finish">
<description>
Finishes setting a display name started with 
g_file_set_display_name_async().


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFile or %NULL on error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_start_mountable">
<description>
Starts a file of type G_FILE_TYPE_MOUNTABLE.
Using @start_operation, you can request callbacks when, for instance,
passwords are needed during authentication.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.

When the operation is finished, @callback will be called. You can then call
g_file_mount_mountable_finish() to get the result of the operation.

Since: 2.22

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the operation
</parameter_description>
</parameter>
<parameter name="start_operation">
<parameter_description> a #GMountOperation, or %NULL to avoid user interaction.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_start_mountable_finish">
<description>
Finishes a start operation. See g_file_start_mountable() for details.

Finish an asynchronous start operation that was started
with g_file_start_mountable().

Since: 2.22

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the operation finished successfully. %FALSE
otherwise.

</return>
</function>

<function name="g_file_stop_mountable">
<description>
Stops a file of type G_FILE_TYPE_MOUNTABLE.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.

When the operation is finished, @callback will be called. You can then call
g_file_stop_mountable_finish() to get the result of the operation.

Since: 2.22

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the operation
</parameter_description>
</parameter>
<parameter name="mount_operation">
<parameter_description> a #GMountOperation, or %NULL to avoid user interaction.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_stop_mountable_finish">
<description>
Finishes an stop operation, see g_file_stop_mountable() for details.

Finish an asynchronous stop operation that was started
with g_file_stop_mountable().

Since: 2.22

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the operation finished successfully. %FALSE
otherwise.

</return>
</function>

<function name="g_file_supports_thread_contexts">
<description>
Checks if @file supports &lt;link
linkend=&quot;g-main-context-push-thread-default-context&quot;&gt;thread-default
contexts&lt;/link&gt;. If this returns %FALSE, you cannot perform
asynchronous operations on @file in a thread that has a
thread-default context.

Since: 2.22

</description>
<parameters>
<parameter name="file">
<parameter_description> a #GFile.
</parameter_description>
</parameter>
</parameters>
<return> Whether or not @file supports thread-default contexts.

</return>
</function>

<function name="g_file_trash">
<description>
Sends @file to the &quot;Trashcan&quot;, if possible. This is similar to
deleting it, but the user can recover it before emptying the trashcan.
Not all file systems support trashing, so this call can return the
%G_IO_ERROR_NOT_SUPPORTED error.


If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> #GFile to send to trash.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on successful trash, %FALSE otherwise.
</return>
</function>

<function name="g_file_unmount_mountable">
<description>
Unmounts a file of type G_FILE_TYPE_MOUNTABLE.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.

When the operation is finished, @callback will be called. You can then call
g_file_unmount_mountable_finish() to get the result of the operation.

Deprecated: 2.22: Use g_file_unmount_mountable_with_operation() instead.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the operation
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_unmount_mountable_finish">
<description>
Finishes an unmount operation, see g_file_unmount_mountable() for details.

Finish an asynchronous unmount operation that was started 
with g_file_unmount_mountable().

Deprecated: 2.22: Use g_file_unmount_mountable_with_operation_finish() instead.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the operation finished successfully. %FALSE
otherwise.

</return>
</function>

<function name="g_file_unmount_mountable_with_operation">
<description>
Unmounts a file of type G_FILE_TYPE_MOUNTABLE.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.

When the operation is finished, @callback will be called. You can then call
g_file_unmount_mountable_finish() to get the result of the operation.

Since: 2.22

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the operation
</parameter_description>
</parameter>
<parameter name="mount_operation">
<parameter_description> a #GMountOperation, or %NULL to avoid user interaction.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_unmount_mountable_with_operation_finish">
<description>
Finishes an unmount operation, see g_file_unmount_mountable_with_operation() for details.

Finish an asynchronous unmount operation that was started
with g_file_unmount_mountable_with_operation().

Since: 2.22

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the operation finished successfully. %FALSE
otherwise.

</return>
</function>

<function name="g_filename_completer_get_completion_suffix">
<description>
Obtains a completion for @initial_text from @completer.


</description>
<parameters>
<parameter name="completer">
<parameter_description> the filename completer.
</parameter_description>
</parameter>
<parameter name="initial_text">
<parameter_description> text to be completed.
</parameter_description>
</parameter>
</parameters>
<return> a completed string, or %NULL if no completion exists. 
This string is not owned by GIO, so remember to g_free() it 
when finished.
</return>
</function>

<function name="g_filename_completer_get_completions">
<description>
Gets an array of completion strings for a given initial text.


</description>
<parameters>
<parameter name="completer">
<parameter_description> the filename completer.
</parameter_description>
</parameter>
<parameter name="initial_text">
<parameter_description> text to be completed.
</parameter_description>
</parameter>
</parameters>
<return> array of strings with possible completions for @initial_text.
This array must be freed by g_strfreev() when finished. 
</return>
</function>

<function name="g_filename_completer_new">
<description>
Creates a new filename completer.


</description>
<parameters>
</parameters>
<return> a #GFilenameCompleter.
</return>
</function>

<function name="g_filename_completer_set_dirs_only">
<description>
If @dirs_only is %TRUE, @completer will only 
complete directory names, and not file names.

</description>
<parameters>
<parameter name="completer">
<parameter_description> the filename completer.
</parameter_description>
</parameter>
<parameter name="dirs_only">
<parameter_description> a #gboolean.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_filter_input_stream_get_base_stream">
<description>
Gets the base stream for the filter stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFilterInputStream.
</parameter_description>
</parameter>
</parameters>
<return> a #GInputStream.
</return>
</function>

<function name="g_filter_input_stream_get_close_base_stream">
<description>
Returns whether the base stream will be closed when @stream is
closed.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFilterInputStream.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the base stream will be closed.
</return>
</function>

<function name="g_filter_input_stream_set_close_base_stream">
<description>
Sets whether the base stream will be closed when @stream is closed.

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFilterInputStream.
</parameter_description>
</parameter>
<parameter name="close_base">
<parameter_description> %TRUE to close the base stream.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_filter_output_stream_get_base_stream">
<description>
Gets the base stream for the filter stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFilterOutputStream.
</parameter_description>
</parameter>
</parameters>
<return> a #GOutputStream.
</return>
</function>

<function name="g_filter_output_stream_get_close_base_stream">
<description>
Returns whether the base stream will be closed when @stream is
closed.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFilterOutputStream.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the base stream will be closed.
</return>
</function>

<function name="g_filter_output_stream_set_close_base_stream">
<description>
Sets whether the base stream will be closed when @stream is closed.

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFilterOutputStream.
</parameter_description>
</parameter>
<parameter name="close_base">
<parameter_description> %TRUE to close the base stream.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_icon_equal">
<description>
Checks if two icons are equal.


</description>
<parameters>
<parameter name="icon1">
<parameter_description> pointer to the first #GIcon.
</parameter_description>
</parameter>
<parameter name="icon2">
<parameter_description> pointer to the second #GIcon.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @icon1 is equal to @icon2. %FALSE otherwise.
</return>
</function>

<function name="g_icon_hash">
<description>
Gets a hash for an icon.

Virtual: hash

</description>
<parameters>
<parameter name="icon">
<parameter_description> #gconstpointer to an icon object.
</parameter_description>
</parameter>
</parameters>
<return> a #guint containing a hash for the @icon, suitable for 
use in a #GHashTable or similar data structure.
</return>
</function>

<function name="g_icon_new_for_string">
<description>
Generate a #GIcon instance from @str. This function can fail if
@str is not valid - see g_icon_to_string() for discussion.

If your application or library provides one or more #GIcon
implementations you need to ensure that each #GType is registered
with the type system prior to calling g_icon_new_for_string().

Since: 2.20

</description>
<parameters>
<parameter name="str">
<parameter_description> A string obtained via g_icon_to_string().
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error.
</parameter_description>
</parameter>
</parameters>
<return> An object implementing the #GIcon
interface or %NULL if @error is set.

</return>
</function>

<function name="g_icon_to_string">
<description>
Generates a textual representation of @icon that can be used for
serialization such as when passing @icon to a different process or
saving it to persistent storage. Use g_icon_new_for_string() to
get @icon back from the returned string.

The encoding of the returned string is proprietary to #GIcon except
in the following two cases

&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
If @icon is a #GFileIcon, the returned string is a native path
(such as &lt;literal&gt;/path/to/my icon.png&lt;/literal&gt;) without escaping
if the #GFile for @icon is a native file.  If the file is not
native, the returned string is the result of g_file_get_uri()
(such as &lt;literal&gt;sftp://path/to/my%%20icon.png&lt;/literal&gt;).
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
If @icon is a #GThemedIcon with exactly one name, the encoding is
simply the name (such as &lt;literal&gt;network-server&lt;/literal&gt;).
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;

Virtual: to_tokens
Since: 2.20

</description>
<parameters>
<parameter name="icon">
<parameter_description> a #GIcon.
</parameter_description>
</parameter>
</parameters>
<return> An allocated NUL-terminated UTF8 string or %NULL if @icon can't
be serialized. Use g_free() to free.

</return>
</function>

<function name="g_inet_address_get_family">
<description>
Gets @address's family

Since: 2.22

</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetAddress
</parameter_description>
</parameter>
</parameters>
<return> @address's family

</return>
</function>

<function name="g_inet_address_get_is_any">
<description>
Tests whether @address is the &quot;any&quot; address for its family.

Since: 2.22

</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetAddress
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @address is the &quot;any&quot; address for its family.

</return>
</function>

<function name="g_inet_address_get_is_link_local">
<description>
Tests whether @address is a link-local address (that is, if it
identifies a host on a local network that is not connected to the
Internet).

Since: 2.22

</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetAddress
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @address is a link-local address.

</return>
</function>

<function name="g_inet_address_get_is_loopback">
<description>
Tests whether @address is the loopback address for its family.

Since: 2.22

</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetAddress
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @address is the loopback address for its family.

</return>
</function>

<function name="g_inet_address_get_is_mc_global">
<description>
Tests whether @address is a global multicast address.

Since: 2.22

</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetAddress
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @address is a global multicast address.

</return>
</function>

<function name="g_inet_address_get_is_mc_link_local">
<description>
Tests whether @address is a link-local multicast address.

Since: 2.22

</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetAddress
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @address is a link-local multicast address.

</return>
</function>

<function name="g_inet_address_get_is_mc_node_local">
<description>
Tests whether @address is a node-local multicast address.

Since: 2.22

</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetAddress
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @address is a node-local multicast address.

</return>
</function>

<function name="g_inet_address_get_is_mc_org_local">
<description>
Tests whether @address is an organization-local multicast address.

Since: 2.22

</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetAddress
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @address is an organization-local multicast address.

</return>
</function>

<function name="g_inet_address_get_is_mc_site_local">
<description>
Tests whether @address is a site-local multicast address.

Since: 2.22

</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetAddress
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @address is a site-local multicast address.

</return>
</function>

<function name="g_inet_address_get_is_multicast">
<description>
Tests whether @address is a multicast address.

Since: 2.22

</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetAddress
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @address is a multicast address.

</return>
</function>

<function name="g_inet_address_get_is_site_local">
<description>
Tests whether @address is a site-local address such as 10.0.0.1
(that is, the address identifies a host on a local network that can
not be reached directly from the Internet, but which may have
outgoing Internet connectivity via a NAT or firewall).

Since: 2.22

</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetAddress
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @address is a site-local address.

</return>
</function>

<function name="g_inet_address_get_native_size">
<description>
Gets the size of the native raw binary address for @address. This
is the size of the data that you get from g_inet_address_to_bytes().

Since: 2.22

</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetAddress
</parameter_description>
</parameter>
</parameters>
<return> the number of bytes used for the native version of @address.

</return>
</function>

<function name="g_inet_address_new_any">
<description>
Creates a #GInetAddress for the &quot;any&quot; address (unassigned/&quot;don't
care&quot;) for @family.

Since: 2.22

</description>
<parameters>
<parameter name="family">
<parameter_description> the address family
</parameter_description>
</parameter>
</parameters>
<return> a new #GInetAddress corresponding to the &quot;any&quot; address
for @family.

</return>
</function>

<function name="g_inet_address_new_from_bytes">
<description>
Creates a new #GInetAddress from the given @family and @bytes.
@bytes should be 4 bytes for %G_INET_ADDRESS_IPV4 and 16 bytes for
%G_INET_ADDRESS_IPV6.

Since: 2.22

</description>
<parameters>
<parameter name="bytes">
<parameter_description> raw address data
</parameter_description>
</parameter>
<parameter name="family">
<parameter_description> the address family of @bytes
</parameter_description>
</parameter>
</parameters>
<return> a new #GInetAddress corresponding to @family and @bytes.

</return>
</function>

<function name="g_inet_address_new_from_string">
<description>
Parses @string as an IP address and creates a new #GInetAddress.

Since: 2.22

</description>
<parameters>
<parameter name="string">
<parameter_description> a string representation of an IP address
</parameter_description>
</parameter>
</parameters>
<return> a new #GInetAddress corresponding to @string, or %NULL if
@string could not be parsed.

</return>
</function>

<function name="g_inet_address_new_loopback">
<description>
Creates a #GInetAddress for the loopback address for @family.

Since: 2.22

</description>
<parameters>
<parameter name="family">
<parameter_description> the address family
</parameter_description>
</parameter>
</parameters>
<return> a new #GInetAddress corresponding to the loopback address
for @family.

</return>
</function>

<function name="g_inet_address_to_bytes">
<description>
Gets the raw binary address data from @address.

Since: 2.22

</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetAddress
</parameter_description>
</parameter>
</parameters>
<return> a pointer to an internal array of the bytes in @address,
which should not be modified, stored, or freed. The size of this
array can be gotten with g_inet_address_get_native_size().

</return>
</function>

<function name="g_inet_address_to_string">
<description>
Converts @address to string form.

Since: 2.22

</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetAddress
</parameter_description>
</parameter>
</parameters>
<return> a representation of @address as a string, which should be
freed after use.

</return>
</function>

<function name="g_inet_socket_address_get_address">
<description>
Gets @address's #GInetAddress.

Since: 2.22

</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetSocketAddress
</parameter_description>
</parameter>
</parameters>
<return> the #GInetAddress for @address, which must be
g_object_ref()'d if it will be stored

</return>
</function>

<function name="g_inet_socket_address_get_port">
<description>
Gets @address's port.

Since: 2.22

</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetSocketAddress
</parameter_description>
</parameter>
</parameters>
<return> the port for @address

</return>
</function>

<function name="g_inet_socket_address_new">
<description>
Creates a new #GInetSocketAddress for @address and @port.

Since: 2.22

</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetAddress
</parameter_description>
</parameter>
<parameter name="port">
<parameter_description> a port number
</parameter_description>
</parameter>
</parameters>
<return> a new #GInetSocketAddress

</return>
</function>

<function name="g_initable_init">
<description>
Initializes the object implementing the interface. This must be
done before any real use of the object after initial construction.

Implementations may also support cancellation. If @cancellable is not %NULL,
then initialization can be cancelled by triggering the cancellable object
from another thread. If the operation was cancelled, the error
%G_IO_ERROR_CANCELLED will be returned. If @cancellable is not %NULL and
the object doesn't support cancellable initialization the error
%G_IO_ERROR_NOT_SUPPORTED will be returned.

If this function is not called, or returns with an error then all
operations on the object should fail, generally returning the
error %G_IO_ERROR_NOT_INITIALIZED.

Implementations of this method must be idempotent, i.e. multiple calls
to this function with the same argument should return the same results.
Only the first call initializes the object, further calls return the result
of the first call. This is so that its safe to implement the singleton
pattern in the GObject constructor function.

Since: 2.22

</description>
<parameters>
<parameter name="initable">
<parameter_description> a #GInitable.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful. If an error has occurred, this function will
return %FALSE and set @error appropriately if present.

</return>
</function>

<function name="g_initable_new">
<description>
Helper function for constructing #GInitiable object. This is
similar to g_object_new() but also initializes the object
and returns %NULL, setting an error on failure.

Since: 2.22

</description>
<parameters>
<parameter name="object_type">
<parameter_description> a #GType supporting #GInitable.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to
ignore.
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> the name of the first property, or %NULL if no
properties
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description>  the value if the first property, followed by and other property
value pairs, and ended by %NULL.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GObject, or %NULL on error

</return>
</function>

<function name="g_initable_new_valist">
<description>
Helper function for constructing #GInitiable object. This is
similar to g_object_new_valist() but also initializes the object
and returns %NULL, setting an error on failure.

Since: 2.22

</description>
<parameters>
<parameter name="object_type">
<parameter_description> a #GType supporting #GInitable.
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> the name of the first property, followed by
the value, and other property value pairs, and ended by %NULL.
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> The var args list generated from @first_property_name.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GObject, or %NULL on error

</return>
</function>

<function name="g_initable_newv">
<description>
Helper function for constructing #GInitiable object. This is
similar to g_object_newv() but also initializes the object
and returns %NULL, setting an error on failure.

Since: 2.22

</description>
<parameters>
<parameter name="object_type">
<parameter_description> a #GType supporting #GInitable.
</parameter_description>
</parameter>
<parameter name="n_parameters">
<parameter_description> the number of parameters in @parameters
</parameter_description>
</parameter>
<parameter name="parameters">
<parameter_description> the parameters to use to construct the object
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GObject, or %NULL on error

</return>
</function>

<function name="g_input_stream_clear_pending">
<description>
Clears the pending flag on @stream.

</description>
<parameters>
<parameter name="stream">
<parameter_description> input stream
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_input_stream_close">
<description>
Closes the stream, releasing resources related to it.

Once the stream is closed, all other operations will return %G_IO_ERROR_CLOSED.
Closing a stream multiple times will not return an error.

Streams will be automatically closed when the last reference
is dropped, but you might want to call this function to make sure 
resources are released as early as possible.

Some streams might keep the backing store of the stream (e.g. a file descriptor)
open after the stream is closed. See the documentation for the individual
stream for details.

On failure the first error that happened will be reported, but the close
operation will finish as much as possible. A stream that failed to
close will still return %G_IO_ERROR_CLOSED for all operations. Still, it
is important to check and report the error to the user.

If @cancellable is not NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
Cancelling a close will still leave the stream closed, but some streams
can use a faster close that doesn't block to e.g. check errors. 


</description>
<parameters>
<parameter name="stream">
<parameter_description> A #GInputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on failure
</return>
</function>

<function name="g_input_stream_close_async">
<description>
Requests an asynchronous closes of the stream, releasing resources related to it.
When the operation is finished @callback will be called. 
You can then call g_input_stream_close_finish() to get the result of the 
operation.

For behaviour details see g_input_stream_close().

The asyncronous methods have a default fallback that uses threads to implement
asynchronicity, so they are optional for inheriting classes. However, if you
override one you must override all.

</description>
<parameters>
<parameter name="stream">
<parameter_description> A #GInputStream.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt; 
of the request. 
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional cancellable object
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_input_stream_close_finish">
<description>
Finishes closing a stream asynchronously, started from g_input_stream_close_async().


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GInputStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the stream was closed successfully.
</return>
</function>

<function name="g_input_stream_has_pending">
<description>
Checks if an input stream has pending actions.


</description>
<parameters>
<parameter name="stream">
<parameter_description> input stream.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @stream has pending actions.
</return>
</function>

<function name="g_input_stream_is_closed">
<description>
Checks if an input stream is closed.


</description>
<parameters>
<parameter name="stream">
<parameter_description> input stream.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the stream is closed.
</return>
</function>

<function name="g_input_stream_read">
<description>
Tries to read @count bytes from the stream into the buffer starting at
@buffer. Will block during this read.

If count is zero returns zero and does nothing. A value of @count
larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.

On success, the number of bytes read into the buffer is returned.
It is not an error if this is not the same as the requested size, as it
can happen e.g. near the end of a file. Zero is returned on end of file
(or if @count is zero),  but never otherwise.

If @cancellable is not NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error G_IO_ERROR_CANCELLED will be returned. If an
operation was partially finished when the operation was cancelled the
partial result will be returned, without an error.

On error -1 is returned and @error is set accordingly.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GInputStream.
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a buffer to read data into (which should be at least count bytes long).
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the number of bytes that will be read from the stream
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> Number of bytes read, or -1 on error
</return>
</function>

<function name="g_input_stream_read_all">
<description>
Tries to read @count bytes from the stream into the buffer starting at
@buffer. Will block during this read.

This function is similar to g_input_stream_read(), except it tries to
read as many bytes as requested, only stopping on an error or end of stream.

On a successful read of @count bytes, or if we reached the end of the
stream,  %TRUE is returned, and @bytes_read is set to the number of bytes
read into @buffer.

If there is an error during the operation %FALSE is returned and @error
is set to indicate the error status, @bytes_read is updated to contain
the number of bytes read into @buffer before the error occurred.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GInputStream.
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a buffer to read data into (which should be at least count bytes long).
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the number of bytes that will be read from the stream
</parameter_description>
</parameter>
<parameter name="bytes_read">
<parameter_description> location to store the number of bytes that was read from the stream
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE if there was an error
</return>
</function>

<function name="g_input_stream_read_async">
<description>
Request an asynchronous read of @count bytes from the stream into the buffer
starting at @buffer. When the operation is finished @callback will be called. 
You can then call g_input_stream_read_finish() to get the result of the 
operation.

During an async request no other sync and async calls are allowed on @stream, and will
result in %G_IO_ERROR_PENDING errors. 

A value of @count larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.

On success, the number of bytes read into the buffer will be passed to the
callback. It is not an error if this is not the same as the requested size, as it
can happen e.g. near the end of a file, but generally we try to read
as many bytes as requested. Zero is returned on end of file
(or if @count is zero),  but never otherwise.

Any outstanding i/o request with higher priority (lower numerical value) will
be executed before an outstanding request with lower priority. Default
priority is %G_PRIORITY_DEFAULT.

The asyncronous methods have a default fallback that uses threads to implement
asynchronicity, so they are optional for inheriting classes. However, if you
override one you must override all.

</description>
<parameters>
<parameter name="stream">
<parameter_description> A #GInputStream.
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a buffer to read data into (which should be at least count bytes long).
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the number of bytes that will be read from the stream
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt; 
of the request. 
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_input_stream_read_finish">
<description>
Finishes an asynchronous stream read operation. 


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GInputStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> number of bytes read in, or -1 on error.
</return>
</function>

<function name="g_input_stream_set_pending">
<description>
Sets @stream to have actions pending. If the pending flag is
already set or @stream is closed, it will return %FALSE and set
@error.


</description>
<parameters>
<parameter name="stream">
<parameter_description> input stream
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if pending was previously unset and is now set.
</return>
</function>

<function name="g_input_stream_skip">
<description>
Tries to skip @count bytes from the stream. Will block during the operation.

This is identical to g_input_stream_read(), from a behaviour standpoint,
but the bytes that are skipped are not returned to the user. Some
streams have an implementation that is more efficient than reading the data.

This function is optional for inherited classes, as the default implementation
emulates it using read.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
operation was partially finished when the operation was cancelled the
partial result will be returned, without an error.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GInputStream.
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the number of bytes that will be skipped from the stream
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> Number of bytes skipped, or -1 on error
</return>
</function>

<function name="g_input_stream_skip_async">
<description>
Request an asynchronous skip of @count bytes from the stream.
When the operation is finished @callback will be called.
You can then call g_input_stream_skip_finish() to get the result
of the operation.

During an async request no other sync and async calls are allowed,
and will result in %G_IO_ERROR_PENDING errors.

A value of @count larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.

On success, the number of bytes skipped will be passed to the callback.
It is not an error if this is not the same as the requested size, as it
can happen e.g. near the end of a file, but generally we try to skip
as many bytes as requested. Zero is returned on end of file
(or if @count is zero), but never otherwise.

Any outstanding i/o request with higher priority (lower numerical value)
will be executed before an outstanding request with lower priority.
Default priority is %G_PRIORITY_DEFAULT.

The asynchronous methods have a default fallback that uses threads to
implement asynchronicity, so they are optional for inheriting classes.
However, if you override one, you must override all.

</description>
<parameters>
<parameter name="stream">
<parameter_description> A #GInputStream.
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the number of bytes that will be skipped from the stream
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt;
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_input_stream_skip_finish">
<description>
Finishes a stream skip operation.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GInputStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> the size of the bytes skipped, or %-1 on error.
</return>
</function>

<function name="g_io_error_from_errno">
<description>
Converts errno.h error codes into GIO error codes.


</description>
<parameters>
<parameter name="err_no">
<parameter_description> Error number as defined in errno.h.
</parameter_description>
</parameter>
</parameters>
<return> #GIOErrorEnum value for the given errno.h error number.
</return>
</function>

<function name="g_io_error_from_win32_error">
<description>
Converts some common error codes into GIO error codes. The
fallback value G_IO_ERROR_FAILED is returned for error codes not
handled.

Since: 2.26

</description>
<parameters>
<parameter name="error_code">
<parameter_description> Windows error number.
</parameter_description>
</parameter>
</parameters>
<return> #GIOErrorEnum value for the given error number.

</return>
</function>

<function name="g_io_error_quark">
<description>
Gets the GIO Error Quark.


</description>
<parameters>
</parameters>
<return> a #GQuark.
</return>
</function>

<function name="g_io_extension_get_name">
<description>
Gets the name under which @extension was registered.

Note that the same type may be registered as extension
for multiple extension points, under different names.


</description>
<parameters>
<parameter name="extension">
<parameter_description> a #GIOExtension
</parameter_description>
</parameter>
</parameters>
<return> the name of @extension.
</return>
</function>

<function name="g_io_extension_get_priority">
<description>
Gets the priority with which @extension was registered.


</description>
<parameters>
<parameter name="extension">
<parameter_description> a #GIOExtension
</parameter_description>
</parameter>
</parameters>
<return> the priority of @extension
</return>
</function>

<function name="g_io_extension_get_type">
<description>
Gets the type associated with @extension.


</description>
<parameters>
<parameter name="extension">
<parameter_description> a #GIOExtension
</parameter_description>
</parameter>
</parameters>
<return> the type of @extension
</return>
</function>

<function name="g_io_extension_point_get_extension_by_name">
<description>
Finds a #GIOExtension for an extension point by name.


</description>
<parameters>
<parameter name="extension_point">
<parameter_description> a #GIOExtensionPoint
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the extension to get
</parameter_description>
</parameter>
</parameters>
<return> the #GIOExtension for @extension_point that has the
given name, or %NULL if there is no extension with that name
</return>
</function>

<function name="g_io_extension_point_get_extensions">
<description>
Gets a list of all extensions that implement this extension point.
The list is sorted by priority, beginning with the highest priority.


</description>
<parameters>
<parameter name="extension_point">
<parameter_description> a #GIOExtensionPoint
</parameter_description>
</parameter>
</parameters>
<return> a #GList of
#GIOExtension&lt;!-- --&gt;s. The list is owned by GIO and should not be
modified.
</return>
</function>

<function name="g_io_extension_point_get_required_type">
<description>
Gets the required type for @extension_point.


</description>
<parameters>
<parameter name="extension_point">
<parameter_description> a #GIOExtensionPoint
</parameter_description>
</parameter>
</parameters>
<return> the #GType that all implementations must have, 
or #G_TYPE_INVALID if the extension point has no required type
</return>
</function>

<function name="g_io_extension_point_implement">
<description>
Registers @type as extension for the extension point with name
@extension_point_name. 

If @type has already been registered as an extension for this 
extension point, the existing #GIOExtension object is returned.


</description>
<parameters>
<parameter name="extension_point_name">
<parameter_description> the name of the extension point
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the #GType to register as extension 
</parameter_description>
</parameter>
<parameter name="extension_name">
<parameter_description> the name for the extension
</parameter_description>
</parameter>
<parameter name="priority">
<parameter_description> the priority for the extension
</parameter_description>
</parameter>
</parameters>
<return> a #GIOExtension object for #GType
</return>
</function>

<function name="g_io_extension_point_lookup">
<description>
Looks up an existing extension point.


</description>
<parameters>
<parameter name="name">
<parameter_description> the name of the extension point
</parameter_description>
</parameter>
</parameters>
<return> the #GIOExtensionPoint, or %NULL if there is no
registered extension point with the given name
</return>
</function>

<function name="g_io_extension_point_register">
<description>
Registers an extension point.


</description>
<parameters>
<parameter name="name">
<parameter_description> The name of the extension point
</parameter_description>
</parameter>
</parameters>
<return> the new #GIOExtensionPoint. This object is owned by GIO
and should not be freed
</return>
</function>

<function name="g_io_extension_point_set_required_type">
<description>
Sets the required type for @extension_point to @type. 
All implementations must henceforth have this type.

</description>
<parameters>
<parameter name="extension_point">
<parameter_description> a #GIOExtensionPoint
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the #GType to require
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_io_extension_ref_class">
<description>
Gets a reference to the class for the type that is 
associated with @extension.


</description>
<parameters>
<parameter name="extension">
<parameter_description> a #GIOExtension
</parameter_description>
</parameter>
</parameters>
<return> the #GTypeClass for the type of @extension
</return>
</function>

<function name="g_io_module_new">
<description>
Creates a new GIOModule that will load the specific
shared library when in use.


</description>
<parameters>
<parameter name="filename">
<parameter_description> filename of the shared library module.
</parameter_description>
</parameter>
</parameters>
<return> a #GIOModule from given @filename, 
or %NULL on error.
</return>
</function>

<function name="g_io_modules_load_all_in_directory">
<description>
Loads all the modules in the specified directory.

If don't require all modules to be initialized (and thus registering
all gtypes) then you can use g_io_modules_scan_all_in_directory()
which allows delayed/lazy loading of modules.


</description>
<parameters>
<parameter name="dirname">
<parameter_description> pathname for a directory containing modules to load.
</parameter_description>
</parameter>
</parameters>
<return> a list of #GIOModules loaded
from the directory,
All the modules are loaded into memory, if you want to
unload them (enabling on-demand loading) you must call
g_type_module_unuse() on all the modules. Free the list
with g_list_free().
</return>
</function>

<function name="g_io_modules_scan_all_in_directory">
<description>
Scans all the modules in the specified directory, ensuring that
any extension point implemented by a module is registered.

This may not actually load and initialize all the types in each
module, some modules may be lazily loaded and initialized when
an extension point it implementes is used with e.g.
g_io_extension_point_get_extensions() or
g_io_extension_point_get_extension_by_name().

If you need to guarantee that all types are loaded in all the modules,
use g_io_modules_load_all_in_directory().

Since: 2.24

</description>
<parameters>
<parameter name="dirname">
<parameter_description> pathname for a directory containing modules to scan.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_io_scheduler_cancel_all_jobs">
<description>
Cancels all cancellable I/O jobs. 

A job is cancellable if a #GCancellable was passed into
g_io_scheduler_push_job().

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_io_scheduler_job_send_to_mainloop">
<description>
Used from an I/O job to send a callback to be run in the thread
that the job was started from, waiting for the result (and thus
blocking the I/O job).


</description>
<parameters>
<parameter name="job">
<parameter_description> a #GIOSchedulerJob
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #GSourceFunc callback that will be called in the original thread
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to pass to @func
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> a #GDestroyNotify for @user_data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> The return value of @func
</return>
</function>

<function name="g_io_scheduler_job_send_to_mainloop_async">
<description>
Used from an I/O job to send a callback to be run asynchronously in
the thread that the job was started from. The callback will be run
when the main loop is available, but at that time the I/O job might
have finished. The return value from the callback is ignored.

Note that if you are passing the @user_data from g_io_scheduler_push_job()
on to this function you have to ensure that it is not freed before
@func is called, either by passing %NULL as @notify to 
g_io_scheduler_push_job() or by using refcounting for @user_data.

</description>
<parameters>
<parameter name="job">
<parameter_description> a #GIOSchedulerJob
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #GSourceFunc callback that will be called in the original thread
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to pass to @func
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> a #GDestroyNotify for @user_data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_io_scheduler_push_job">
<description>
Schedules the I/O job to run. 

@notify will be called on @user_data after @job_func has returned,
regardless whether the job was cancelled or has run to completion.

If @cancellable is not %NULL, it can be used to cancel the I/O job
by calling g_cancellable_cancel() or by calling 
g_io_scheduler_cancel_all_jobs().

</description>
<parameters>
<parameter name="job_func">
<parameter_description> a #GIOSchedulerJobFunc.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to pass to @job_func
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> a #GDestroyNotify for @user_data, or %NULL
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;gioscheduler&quot;&gt;I/O priority&lt;/link&gt; 
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_io_stream_clear_pending">
<description>
Clears the pending flag on @stream.

Since: 2.22

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GIOStream
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_io_stream_close">
<description>
Closes the stream, releasing resources related to it. This will also
closes the individual input and output streams, if they are not already
closed.

Once the stream is closed, all other operations will return
%G_IO_ERROR_CLOSED. Closing a stream multiple times will not
return an error.

Closing a stream will automatically flush any outstanding buffers
in the stream.

Streams will be automatically closed when the last reference
is dropped, but you might want to call this function to make sure
resources are released as early as possible.

Some streams might keep the backing store of the stream (e.g. a file
descriptor) open after the stream is closed. See the documentation for
the individual stream for details.

On failure the first error that happened will be reported, but the
close operation will finish as much as possible. A stream that failed
to close will still return %G_IO_ERROR_CLOSED for all operations.
Still, it is important to check and report the error to the user,
otherwise there might be a loss of data as all data might not be written.

If @cancellable is not NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
Cancelling a close will still leave the stream closed, but some streams
can use a faster close that doesn't block to e.g. check errors.

The default implementation of this method just calls close on the
individual input/output streams.

Since: 2.22

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GIOStream
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on failure

</return>
</function>

<function name="g_io_stream_close_async">
<description>
Requests an asynchronous close of the stream, releasing resources
related to it. When the operation is finished @callback will be
called. You can then call g_io_stream_close_finish() to get
the result of the operation.

For behaviour details see g_io_stream_close().

The asynchronous methods have a default fallback that uses threads
to implement asynchronicity, so they are optional for inheriting
classes. However, if you override one you must override all.

Since: 2.22

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GIOStream
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the io priority of the request
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional cancellable object
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_io_stream_close_finish">
<description>
Closes a stream.

Since: 2.22

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GIOStream
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to
ignore
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if stream was successfully closed, %FALSE otherwise.

</return>
</function>

<function name="g_io_stream_get_input_stream">
<description>
Gets the input stream for this object. This is used
for reading.

Since: 2.22

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GIOStream
</parameter_description>
</parameter>
</parameters>
<return> a #GInputStream, owned by the #GIOStream.
Do not free.

</return>
</function>

<function name="g_io_stream_get_output_stream">
<description>
Gets the output stream for this object. This is used for
writing.

Since: 2.22

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GIOStream
</parameter_description>
</parameter>
</parameters>
<return> a #GOutputStream, owned by the #GIOStream.
Do not free.

</return>
</function>

<function name="g_io_stream_has_pending">
<description>
Checks if a stream has pending actions.

Since: 2.22

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GIOStream
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @stream has pending actions.

</return>
</function>

<function name="g_io_stream_is_closed">
<description>
Checks if a stream is closed.

Since: 2.22

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GIOStream
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the stream is closed.

</return>
</function>

<function name="g_io_stream_set_pending">
<description>
Sets @stream to have actions pending. If the pending flag is
already set or @stream is closed, it will return %FALSE and set
@error.

Since: 2.22

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GIOStream
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to
ignore
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if pending was previously unset and is now set.

</return>
</function>

<function name="g_io_stream_splice_async">
<description>
Asyncronously splice the output stream of @stream1 to the input stream of
@stream2, and splice the output stream of @stream2 to the input stream of
@stream1.

When the operation is finished @callback will be called.
You can then call g_io_stream_splice_finish() to get the
result of the operation.

Since: 2.28

</description>
<parameters>
<parameter name="stream1">
<parameter_description> a #GIOStream.
</parameter_description>
</parameter>
<parameter name="stream2">
<parameter_description> a #GIOStream.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GIOStreamSpliceFlags.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the io priority of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_io_stream_splice_finish">
<description>
Finishes an asynchronous io stream splice operation.

Since: 2.28

</description>
<parameters>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE otherwise.

</return>
</function>

<function name="g_keyfile_settings_backend_new">
<description>
Creates a keyfile-backed #GSettingsBackend.

The filename of the keyfile to use is given by @filename.

All settings read to or written from the backend must fall under the
path given in @root_path (which must start and end with a slash and
not contain two consecutive slashes).  @root_path may be &quot;/&quot;.

If @root_group is non-%NULL then it specifies the name of the keyfile
group used for keys that are written directly below @root_path.  For
example, if @root_path is &quot;/apps/example/&quot; and @root_group is
&quot;toplevel&quot;, then settings the key &quot;/apps/example/enabled&quot; to a value
of %TRUE will cause the following to appear in the keyfile:

|[
[toplevel]
enabled=true
]|

If @root_group is %NULL then it is not permitted to store keys
directly below the @root_path.

For keys not stored directly below @root_path (ie: in a sub-path),
the name of the subpath (with the final slash stripped) is used as
the name of the keyfile group.  To continue the example, if
&quot;/apps/example/profiles/default/font-size&quot; were set to
12 then the following would appear in the keyfile:

|[
[profiles/default]
font-size=12
]|

The backend will refuse writes (and return writability as being
%FALSE) for keys outside of @root_path and, in the event that
@root_group is %NULL, also for keys directly under @root_path.
Writes will also be refused if the backend detects that it has the
inability to rewrite the keyfile (ie: the containing directory is not
writable).

There is no checking done for your key namespace clashing with the
syntax of the key file format.  For example, if you have '[' or ']'
characters in your path names or '=' in your key names you may be in
trouble.

</description>
<parameters>
<parameter name="filename">
<parameter_description> the filename of the keyfile
</parameter_description>
</parameter>
<parameter name="root_path">
<parameter_description> the path under which all settings keys appear
</parameter_description>
</parameter>
<parameter name="root_group">
<parameter_description> the group name corresponding to
@root_path, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a keyfile-backed #GSettingsBackend
</return>
</function>

<function name="g_loadable_icon_load">
<description>
Loads a loadable icon. For the asynchronous version of this function, 
see g_loadable_icon_load_async().


</description>
<parameters>
<parameter name="icon">
<parameter_description> a #GLoadableIcon.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> an integer.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a location to store the type of the
loaded icon, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GInputStream to read the icon from.
</return>
</function>

<function name="g_loadable_icon_load_async">
<description>
Loads an icon asynchronously. To finish this function, see 
g_loadable_icon_load_finish(). For the synchronous, blocking 
version of this function, see g_loadable_icon_load().

</description>
<parameters>
<parameter name="icon">
<parameter_description> a #GLoadableIcon.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> an integer.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the
request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_loadable_icon_load_finish">
<description>
Finishes an asynchronous icon load started in g_loadable_icon_load_async().


</description>
<parameters>
<parameter name="icon">
<parameter_description> a #GLoadableIcon.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a location to store the type of the loaded icon, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GInputStream to read the icon from.
</return>
</function>

<function name="g_local_vfs_new">
<description>
Returns a new #GVfs handle for a local vfs.


</description>
<parameters>
</parameters>
<return> a new #GVfs handle.
</return>
</function>

<function name="g_memory_input_stream_add_data">
<description>
Appends @data to data that can be read from the input stream

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GMemoryInputStream
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> input data
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> length of the data, may be -1 if @data is a nul-terminated string
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> function that is called to free @data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_memory_input_stream_new">
<description>
Creates a new empty #GMemoryInputStream. 


</description>
<parameters>
</parameters>
<return> a new #GInputStream
</return>
</function>

<function name="g_memory_input_stream_new_from_data">
<description>
Creates a new #GMemoryInputStream with data in memory of a given size.


</description>
<parameters>
<parameter name="data">
<parameter_description> input data
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> length of the data, may be -1 if @data is a nul-terminated string
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> function that is called to free @data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> new #GInputStream read from @data of @len bytes.
</return>
</function>

<function name="g_memory_output_stream_get_data">
<description>
Gets any loaded data from the @ostream.

Note that the returned pointer may become invalid on the next
write or truncate operation on the stream.


</description>
<parameters>
<parameter name="ostream">
<parameter_description> a #GMemoryOutputStream
</parameter_description>
</parameter>
</parameters>
<return> pointer to the stream's data
</return>
</function>

<function name="g_memory_output_stream_get_data_size">
<description>
Returns the number of bytes from the start up
to including the last byte written in the stream
that has not been truncated away.

Since: 2.18

</description>
<parameters>
<parameter name="ostream">
<parameter_description> a #GMemoryOutputStream
</parameter_description>
</parameter>
</parameters>
<return> the number of bytes written to the stream

</return>
</function>

<function name="g_memory_output_stream_get_size">
<description>
Gets the size of the currently allocated data area (available from
g_memory_output_stream_get_data()). If the stream isn't
growable (no realloc was passed to g_memory_output_stream_new()) then
this is the maximum size of the stream and further writes
will return %G_IO_ERROR_NO_SPACE.

Note that for growable streams the returned size may become invalid on
the next write or truncate operation on the stream.

If you want the number of bytes currently written to the stream, use
g_memory_output_stream_get_data_size().


</description>
<parameters>
<parameter name="ostream">
<parameter_description> a #GMemoryOutputStream
</parameter_description>
</parameter>
</parameters>
<return> the number of bytes allocated for the data buffer
</return>
</function>

<function name="g_memory_output_stream_new">
<description>
Creates a new #GMemoryOutputStream.

If @data is non-%NULL, the stream  will use that for its internal storage.
If @realloc_fn is non-%NULL, it will be used for resizing the internal
storage when necessary. To construct a fixed-size output stream,
pass %NULL as @realloc_fn.

|[
/ * a stream that can grow * /
stream = g_memory_output_stream_new (NULL, 0, realloc, free);

/ * another stream that can grow * /
stream2 = g_memory_output_stream_new (NULL, 0, g_realloc, g_free);

/ * a fixed-size stream * /
data = malloc (200);
stream3 = g_memory_output_stream_new (data, 200, NULL, free);
]|


</description>
<parameters>
<parameter name="data">
<parameter_description> pointer to a chunk of memory to use, or %NULL
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
<parameter name="realloc_function">
<parameter_description> a function with realloc() semantics (like g_realloc())
to be called when @data needs to be grown, or %NULL
</parameter_description>
</parameter>
<parameter name="destroy_function">
<parameter_description> a function to be called on @data when the stream is
finalized, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> A newly created #GMemoryOutputStream object.
</return>
</function>

<function name="g_memory_output_stream_steal_data">
<description>
Gets any loaded data from the @ostream. Ownership of the data
is transferred to the caller; when no longer needed it must be
freed using the free function set in @ostream's
#GMemoryOutputStream:destroy-function property.

@ostream must be closed before calling this function.

Since: 2.26

</description>
<parameters>
<parameter name="ostream">
<parameter_description> a #GMemoryOutputStream
</parameter_description>
</parameter>
</parameters>
<return> the stream's data

</return>
</function>

<function name="g_memory_settings_backend_new">
<description>
Creates a memory-backed #GSettingsBackend.

This backend allows changes to settings, but does not write them
to any backing storage, so the next time you run your application,
the memory backend will start out with the default values again.

Since: 2.28

</description>
<parameters>
</parameters>
<return> a newly created #GSettingsBackend

</return>
</function>

<function name="g_mount_can_eject">
<description>
Checks if @mount can be eject.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @mount can be ejected.
</return>
</function>

<function name="g_mount_can_unmount">
<description>
Checks if @mount can be mounted.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @mount can be unmounted.
</return>
</function>

<function name="g_mount_eject">
<description>
Ejects a mount. This is an asynchronous operation, and is 
finished by calling g_mount_eject_finish() with the @mount 
and #GAsyncResult data returned in the @callback.

Deprecated: 2.22: Use g_mount_eject_with_operation() instead.

</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the unmount if required for eject
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_eject_finish">
<description>
Finishes ejecting a mount. If any errors occurred during the operation, 
@error will be set to contain the errors and %FALSE will be returned.

Deprecated: 2.22: Use g_mount_eject_with_operation_finish() instead.

</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the mount was successfully ejected. %FALSE otherwise.

</return>
</function>

<function name="g_mount_eject_with_operation">
<description>
Ejects a mount. This is an asynchronous operation, and is
finished by calling g_mount_eject_with_operation_finish() with the @mount
and #GAsyncResult data returned in the @callback.

Since: 2.22

</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the unmount if required for eject
</parameter_description>
</parameter>
<parameter name="mount_operation">
<parameter_description> a #GMountOperation or %NULL to avoid
user interaction.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_eject_with_operation_finish">
<description>
Finishes ejecting a mount. If any errors occurred during the operation,
@error will be set to contain the errors and %FALSE will be returned.

Since: 2.22

</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the mount was successfully ejected. %FALSE otherwise.

</return>
</function>

<function name="g_mount_get_default_location">
<description>
Gets the default location of @mount. The default location of the given
@mount is a path that reflects the main entry point for the user (e.g.
the home directory, or the root of the volume).


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
</parameters>
<return> a #GFile.
The returned object should be unreffed with
g_object_unref() when no longer needed.
</return>
</function>

<function name="g_mount_get_drive">
<description>
Gets the drive for the @mount.

This is a convenience method for getting the #GVolume and then
using that object to get the #GDrive.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
</parameters>
<return> a #GDrive or %NULL if @mount is not associated with a volume or a drive.
The returned object should be unreffed with 
g_object_unref() when no longer needed.
</return>
</function>

<function name="g_mount_get_icon">
<description>
Gets the icon for @mount.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
</parameters>
<return> a #GIcon.
The returned object should be unreffed with 
g_object_unref() when no longer needed.
</return>
</function>

<function name="g_mount_get_name">
<description>
Gets the name of @mount.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
</parameters>
<return> the name for the given @mount. 
The returned string should be freed with g_free()
when no longer needed.
</return>
</function>

<function name="g_mount_get_root">
<description>
Gets the root directory on @mount.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
</parameters>
<return> a #GFile. 
The returned object should be unreffed with 
g_object_unref() when no longer needed.
</return>
</function>

<function name="g_mount_get_uuid">
<description>
Gets the UUID for the @mount. The reference is typically based on
the file system UUID for the mount in question and should be
considered an opaque string. Returns %NULL if there is no UUID
available.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
</parameters>
<return> the UUID for @mount or %NULL if no UUID can be computed.
The returned string should be freed with g_free()
when no longer needed.
</return>
</function>

<function name="g_mount_get_volume">
<description>
Gets the volume for the @mount.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
</parameters>
<return> a #GVolume or %NULL if @mount is not associated with a volume.
The returned object should be unreffed with 
g_object_unref() when no longer needed.
</return>
</function>

<function name="g_mount_guess_content_type">
<description>
Tries to guess the type of content stored on @mount. Returns one or
more textual identifiers of well-known content types (typically
prefixed with &quot;x-content/&quot;), e.g. x-content/image-dcf for camera 
memory cards. See the &lt;ulink url=&quot;http://www.freedesktop.org/wiki/Specifications/shared-mime-info-spec&quot;&gt;shared-mime-info&lt;/ulink&gt;
specification for more on x-content types.

This is an asynchronous operation (see
g_mount_guess_content_type_sync() for the synchronous version), and
is finished by calling g_mount_guess_content_type_finish() with the
@mount and #GAsyncResult data returned in the @callback.

Since: 2.18

</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount
</parameter_description>
</parameter>
<parameter name="force_rescan">
<parameter_description> Whether to force a rescan of the content. 
Otherwise a cached result will be used if available
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_guess_content_type_finish">
<description>
Finishes guessing content types of @mount. If any errors occured
during the operation, @error will be set to contain the errors and
%FALSE will be returned. In particular, you may get an 
%G_IO_ERROR_NOT_SUPPORTED if the mount does not support content 
guessing.

Since: 2.18

</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore
</parameter_description>
</parameter>
</parameters>
<return> a %NULL-terminated array of content types or %NULL on error. 
Caller should free this array with g_strfreev() when done with it.

</return>
</function>

<function name="g_mount_guess_content_type_sync">
<description>
Tries to guess the type of content stored on @mount. Returns one or
more textual identifiers of well-known content types (typically
prefixed with &quot;x-content/&quot;), e.g. x-content/image-dcf for camera 
memory cards. See the &lt;ulink url=&quot;http://www.freedesktop.org/wiki/Specifications/shared-mime-info-spec&quot;&gt;shared-mime-info&lt;/ulink&gt;
specification for more on x-content types.

This is an synchronous operation and as such may block doing IO;
see g_mount_guess_content_type() for the asynchronous version.

Since: 2.18

</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount
</parameter_description>
</parameter>
<parameter name="force_rescan">
<parameter_description> Whether to force a rescan of the content.
Otherwise a cached result will be used if available
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to
ignore
</parameter_description>
</parameter>
</parameters>
<return> a %NULL-terminated array of content types or %NULL on error.
Caller should free this array with g_strfreev() when done with it.

</return>
</function>

<function name="g_mount_is_shadowed">
<description>
Determines if @mount is shadowed. Applications or libraries should
avoid displaying @mount in the user interface if it is shadowed.

A mount is said to be shadowed if there exists one or more user
visible objects (currently #GMount objects) with a root that is
inside the root of @mount.

One application of shadow mounts is when exposing a single file
system that is used to address several logical volumes. In this
situation, a #GVolumeMonitor implementation would create two
#GVolume objects (for example, one for the camera functionality of
the device and one for a SD card reader on the device) with
activation URIs &lt;literal&gt;gphoto2://[usb:001,002]/store1/&lt;/literal&gt;
and &lt;literal&gt;gphoto2://[usb:001,002]/store2/&lt;/literal&gt;. When the
underlying mount (with root
&lt;literal&gt;gphoto2://[usb:001,002]/&lt;/literal&gt;) is mounted, said
#GVolumeMonitor implementation would create two #GMount objects
(each with their root matching the corresponding volume activation
root) that would shadow the original mount.

The proxy monitor in GVfs 2.26 and later, automatically creates and
manage shadow mounts (and shadows the underlying mount) if the
activation root on a #GVolume is set.

Since: 2.20

</description>
<parameters>
<parameter name="mount">
<parameter_description> A #GMount.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @mount is shadowed.

</return>
</function>

<function name="g_mount_operation_get_anonymous">
<description>
Check to see whether the mount operation is being used 
for an anonymous user.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if mount operation is anonymous. 
</return>
</function>

<function name="g_mount_operation_get_choice">
<description>
Gets a choice from the mount operation.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
</parameters>
<return> an integer containing an index of the user's choice from 
the choice's list, or %0.
</return>
</function>

<function name="g_mount_operation_get_domain">
<description>
Gets the domain of the mount operation.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
</parameters>
<return> a string set to the domain. 
</return>
</function>

<function name="g_mount_operation_get_password">
<description>
Gets a password from the mount operation. 


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the password within @op.
</return>
</function>

<function name="g_mount_operation_get_password_save">
<description>
Gets the state of saving passwords for the mount operation.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
</parameters>
<return> a #GPasswordSave flag. 
</return>
</function>

<function name="g_mount_operation_get_username">
<description>
Get the user name from the mount operation.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the user name.
</return>
</function>

<function name="g_mount_operation_new">
<description>
Creates a new mount operation.


</description>
<parameters>
</parameters>
<return> a #GMountOperation.
</return>
</function>

<function name="g_mount_operation_reply">
<description>
Emits the #GMountOperation::reply signal.

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GMountOperationResult
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_operation_set_anonymous">
<description>
Sets the mount operation to use an anonymous user if @anonymous is %TRUE.

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
<parameter name="anonymous">
<parameter_description> boolean value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_operation_set_choice">
<description>
Sets a default choice for the mount operation.

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
<parameter name="choice">
<parameter_description> an integer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_operation_set_domain">
<description>
Sets the mount operation's domain. 

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> the domain to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_operation_set_password">
<description>
Sets the mount operation's password to @password.  


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
<parameter name="password">
<parameter_description> password to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_operation_set_password_save">
<description>
Sets the state of saving passwords for the mount operation.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
<parameter name="save">
<parameter_description> a set of #GPasswordSave flags.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_operation_set_username">
<description>
Sets the user name within @op to @username.

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
<parameter name="username">
<parameter_description> input username.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_remount">
<description>
Remounts a mount. This is an asynchronous operation, and is 
finished by calling g_mount_remount_finish() with the @mount 
and #GAsyncResults data returned in the @callback.

Remounting is useful when some setting affecting the operation
of the volume has been changed, as these may need a remount to
take affect. While this is semantically equivalent with unmounting
and then remounting not all backends might need to actually be
unmounted.

</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the operation
</parameter_description>
</parameter>
<parameter name="mount_operation">
<parameter_description> a #GMountOperation or %NULL to avoid
user interaction.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_remount_finish">
<description>
Finishes remounting a mount. If any errors occurred during the operation, 
@error will be set to contain the errors and %FALSE will be returned.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the mount was successfully remounted. %FALSE otherwise.
</return>
</function>

<function name="g_mount_shadow">
<description>
Increments the shadow count on @mount. Usually used by
#GVolumeMonitor implementations when creating a shadow mount for
@mount, see g_mount_is_shadowed() for more information. The caller
will need to emit the #GMount::changed signal on @mount manually.

Since: 2.20

</description>
<parameters>
<parameter name="mount">
<parameter_description> A #GMount.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_unmount">
<description>
Unmounts a mount. This is an asynchronous operation, and is 
finished by calling g_mount_unmount_finish() with the @mount 
and #GAsyncResult data returned in the @callback.

Deprecated: 2.22: Use g_mount_unmount_with_operation() instead.

</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the operation
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_unmount_finish">
<description>
Finishes unmounting a mount. If any errors occurred during the operation, 
@error will be set to contain the errors and %FALSE will be returned.

Deprecated: 2.22: Use g_mount_unmount_with_operation_finish() instead.

</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the mount was successfully unmounted. %FALSE otherwise.

</return>
</function>

<function name="g_mount_unmount_with_operation">
<description>
Unmounts a mount. This is an asynchronous operation, and is
finished by calling g_mount_unmount_with_operation_finish() with the @mount 
and #GAsyncResult data returned in the @callback.

Since: 2.22

</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the operation
</parameter_description>
</parameter>
<parameter name="mount_operation">
<parameter_description> a #GMountOperation or %NULL to avoid
user interaction.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_unmount_with_operation_finish">
<description>
Finishes unmounting a mount. If any errors occurred during the operation,
@error will be set to contain the errors and %FALSE will be returned.

Since: 2.22

</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the mount was successfully unmounted. %FALSE otherwise.

</return>
</function>

<function name="g_mount_unshadow">
<description>
Decrements the shadow count on @mount. Usually used by
#GVolumeMonitor implementations when destroying a shadow mount for
@mount, see g_mount_is_shadowed() for more information. The caller
will need to emit the #GMount::changed signal on @mount manually.

Since: 2.20

</description>
<parameters>
<parameter name="mount">
<parameter_description> A #GMount.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_network_address_get_hostname">
<description>
Gets @addr's hostname. This might be either UTF-8 or ASCII-encoded,
depending on what @addr was created with.

Since: 2.22

</description>
<parameters>
<parameter name="addr">
<parameter_description> a #GNetworkAddress
</parameter_description>
</parameter>
</parameters>
<return> @addr's hostname

</return>
</function>

<function name="g_network_address_get_port">
<description>
Gets @addr's port number

Since: 2.22

</description>
<parameters>
<parameter name="addr">
<parameter_description> a #GNetworkAddress
</parameter_description>
</parameter>
</parameters>
<return> @addr's port (which may be 0)

</return>
</function>

<function name="g_network_address_get_scheme">
<description>
Gets @addr's scheme

Since: 2.26

</description>
<parameters>
<parameter name="addr">
<parameter_description> a #GNetworkAddress
</parameter_description>
</parameter>
</parameters>
<return> @addr's scheme (%NULL if not built from URI)

</return>
</function>

<function name="g_network_address_new">
<description>
Creates a new #GSocketConnectable for connecting to the given
@hostname and @port.

Since: 2.22

</description>
<parameters>
<parameter name="hostname">
<parameter_description> the hostname
</parameter_description>
</parameter>
<parameter name="port">
<parameter_description> the port
</parameter_description>
</parameter>
</parameters>
<return> the new #GNetworkAddress

</return>
</function>

<function name="g_network_address_parse">
<description>
Creates a new #GSocketConnectable for connecting to the given
@hostname and @port. May fail and return %NULL in case
parsing @host_and_port fails.

@host_and_port may be in any of a number of recognised formats; an IPv6
address, an IPv4 address, or a domain name (in which case a DNS
lookup is performed). Quoting with [] is supported for all address
types. A port override may be specified in the usual way with a
colon. Ports may be given as decimal numbers or symbolic names (in
which case an /etc/services lookup is performed).

If no port is specified in @host_and_port then @default_port will be
used as the port number to connect to.

In general, @host_and_port is expected to be provided by the user
(allowing them to give the hostname, and a port overide if necessary)
and @default_port is expected to be provided by the application.

Since: 2.22

</description>
<parameters>
<parameter name="host_and_port">
<parameter_description> the hostname and optionally a port
</parameter_description>
</parameter>
<parameter name="default_port">
<parameter_description> the default port if not in @host_and_port
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a pointer to a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the new #GNetworkAddress, or %NULL on error

</return>
</function>

<function name="g_network_address_parse_uri">
<description>
Creates a new #GSocketConnectable for connecting to the given
@uri. May fail and return %NULL in case parsing @uri fails.

Using this rather than g_network_address_new() or
g_network_address_parse_host() allows #GSocketClient to determine
when to use application-specific proxy protocols.

Since: 2.26

</description>
<parameters>
<parameter name="uri">
<parameter_description> the hostname and optionally a port
</parameter_description>
</parameter>
<parameter name="default_port">
<parameter_description> The default port if none is found in the URI
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a pointer to a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the new #GNetworkAddress, or %NULL on error

</return>
</function>

<function name="g_network_service_get_domain">
<description>
Gets the domain that @srv serves. This might be either UTF-8 or
ASCII-encoded, depending on what @srv was created with.

Since: 2.22

</description>
<parameters>
<parameter name="srv">
<parameter_description> a #GNetworkService
</parameter_description>
</parameter>
</parameters>
<return> @srv's domain name

</return>
</function>

<function name="g_network_service_get_protocol">
<description>
Gets @srv's protocol name (eg, &quot;tcp&quot;).

Since: 2.22

</description>
<parameters>
<parameter name="srv">
<parameter_description> a #GNetworkService
</parameter_description>
</parameter>
</parameters>
<return> @srv's protocol name

</return>
</function>

<function name="g_network_service_get_scheme">
<description>
Get's the URI scheme used to resolve proxies. By default, the service name
is used as scheme.

Since: 2.26

</description>
<parameters>
<parameter name="srv">
<parameter_description> a #GNetworkService
</parameter_description>
</parameter>
</parameters>
<return> @srv's scheme name

</return>
</function>

<function name="g_network_service_get_service">
<description>
Gets @srv's service name (eg, &quot;ldap&quot;).

Since: 2.22

</description>
<parameters>
<parameter name="srv">
<parameter_description> a #GNetworkService
</parameter_description>
</parameter>
</parameters>
<return> @srv's service name

</return>
</function>

<function name="g_network_service_new">
<description>
Creates a new #GNetworkService representing the given @service,
@protocol, and @domain. This will initially be unresolved; use the
#GSocketConnectable interface to resolve it.

Since: 2.22

</description>
<parameters>
<parameter name="service">
<parameter_description> the service type to look up (eg, &quot;ldap&quot;)
</parameter_description>
</parameter>
<parameter name="protocol">
<parameter_description> the networking protocol to use for @service (eg, &quot;tcp&quot;)
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> the DNS domain to look up the service in
</parameter_description>
</parameter>
</parameters>
<return> a new #GNetworkService

</return>
</function>

<function name="g_network_service_set_scheme">
<description>
Set's the URI scheme used to resolve proxies. By default, the service name
is used as scheme.

Since: 2.26

</description>
<parameters>
<parameter name="srv">
<parameter_description> a #GNetworkService
</parameter_description>
</parameter>
<parameter name="scheme">
<parameter_description> a URI scheme
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_null_settings_backend_new">
<description>
Creates a readonly #GSettingsBackend.

This backend does not allow changes to settings, so all settings
will always have their default values.

Since: 2.28

</description>
<parameters>
</parameters>
<return> a newly created #GSettingsBackend

</return>
</function>

<function name="g_output_stream_clear_pending">
<description>
Clears the pending flag on @stream.

</description>
<parameters>
<parameter name="stream">
<parameter_description> output stream
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_output_stream_close">
<description>
Closes the stream, releasing resources related to it.

Once the stream is closed, all other operations will return %G_IO_ERROR_CLOSED.
Closing a stream multiple times will not return an error.

Closing a stream will automatically flush any outstanding buffers in the
stream.

Streams will be automatically closed when the last reference
is dropped, but you might want to call this function to make sure 
resources are released as early as possible.

Some streams might keep the backing store of the stream (e.g. a file descriptor)
open after the stream is closed. See the documentation for the individual
stream for details.

On failure the first error that happened will be reported, but the close
operation will finish as much as possible. A stream that failed to
close will still return %G_IO_ERROR_CLOSED for all operations. Still, it
is important to check and report the error to the user, otherwise
there might be a loss of data as all data might not be written.

If @cancellable is not NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
Cancelling a close will still leave the stream closed, but there some streams
can use a faster close that doesn't block to e.g. check errors. On
cancellation (as with any error) there is no guarantee that all written
data will reach the target. 


</description>
<parameters>
<parameter name="stream">
<parameter_description> A #GOutputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional cancellable object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on failure
</return>
</function>

<function name="g_output_stream_close_async">
<description>
Requests an asynchronous close of the stream, releasing resources 
related to it. When the operation is finished @callback will be 
called. You can then call g_output_stream_close_finish() to get 
the result of the operation.

For behaviour details see g_output_stream_close().

The asyncronous methods have a default fallback that uses threads 
to implement asynchronicity, so they are optional for inheriting 
classes. However, if you override one you must override all.

</description>
<parameters>
<parameter name="stream">
<parameter_description> A #GOutputStream.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the io priority of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional cancellable object
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_output_stream_close_finish">
<description>
Closes an output stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if stream was successfully closed, %FALSE otherwise.
</return>
</function>

<function name="g_output_stream_flush">
<description>
Flushed any outstanding buffers in the stream. Will block during 
the operation. Closing the stream will implicitly cause a flush.

This function is optional for inherited classes.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional cancellable object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on error
</return>
</function>

<function name="g_output_stream_flush_async">
<description>
Flushes a stream asynchronously.
For behaviour details see g_output_stream_flush().

When the operation is finished @callback will be 
called. You can then call g_output_stream_flush_finish() to get the 
result of the operation.

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the io priority of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_output_stream_flush_finish">
<description>
Finishes flushing an output stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if flush operation suceeded, %FALSE otherwise.
</return>
</function>

<function name="g_output_stream_has_pending">
<description>
Checks if an ouput stream has pending actions.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @stream has pending actions. 
</return>
</function>

<function name="g_output_stream_is_closed">
<description>
Checks if an output stream has already been closed.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @stream is closed. %FALSE otherwise. 
</return>
</function>

<function name="g_output_stream_is_closing">
<description>
Checks if an output stream is being closed. This can be
used inside e.g. a flush implementation to see if the
flush (or other i/o operation) is called from within
the closing operation.

Since: 2.24

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @stream is being closed. %FALSE otherwise.

</return>
</function>

<function name="g_output_stream_set_pending">
<description>
Sets @stream to have actions pending. If the pending flag is
already set or @stream is closed, it will return %FALSE and set
@error.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if pending was previously unset and is now set.
</return>
</function>

<function name="g_output_stream_splice">
<description>
Splices an input stream into an output stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="source">
<parameter_description> a #GInputStream.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GOutputStreamSpliceFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #gssize containing the size of the data spliced, or
-1 if an error occurred.
</return>
</function>

<function name="g_output_stream_splice_async">
<description>
Splices a stream asynchronously.
When the operation is finished @callback will be called.
You can then call g_output_stream_splice_finish() to get the 
result of the operation.

For the synchronous, blocking version of this function, see 
g_output_stream_splice().

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="source">
<parameter_description> a #GInputStream. 
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GOutputStreamSpliceFlags.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the io priority of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback. 
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_output_stream_splice_finish">
<description>
Finishes an asynchronous stream splice operation.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #gssize of the number of bytes spliced.
</return>
</function>

<function name="g_output_stream_write">
<description>
Tries to write @count bytes from @buffer into the stream. Will block
during the operation.

If count is 0, returns 0 and does nothing. A value of @count
larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.

On success, the number of bytes written to the stream is returned.
It is not an error if this is not the same as the requested size, as it
can happen e.g. on a partial I/O error, or if there is not enough
storage in the stream. All writes block until at least one byte
is written or an error occurs; 0 is never returned (unless
@count is 0).

If @cancellable is not NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
operation was partially finished when the operation was cancelled the
partial result will be returned, without an error.

On error -1 is returned and @error is set accordingly.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> the buffer containing the data to write. 
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the number of bytes to write
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional cancellable object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> Number of bytes written, or -1 on error
</return>
</function>

<function name="g_output_stream_write_all">
<description>
Tries to write @count bytes from @buffer into the stream. Will block
during the operation.

This function is similar to g_output_stream_write(), except it tries to
write as many bytes as requested, only stopping on an error.

On a successful write of @count bytes, %TRUE is returned, and @bytes_written
is set to @count.

If there is an error during the operation FALSE is returned and @error
is set to indicate the error status, @bytes_written is updated to contain
the number of bytes written into the stream before the error occurred.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> the buffer containing the data to write. 
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the number of bytes to write
</parameter_description>
</parameter>
<parameter name="bytes_written">
<parameter_description> location to store the number of bytes that was 
written to the stream
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE if there was an error
</return>
</function>

<function name="g_output_stream_write_async">
<description>
Request an asynchronous write of @count bytes from @buffer into 
the stream. When the operation is finished @callback will be called.
You can then call g_output_stream_write_finish() to get the result of the 
operation.

During an async request no other sync and async calls are allowed, 
and will result in %G_IO_ERROR_PENDING errors. 

A value of @count larger than %G_MAXSSIZE will cause a 
%G_IO_ERROR_INVALID_ARGUMENT error.

On success, the number of bytes written will be passed to the
@callback. It is not an error if this is not the same as the 
requested size, as it can happen e.g. on a partial I/O error, 
but generally we try to write as many bytes as requested. 

You are guaranteed that this method will never fail with
%G_IO_ERROR_WOULD_BLOCK - if @stream can't accept more data, the
method will just wait until this changes.

Any outstanding I/O request with higher priority (lower numerical 
value) will be executed before an outstanding request with lower 
priority. Default priority is %G_PRIORITY_DEFAULT.

The asyncronous methods have a default fallback that uses threads 
to implement asynchronicity, so they are optional for inheriting 
classes. However, if you override one you must override all.

For the synchronous, blocking version of this function, see 
g_output_stream_write().

</description>
<parameters>
<parameter name="stream">
<parameter_description> A #GOutputStream.
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> the buffer containing the data to write. 
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the number of bytes to write
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the io priority of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_output_stream_write_finish">
<description>
Finishes a stream write operation.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #gssize containing the number of bytes written to the stream.
</return>
</function>

<function name="g_permission_acquire">
<description>
Attempts to acquire the permission represented by @permission.

The precise method by which this happens depends on the permission
and the underlying authentication mechanism.  A simple example is
that a dialog may appear asking the user to enter their password.

You should check with g_permission_get_can_acquire() before calling
this function.

If the permission is acquired then %TRUE is returned.  Otherwise,
%FALSE is returned and @error is set appropriately.

This call is blocking, likely for a very long time (in the case that
user interaction is required).  See g_permission_acquire_async() for
the non-blocking version.

Since: 2.26

</description>
<parameters>
<parameter name="permission">
<parameter_description> a #GPermission instance
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a pointer to a %NULL #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the permission was successfully acquired
</return>
</function>

<function name="g_permission_acquire_async">
<description>
Attempts to acquire the permission represented by @permission.

This is the first half of the asynchronous version of
g_permission_acquire().

Since: 2.26

</description>
<parameters>
<parameter name="permission">
<parameter_description> a #GPermission instance
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> the #GAsyncReadyCallback to call when done
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the user data to pass to @callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_permission_acquire_finish">
<description>
Collects the result of attempting to acquire the permission
represented by @permission.

This is the second half of the asynchronous version of
g_permission_acquire().

Since: 2.26

</description>
<parameters>
<parameter name="permission">
<parameter_description> a #GPermission instance
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> the #GAsyncResult given to the #GAsyncReadyCallback
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a pointer to a %NULL #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the permission was successfully acquired
</return>
</function>

<function name="g_permission_get_allowed">
<description>
Gets the value of the 'allowed' property.  This property is %TRUE if
the caller currently has permission to perform the action that
@permission represents the permission to perform.

Since: 2.26

</description>
<parameters>
<parameter name="permission">
<parameter_description> a #GPermission instance
</parameter_description>
</parameter>
</parameters>
<return> the value of the 'allowed' property
</return>
</function>

<function name="g_permission_get_can_acquire">
<description>
Gets the value of the 'can-acquire' property.  This property is %TRUE
if it is generally possible to acquire the permission by calling
g_permission_acquire().

Since: 2.26

</description>
<parameters>
<parameter name="permission">
<parameter_description> a #GPermission instance
</parameter_description>
</parameter>
</parameters>
<return> the value of the 'can-acquire' property
</return>
</function>

<function name="g_permission_get_can_release">
<description>
Gets the value of the 'can-release' property.  This property is %TRUE
if it is generally possible to release the permission by calling
g_permission_release().

Since: 2.26

</description>
<parameters>
<parameter name="permission">
<parameter_description> a #GPermission instance
</parameter_description>
</parameter>
</parameters>
<return> the value of the 'can-release' property
</return>
</function>

<function name="g_permission_impl_update">
<description>
This function is called by the #GPermission implementation to update
the properties of the permission.  You should never call this
function except from a #GPermission implementation.

GObject notify signals are generated, as appropriate.

Since: 2.26

</description>
<parameters>
<parameter name="permission">
<parameter_description> a #GPermission instance
</parameter_description>
</parameter>
<parameter name="allowed">
<parameter_description> the new value for the 'allowed' property
</parameter_description>
</parameter>
<parameter name="can_acquire">
<parameter_description> the new value for the 'can-acquire' property
</parameter_description>
</parameter>
<parameter name="can_release">
<parameter_description> the new value for the 'can-release' property
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_permission_release">
<description>
Attempts to release the permission represented by @permission.

The precise method by which this happens depends on the permission
and the underlying authentication mechanism.  In most cases the
permission will be dropped immediately without further action.

You should check with g_permission_get_can_release() before calling
this function.

If the permission is released then %TRUE is returned.  Otherwise,
%FALSE is returned and @error is set appropriately.

This call is blocking, likely for a very long time (in the case that
user interaction is required).  See g_permission_release_async() for
the non-blocking version.

Since: 2.26

</description>
<parameters>
<parameter name="permission">
<parameter_description> a #GPermission instance
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a pointer to a %NULL #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the permission was successfully released
</return>
</function>

<function name="g_permission_release_async">
<description>
Attempts to release the permission represented by @permission.

This is the first half of the asynchronous version of
g_permission_release().

Since: 2.26

</description>
<parameters>
<parameter name="permission">
<parameter_description> a #GPermission instance
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> the #GAsyncReadyCallback to call when done
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the user data to pass to @callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_permission_release_finish">
<description>
Collects the result of attempting to release the permission
represented by @permission.

This is the second half of the asynchronous version of
g_permission_release().

Since: 2.26

</description>
<parameters>
<parameter name="permission">
<parameter_description> a #GPermission instance
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> the #GAsyncResult given to the #GAsyncReadyCallback
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a pointer to a %NULL #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the permission was successfully released
</return>
</function>

<function name="g_poll_file_monitor_new">
<description>
Polls @file for changes.


</description>
<parameters>
<parameter name="file">
<parameter_description> a #GFile.
</parameter_description>
</parameter>
</parameters>
<return> a new #GFileMonitor for the given #GFile. 
</return>
</function>

<function name="g_pollable_input_stream_can_poll">
<description>
Checks if @stream is actually pollable. Some classes may implement
#GPollableInputStream but have only certain instances of that class
be pollable. If this method returns %FALSE, then the behavior of
other #GPollableInputStream methods is undefined.

For any given stream, the value returned by this method is constant;
a stream cannot switch from pollable to non-pollable or vice versa.

Since: 2.28

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GPollableInputStream.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @stream is pollable, %FALSE if not.

</return>
</function>

<function name="g_pollable_input_stream_create_source">
<description>
Creates a #GSource that triggers when @stream can be read, or
@cancellable is triggered or an error occurs. The callback on the
source is of the #GPollableSourceFunc type.

As with g_pollable_input_stream_is_readable(), it is possible that
the stream may not actually be readable even after the source
triggers, so you should use g_pollable_input_stream_read_nonblocking()
rather than g_input_stream_read() from the callback.

Since: 2.28

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GPollableInputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GSource

</return>
</function>

<function name="g_pollable_input_stream_is_readable">
<description>
Checks if @stream can be read.

Note that some stream types may not be able to implement this 100%
reliably, and it is possible that a call to g_input_stream_read()
after this returns %TRUE would still block. To guarantee
non-blocking behavior, you should always use
g_pollable_input_stream_read_nonblocking(), which will return a
%G_IO_ERROR_WOULD_BLOCK error rather than blocking.

Since: 2.28

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GPollableInputStream.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @stream is readable, %FALSE if not. If an error
has occurred on @stream, this will result in
g_pollable_input_stream_is_readable() returning %TRUE, and the
next attempt to read will return the error.

</return>
</function>

<function name="g_pollable_input_stream_read_nonblocking">
<description>
Attempts to read up to @size bytes from @stream into @buffer, as
with g_input_stream_read(). If @stream is not currently readable,
this will immediately return %G_IO_ERROR_WOULD_BLOCK, and you can
use g_pollable_input_stream_create_source() to create a #GSource
that will be triggered when @stream is readable.

Note that since this method never blocks, you cannot actually
use @cancellable to cancel it. However, it will return an error
if @cancellable has already been cancelled when you call, which
may happen if you call this method after a source triggers due
to having been cancelled.

Virtual: read_nonblocking

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GPollableInputStream
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a buffer to read data into (which should be at least @size
bytes long).
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the number of bytes you want to read
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> the number of bytes read, or -1 on error (including
%G_IO_ERROR_WOULD_BLOCK).
</return>
</function>

<function name="g_pollable_output_stream_can_poll">
<description>
Checks if @stream is actually pollable. Some classes may implement
#GPollableOutputStream but have only certain instances of that
class be pollable. If this method returns %FALSE, then the behavior
of other #GPollableOutputStream methods is undefined.

For any given stream, the value returned by this method is constant;
a stream cannot switch from pollable to non-pollable or vice versa.

Since: 2.28

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GPollableOutputStream.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @stream is pollable, %FALSE if not.

</return>
</function>

<function name="g_pollable_output_stream_create_source">
<description>
Creates a #GSource that triggers when @stream can be written, or
@cancellable is triggered or an error occurs. The callback on the
source is of the #GPollableSourceFunc type.

As with g_pollable_output_stream_is_writable(), it is possible that
the stream may not actually be writable even after the source
triggers, so you should use g_pollable_output_stream_write_nonblocking()
rather than g_output_stream_write() from the callback.

Since: 2.28

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GPollableOutputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GSource

</return>
</function>

<function name="g_pollable_output_stream_is_writable">
<description>
Checks if @stream can be written.

Note that some stream types may not be able to implement this 100%
reliably, and it is possible that a call to g_output_stream_write()
after this returns %TRUE would still block. To guarantee
non-blocking behavior, you should always use
g_pollable_output_stream_write_nonblocking(), which will return a
%G_IO_ERROR_WOULD_BLOCK error rather than blocking.

Since: 2.28

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GPollableOutputStream.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @stream is writable, %FALSE if not. If an error
has occurred on @stream, this will result in
g_pollable_output_stream_is_writable() returning %TRUE, and the
next attempt to write will return the error.

</return>
</function>

<function name="g_pollable_output_stream_write_nonblocking">
<description>
Attempts to write up to @size bytes from @buffer to @stream, as
with g_output_stream_write(). If @stream is not currently writable,
this will immediately return %G_IO_ERROR_WOULD_BLOCK, and you can
use g_pollable_output_stream_create_source() to create a #GSource
that will be triggered when @stream is writable.

Note that since this method never blocks, you cannot actually
use @cancellable to cancel it. However, it will return an error
if @cancellable has already been cancelled when you call, which
may happen if you call this method after a source triggers due
to having been cancelled.

Virtual: write_nonblocking

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GPollableOutputStream
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a buffer to write
data from
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the number of bytes you want to write
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> the number of bytes written, or -1 on error (including
%G_IO_ERROR_WOULD_BLOCK).
</return>
</function>

<function name="g_pollable_source_new">
<description>
Utility method for #GPollableInputStream and #GPollableOutputStream
implementations. Creates a new #GSource that expects a callback of
type #GPollableSourceFunc. The new source does not actually do
anything on its own; use g_source_add_child_source() to add other
sources to it to cause it to trigger.

Since: 2.28

</description>
<parameters>
<parameter name="pollable_stream">
<parameter_description> the stream associated with the new source
</parameter_description>
</parameter>
</parameters>
<return> the new #GSource.

</return>
</function>

<function name="g_proxy_address_get_destination_hostname">
<description>
Gets @proxy's destination hostname.

Since: 2.26

</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GProxyAddress
</parameter_description>
</parameter>
</parameters>
<return> the @proxy's destination hostname

</return>
</function>

<function name="g_proxy_address_get_destination_port">
<description>
Gets @proxy's destination port.

Since: 2.26

</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GProxyAddress
</parameter_description>
</parameter>
</parameters>
<return> the @proxy's destination port

</return>
</function>

<function name="g_proxy_address_get_password">
<description>
Gets @proxy's password.

Since: 2.26

</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GProxyAddress
</parameter_description>
</parameter>
</parameters>
<return> the @proxy's password

</return>
</function>

<function name="g_proxy_address_get_protocol">
<description>
Gets @proxy's protocol.

Since: 2.26

</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GProxyAddress
</parameter_description>
</parameter>
</parameters>
<return> the @proxy's protocol

</return>
</function>

<function name="g_proxy_address_get_username">
<description>
Gets @proxy's username.

Since: 2.26

</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GProxyAddress
</parameter_description>
</parameter>
</parameters>
<return> the @proxy's username

</return>
</function>

<function name="g_proxy_address_new">
<description>
Creates a new #GProxyAddress for @inetaddr with @protocol that should
tunnel through @dest_hostname and @dest_port.

Since: 2.26

</description>
<parameters>
<parameter name="inetaddr">
<parameter_description> The proxy server #GInetAddress.
</parameter_description>
</parameter>
<parameter name="port">
<parameter_description> The proxy server port.
</parameter_description>
</parameter>
<parameter name="protocol">
<parameter_description> The proxy protocol to support, in lower case (e.g. socks, http).
</parameter_description>
</parameter>
<parameter name="dest_hostname">
<parameter_description> The destination hostname the the proxy should tunnel to.
</parameter_description>
</parameter>
<parameter name="dest_port">
<parameter_description> The destination port to tunnel to.
</parameter_description>
</parameter>
<parameter name="username">
<parameter_description> The username to authenticate to the proxy server
(or %NULL).
</parameter_description>
</parameter>
<parameter name="password">
<parameter_description> The password to authenticate to the proxy server
(or %NULL).
</parameter_description>
</parameter>
</parameters>
<return> a new #GProxyAddress

</return>
</function>

<function name="g_proxy_connect">
<description>
Given @connection to communicate with a proxy (eg, a
#GSocketConnection that is connected to the proxy server), this
does the necessary handshake to connect to @proxy_address, and if
required, wraps the #GIOStream to handle proxy payload.

Since: 2.26

</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GProxy
</parameter_description>
</parameter>
<parameter name="connection">
<parameter_description> a #GIOStream
</parameter_description>
</parameter>
<parameter name="proxy_address">
<parameter_description> a #GProxyAddress
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return #GError
</parameter_description>
</parameter>
</parameters>
<return> a #GIOStream that will replace @connection. This might
be the same as @connection, in which case a reference
will be added.

</return>
</function>

<function name="g_proxy_connect_async">
<description>
Asynchronous version of g_proxy_connect().

Since: 2.26

</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GProxy
</parameter_description>
</parameter>
<parameter name="connection">
<parameter_description> a #GIOStream
</parameter_description>
</parameter>
<parameter name="proxy_address">
<parameter_description> a #GProxyAddress
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> callback data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_proxy_connect_finish">
<description>
See g_proxy_connect().

Since: 2.26

</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GProxy
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncRetult
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return #GError
</parameter_description>
</parameter>
</parameters>
<return> a #GIOStream.

</return>
</function>

<function name="g_proxy_get_default_for_protocol">
<description>
Lookup &quot;gio-proxy&quot; extension point for a proxy implementation that supports
specified protocol.

Since: 2.26

</description>
<parameters>
<parameter name="protocol">
<parameter_description> the proxy protocol name (e.g. http, socks, etc)
</parameter_description>
</parameter>
</parameters>
<return> return a #GProxy or NULL if protocol
is not supported.

</return>
</function>

<function name="g_proxy_resolver_get_default">
<description>
Gets the default #GProxyResolver for the system.

Since: 2.26

</description>
<parameters>
</parameters>
<return> the default #GProxyResolver.

</return>
</function>

<function name="g_proxy_resolver_is_supported">
<description>
Checks if @resolver can be used on this system. (This is used
internally; g_proxy_resolver_get_default() will only return a proxy
resolver that returns %TRUE for this method.)

Since: 2.26

</description>
<parameters>
<parameter name="resolver">
<parameter_description> a #GProxyResolver
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @resolver is supported.

</return>
</function>

<function name="g_proxy_resolver_lookup">
<description>
Looks into the system proxy configuration to determine what proxy,
if any, to use to connect to @uri. The returned proxy URIs are of the
form &lt;literal&gt;&lt;protocol&gt;://[user[:password]@]host:port&lt;/literal&gt;
or &lt;literal&gt;direct://&lt;/literal&gt;, where &lt;protocol&gt; could be
http, rtsp, socks or other proxying protocol.

If you don't know what network protocol is being used on the
socket, you should use &lt;literal&gt;none&lt;/literal&gt; as the URI protocol.
In this case, the resolver might still return a generic proxy type
(such as SOCKS), but would not return protocol-specific proxy types
(such as http).

&lt;literal&gt;direct://&lt;/literal&gt; is used when no proxy is needed.
Direct connection should not be attempted unless it is part of the
returned array of proxies.

Since: 2.26

</description>
<parameters>
<parameter name="resolver">
<parameter_description> a #GProxyResolver
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a URI representing the destination to connect to
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> A
NULL-terminated array of proxy URIs. Must be freed
with g_strfreev().

</return>
</function>

<function name="g_proxy_resolver_lookup_async">
<description>
Asynchronous lookup of proxy. See g_proxy_resolver_lookup() for more
details.

Since: 2.26

</description>
<parameters>
<parameter name="resolver">
<parameter_description> a #GProxyResolver
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a URI representing the destination to connect to
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call after resolution completes
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data for @callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_proxy_resolver_lookup_finish">
<description>
Call this function to obtain the array of proxy URIs when
g_proxy_resolver_lookup_async() is complete. See
g_proxy_resolver_lookup() for more details.

Since: 2.26

</description>
<parameters>
<parameter name="resolver">
<parameter_description> a #GProxyResolver
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> the result passed to your #GAsyncReadyCallback
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> A
NULL-terminated array of proxy URIs. Must be freed
with g_strfreev().

</return>
</function>

<function name="g_proxy_supports_hostname">
<description>
Some proxy protocols expect to be passed a hostname, which they
will resolve to an IP address themselves. Others, like SOCKS4, do
not allow this. This function will return %FALSE if @proxy is
implementing such a protocol. When %FALSE is returned, the caller
should resolve the destination hostname first, and then pass a
#GProxyAddress containing the stringified IP address to
g_proxy_connect() or g_proxy_connect_async().

Since: 2.26

</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GProxy
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if hostname resolution is supported.

</return>
</function>

<function name="g_resolver_error_quark">
<description>
Gets the #GResolver Error Quark.

Since: 2.22

</description>
<parameters>
</parameters>
<return> a #GQuark.

</return>
</function>

<function name="g_resolver_free_addresses">
<description>
Frees @addresses (which should be the return value from
g_resolver_lookup_by_name() or g_resolver_lookup_by_name_finish()).
(This is a convenience method; you can also simply free the results
by hand.)

Since: 2.22

</description>
<parameters>
<parameter name="addresses">
<parameter_description> a #GList of #GInetAddress
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_resolver_free_targets">
<description>
Frees @targets (which should be the return value from
g_resolver_lookup_service() or g_resolver_lookup_service_finish()).
(This is a convenience method; you can also simply free the
results by hand.)

Since: 2.22

</description>
<parameters>
<parameter name="targets">
<parameter_description> a #GList of #GSrvTarget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_resolver_get_default">
<description>
Gets the default #GResolver. You should unref it when you are done
with it. #GResolver may use its reference count as a hint about how
many threads/processes, etc it should allocate for concurrent DNS
resolutions.

Since: 2.22

</description>
<parameters>
</parameters>
<return> the default #GResolver.

</return>
</function>

<function name="g_resolver_lookup_by_address">
<description>
Synchronously reverse-resolves @address to determine its
associated hostname.

If the DNS resolution fails, @error (if non-%NULL) will be set to
a value from #GResolverError.

If @cancellable is non-%NULL, it can be used to cancel the
operation, in which case @error (if non-%NULL) will be set to
%G_IO_ERROR_CANCELLED.

Since: 2.22

</description>
<parameters>
<parameter name="resolver">
<parameter_description> a #GResolver
</parameter_description>
</parameter>
<parameter name="address">
<parameter_description> the address to reverse-resolve
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a hostname (either ASCII-only, or in ASCII-encoded
form), or %NULL on error.

</return>
</function>

<function name="g_resolver_lookup_by_address_async">
<description>
Begins asynchronously reverse-resolving @address to determine its
associated hostname, and eventually calls @callback, which must
call g_resolver_lookup_by_address_finish() to get the final result.

Since: 2.22

</description>
<parameters>
<parameter name="resolver">
<parameter_description> a #GResolver
</parameter_description>
</parameter>
<parameter name="address">
<parameter_description> the address to reverse-resolve
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call after resolution completes
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data for @callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_resolver_lookup_by_address_finish">
<description>
Retrieves the result of a previous call to
g_resolver_lookup_by_address_async().

If the DNS resolution failed, @error (if non-%NULL) will be set to
a value from #GResolverError. If the operation was cancelled,
@error will be set to %G_IO_ERROR_CANCELLED.

Since: 2.22

</description>
<parameters>
<parameter name="resolver">
<parameter_description> a #GResolver
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> the result passed to your #GAsyncReadyCallback
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a hostname (either ASCII-only, or in ASCII-encoded
form), or %NULL on error.

</return>
</function>

<function name="g_resolver_lookup_by_name">
<description>
Synchronously resolves @hostname to determine its associated IP
address(es). @hostname may be an ASCII-only or UTF-8 hostname, or
the textual form of an IP address (in which case this just becomes
a wrapper around g_inet_address_new_from_string()).

On success, g_resolver_lookup_by_name() will return a #GList of
#GInetAddress, sorted in order of preference. (That is, you should
attempt to connect to the first address first, then the second if
the first fails, etc.)

If the DNS resolution fails, @error (if non-%NULL) will be set to a
value from #GResolverError.

If @cancellable is non-%NULL, it can be used to cancel the
operation, in which case @error (if non-%NULL) will be set to
%G_IO_ERROR_CANCELLED.

If you are planning to connect to a socket on the resolved IP
address, it may be easier to create a #GNetworkAddress and use its
#GSocketConnectable interface.

Since: 2.22

</description>
<parameters>
<parameter name="resolver">
<parameter_description> a #GResolver
</parameter_description>
</parameter>
<parameter name="hostname">
<parameter_description> the hostname to look up
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GList
of #GInetAddress, or %NULL on error. You
must unref each of the addresses and free the list when you are
done with it. (You can use g_resolver_free_addresses() to do this.)

</return>
</function>

<function name="g_resolver_lookup_by_name_async">
<description>
Begins asynchronously resolving @hostname to determine its
associated IP address(es), and eventually calls @callback, which
must call g_resolver_lookup_by_name_finish() to get the result.
See g_resolver_lookup_by_name() for more details.

Since: 2.22

</description>
<parameters>
<parameter name="resolver">
<parameter_description> a #GResolver
</parameter_description>
</parameter>
<parameter name="hostname">
<parameter_description> the hostname to look up the address of
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call after resolution completes
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data for @callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_resolver_lookup_by_name_finish">
<description>
Retrieves the result of a call to
g_resolver_lookup_by_name_async().

If the DNS resolution failed, @error (if non-%NULL) will be set to
a value from #GResolverError. If the operation was cancelled,
@error will be set to %G_IO_ERROR_CANCELLED.

Since: 2.22

</description>
<parameters>
<parameter name="resolver">
<parameter_description> a #GResolver
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> the result passed to your #GAsyncReadyCallback
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GList
of #GInetAddress, or %NULL on error. See g_resolver_lookup_by_name()
for more details.

</return>
</function>

<function name="g_resolver_lookup_service">
<description>
Synchronously performs a DNS SRV lookup for the given @service and
@protocol in the given @domain and returns an array of #GSrvTarget.
@domain may be an ASCII-only or UTF-8 hostname. Note also that the
@service and @protocol arguments &lt;emphasis&gt;do not&lt;/emphasis&gt;
include the leading underscore that appears in the actual DNS
entry.

On success, g_resolver_lookup_service() will return a #GList of
#GSrvTarget, sorted in order of preference. (That is, you should
attempt to connect to the first target first, then the second if
the first fails, etc.)

If the DNS resolution fails, @error (if non-%NULL) will be set to
a value from #GResolverError.

If @cancellable is non-%NULL, it can be used to cancel the
operation, in which case @error (if non-%NULL) will be set to
%G_IO_ERROR_CANCELLED.

If you are planning to connect to the service, it is usually easier
to create a #GNetworkService and use its #GSocketConnectable
interface.

Since: 2.22

</description>
<parameters>
<parameter name="resolver">
<parameter_description> a #GResolver
</parameter_description>
</parameter>
<parameter name="service">
<parameter_description> the service type to look up (eg, &quot;ldap&quot;)
</parameter_description>
</parameter>
<parameter name="protocol">
<parameter_description> the networking protocol to use for @service (eg, &quot;tcp&quot;)
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> the DNS domain to look up the service in
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GList of #GSrvTarget,
or %NULL on error. You must free each of the targets and the list when you are
done with it. (You can use g_resolver_free_targets() to do this.)

</return>
</function>

<function name="g_resolver_lookup_service_async">
<description>
Begins asynchronously performing a DNS SRV lookup for the given
@service and @protocol in the given @domain, and eventually calls
@callback, which must call g_resolver_lookup_service_finish() to
get the final result. See g_resolver_lookup_service() for more
details.

Since: 2.22

</description>
<parameters>
<parameter name="resolver">
<parameter_description> a #GResolver
</parameter_description>
</parameter>
<parameter name="service">
<parameter_description> the service type to look up (eg, &quot;ldap&quot;)
</parameter_description>
</parameter>
<parameter name="protocol">
<parameter_description> the networking protocol to use for @service (eg, &quot;tcp&quot;)
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> the DNS domain to look up the service in
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call after resolution completes
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data for @callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_resolver_lookup_service_finish">
<description>
Retrieves the result of a previous call to
g_resolver_lookup_service_async().

If the DNS resolution failed, @error (if non-%NULL) will be set to
a value from #GResolverError. If the operation was cancelled,
@error will be set to %G_IO_ERROR_CANCELLED.

Since: 2.22

</description>
<parameters>
<parameter name="resolver">
<parameter_description> a #GResolver
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> the result passed to your #GAsyncReadyCallback
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GList of #GSrvTarget,
or %NULL on error. See g_resolver_lookup_service() for more details.

</return>
</function>

<function name="g_resolver_set_default">
<description>
Sets @resolver to be the application's default resolver (reffing
@resolver, and unreffing the previous default resolver, if any).
Future calls to g_resolver_get_default() will return this resolver.

This can be used if an application wants to perform any sort of DNS
caching or &quot;pinning&quot;; it can implement its own #GResolver that
calls the original default resolver for DNS operations, and
implements its own cache policies on top of that, and then set
itself as the default resolver for all later code to use.

Since: 2.22

</description>
<parameters>
<parameter name="resolver">
<parameter_description> the new default #GResolver
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_seekable_can_seek">
<description>
Tests if the stream supports the #GSeekableIface.


</description>
<parameters>
<parameter name="seekable">
<parameter_description> a #GSeekable.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @seekable can be seeked. %FALSE otherwise.
</return>
</function>

<function name="g_seekable_can_truncate">
<description>
Tests if the stream can be truncated.


</description>
<parameters>
<parameter name="seekable">
<parameter_description> a #GSeekable.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the stream can be truncated, %FALSE otherwise.
</return>
</function>

<function name="g_seekable_seek">
<description>
Seeks in the stream by the given @offset, modified by @type.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="seekable">
<parameter_description> a #GSeekable.
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> a #goffset.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #GSeekType.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful. If an error
has occurred, this function will return %FALSE and set @error
appropriately if present.
</return>
</function>

<function name="g_seekable_tell">
<description>
Tells the current position within the stream.


</description>
<parameters>
<parameter name="seekable">
<parameter_description> a #GSeekable.
</parameter_description>
</parameter>
</parameters>
<return> the offset from the beginning of the buffer.
</return>
</function>

<function name="g_seekable_truncate">
<description>
Truncates a stream with a given #offset. 

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
operation was partially finished when the operation was cancelled the
partial result will be returned, without an error.

Virtual: truncate_fn

</description>
<parameters>
<parameter name="seekable">
<parameter_description> a #GSeekable.
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> a #goffset.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful. If an error
has occurred, this function will return %FALSE and set @error
appropriately if present. 
</return>
</function>

<function name="g_settings_apply">
<description>
Applies any changes that have been made to the settings.  This
function does nothing unless @settings is in 'delay-apply' mode;
see g_settings_delay().  In the normal case settings are always
applied immediately.

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GSettings instance
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_settings_backend_changed">
<description>
Signals that a single key has possibly changed.  Backend
implementations should call this if a key has possibly changed its
value.

@key must be a valid key (ie starting with a slash, not containing
'//', and not ending with a slash).

The implementation must call this function during any call to
g_settings_backend_write(), before the call returns (except in the
case that no keys are actually changed and it cares to detect this
fact).  It may not rely on the existence of a mainloop for
dispatching the signal later.

The implementation may call this function at any other time it likes
in response to other events (such as changes occuring outside of the
program).  These calls may originate from a mainloop or may originate
in response to any other action (including from calls to
g_settings_backend_write()).

In the case that this call is in response to a call to
g_settings_backend_write() then @origin_tag must be set to the same
value that was passed to that call.

Since: 2.26

</description>
<parameters>
<parameter name="backend">
<parameter_description> a #GSettingsBackend implementation
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the name of the key
</parameter_description>
</parameter>
<parameter name="origin_tag">
<parameter_description> the origin tag
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_settings_backend_changed_tree">
<description>
This call is a convenience wrapper.  It gets the list of changes from
@tree, computes the longest common prefix and calls
g_settings_backend_changed().

Since: 2.26

</description>
<parameters>
<parameter name="backend">
<parameter_description> a #GSettingsBackend implementation
</parameter_description>
</parameter>
<parameter name="tree">
<parameter_description> a #GTree containing the changes
</parameter_description>
</parameter>
<parameter name="origin_tag">
<parameter_description> the origin tag
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_settings_backend_flatten_tree">
<description>
Calculate the longest common prefix of all keys in a tree and write
out an array of the key names relative to that prefix and,
optionally, the value to store at each of those keys.

You must free the value returned in @path, @keys and @values using
g_free().  You should not attempt to free or unref the contents of
@keys or @values.

Since: 2.26

</description>
<parameters>
<parameter name="tree">
<parameter_description> a #GTree containing the changes
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> the location to save the path
</parameter_description>
</parameter>
<parameter name="keys">
<parameter_description> the
location to save the relative keys
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description>
the location to save the values, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_settings_backend_get_default">
<description>
Returns the default #GSettingsBackend. It is possible to override
the default by setting the &lt;envar&gt;GSETTINGS_BACKEND&lt;/envar&gt;
environment variable to the name of a settings backend.

The user gets a reference to the backend.

Since: 2.28

</description>
<parameters>
</parameters>
<return> the default #GSettingsBackend
</return>
</function>

<function name="g_settings_backend_keys_changed">
<description>
Signals that a list of keys have possibly changed.  Backend
implementations should call this if keys have possibly changed their
values.

@path must be a valid path (ie starting and ending with a slash and
not containing '//').  Each string in @items must form a valid key
name when @path is prefixed to it (ie: each item must not start or
end with '/' and must not contain '//').

The meaning of this signal is that any of the key names resulting
from the contatenation of @path with each item in @items may have
changed.

The same rules for when notifications must occur apply as per
g_settings_backend_changed().  These two calls can be used
interchangeably if exactly one item has changed (although in that
case g_settings_backend_changed() is definitely preferred).

For efficiency reasons, the implementation should strive for @path to
be as long as possible (ie: the longest common prefix of all of the
keys that were changed) but this is not strictly required.

Since: 2.26

</description>
<parameters>
<parameter name="backend">
<parameter_description> a #GSettingsBackend implementation
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> the path containing the changes
</parameter_description>
</parameter>
<parameter name="items">
<parameter_description> the %NULL-terminated list of changed keys
</parameter_description>
</parameter>
<parameter name="origin_tag">
<parameter_description> the origin tag
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_settings_backend_path_changed">
<description>
Signals that all keys below a given path may have possibly changed.
Backend implementations should call this if an entire path of keys
have possibly changed their values.

@path must be a valid path (ie starting and ending with a slash and
not containing '//').

The meaning of this signal is that any of the key which has a name
starting with @path may have changed.

The same rules for when notifications must occur apply as per
g_settings_backend_changed().  This call might be an appropriate
reasponse to a 'reset' call but implementations are also free to
explicitly list the keys that were affected by that call if they can
easily do so.

For efficiency reasons, the implementation should strive for @path to
be as long as possible (ie: the longest common prefix of all of the
keys that were changed) but this is not strictly required.  As an
example, if this function is called with the path of &quot;/&quot; then every
single key in the application will be notified of a possible change.

Since: 2.26

</description>
<parameters>
<parameter name="backend">
<parameter_description> a #GSettingsBackend implementation
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> the path containing the changes
</parameter_description>
</parameter>
<parameter name="origin_tag">
<parameter_description> the origin tag
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_settings_backend_path_writable_changed">
<description>
Signals that the writability of all keys below a given path may have
changed.

Since GSettings performs no locking operations for itself, this call
will always be made in response to external events.

Since: 2.26

</description>
<parameters>
<parameter name="backend">
<parameter_description> a #GSettingsBackend implementation
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> the name of the path
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_settings_backend_writable_changed">
<description>
Signals that the writability of a single key has possibly changed.

Since GSettings performs no locking operations for itself, this call
will always be made in response to external events.

Since: 2.26

</description>
<parameters>
<parameter name="backend">
<parameter_description> a #GSettingsBackend implementation
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the name of the key
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_settings_bind">
<description>
Create a binding between the @key in the @settings object
and the property @property of @object.

The binding uses the default GIO mapping functions to map
between the settings and property values. These functions
handle booleans, numeric types and string types in a
straightforward way. Use g_settings_bind_with_mapping() if
you need a custom mapping, or map between types that are not
supported by the default mapping functions.

Unless the @flags include %G_SETTINGS_BIND_NO_SENSITIVITY, this
function also establishes a binding between the writability of
@key and the &quot;sensitive&quot; property of @object (if @object has
a boolean property by that name). See g_settings_bind_writable()
for more details about writable bindings.

Note that the lifecycle of the binding is tied to the object,
and that you can have only one binding per object property.
If you bind the same property twice on the same object, the second
binding overrides the first one.

Since: 2.26

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GSettings object
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to bind
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> a #GObject
</parameter_description>
</parameter>
<parameter name="property">
<parameter_description> the name of the property to bind
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags for the binding
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_settings_bind_with_mapping">
<description>
Create a binding between the @key in the @settings object
and the property @property of @object.

The binding uses the provided mapping functions to map between
settings and property values.

Note that the lifecycle of the binding is tied to the object,
and that you can have only one binding per object property.
If you bind the same property twice on the same object, the second
binding overrides the first one.

Since: 2.26

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GSettings object
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to bind
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> a #GObject
</parameter_description>
</parameter>
<parameter name="property">
<parameter_description> the name of the property to bind
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags for the binding
</parameter_description>
</parameter>
<parameter name="get_mapping">
<parameter_description> a function that gets called to convert values
from @settings to @object, or %NULL to use the default GIO mapping
</parameter_description>
</parameter>
<parameter name="set_mapping">
<parameter_description> a function that gets called to convert values
from @object to @settings, or %NULL to use the default GIO mapping
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data that gets passed to @get_mapping and @set_mapping
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> #GDestroyNotify function for @user_data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_settings_bind_writable">
<description>
Create a binding between the writability of @key in the
@settings object and the property @property of @object.
The property must be boolean; &quot;sensitive&quot; or &quot;visible&quot;
properties of widgets are the most likely candidates.

Writable bindings are always uni-directional; changes of the
writability of the setting will be propagated to the object
property, not the other way.

When the @inverted argument is %TRUE, the binding inverts the
value as it passes from the setting to the object, i.e. @property
will be set to %TRUE if the key is &lt;emphasis&gt;not&lt;/emphasis&gt;
writable.

Note that the lifecycle of the binding is tied to the object,
and that you can have only one binding per object property.
If you bind the same property twice on the same object, the second
binding overrides the first one.

Since: 2.26

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GSettings object
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to bind
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description>a #GObject
</parameter_description>
</parameter>
<parameter name="property">
<parameter_description> the name of a boolean property to bind
</parameter_description>
</parameter>
<parameter name="inverted">
<parameter_description> whether to 'invert' the value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_settings_delay">
<description>
Changes the #GSettings object into 'delay-apply' mode. In this
mode, changes to @settings are not immediately propagated to the
backend, but kept locally until g_settings_apply() is called.

Since: 2.26

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GSettings object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_settings_get">
<description>
Gets the value that is stored at @key in @settings.

A convenience function that combines g_settings_get_value() with
g_variant_get().

It is a programmer error to give a @key that isn't contained in the
schema for @settings or for the #GVariantType of @format to mismatch
the type given in the schema.

Since: 2.26

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GSettings object
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to get the value for
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a #GVariant format string
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> arguments as per @format
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_settings_get_boolean">
<description>
Gets the value that is stored at @key in @settings.

A convenience variant of g_settings_get() for booleans.

It is a programmer error to give a @key that isn't specified as
having a boolean type in the schema for @settings.

Since: 2.26

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GSettings object
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to get the value for
</parameter_description>
</parameter>
</parameters>
<return> a boolean
</return>
</function>

<function name="g_settings_get_child">
<description>
Creates a 'child' settings object which has a base path of
&lt;replaceable&gt;base-path&lt;/replaceable&gt;/@name, where
&lt;replaceable&gt;base-path&lt;/replaceable&gt; is the base path of @settings.

The schema for the child settings object must have been declared
in the schema of @settings using a &lt;tag class=&quot;starttag&quot;&gt;child&lt;/tag&gt; element.

Since: 2.26

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GSettings object
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the 'child' schema
</parameter_description>
</parameter>
</parameters>
<return> a 'child' settings object
</return>
</function>

<function name="g_settings_get_double">
<description>
Gets the value that is stored at @key in @settings.

A convenience variant of g_settings_get() for doubles.

It is a programmer error to give a @key that isn't specified as
having a 'double' type in the schema for @settings.

Since: 2.26

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GSettings object
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to get the value for
</parameter_description>
</parameter>
</parameters>
<return> a double
</return>
</function>

<function name="g_settings_get_enum">
<description>
Gets the value that is stored in @settings for @key and converts it
to the enum value that it represents.

In order to use this function the type of the value must be a string
and it must be marked in the schema file as an enumerated type.

It is a programmer error to give a @key that isn't contained in the
schema for @settings or is not marked as an enumerated type.

If the value stored in the configuration database is not a valid
value for the enumerated type then this function will return the
default value.

Since: 2.26

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GSettings object
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to get the value for
</parameter_description>
</parameter>
</parameters>
<return> the enum value
</return>
</function>

<function name="g_settings_get_flags">
<description>
Gets the value that is stored in @settings for @key and converts it
to the flags value that it represents.

In order to use this function the type of the value must be an array
of strings and it must be marked in the schema file as an flags type.

It is a programmer error to give a @key that isn't contained in the
schema for @settings or is not marked as a flags type.

If the value stored in the configuration database is not a valid
value for the flags type then this function will return the default
value.

Since: 2.26

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GSettings object
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to get the value for
</parameter_description>
</parameter>
</parameters>
<return> the flags value
</return>
</function>

<function name="g_settings_get_has_unapplied">
<description>
Returns whether the #GSettings object has any unapplied
changes.  This can only be the case if it is in 'delayed-apply' mode.

Since: 2.26

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GSettings object
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @settings has unapplied changes
</return>
</function>

<function name="g_settings_get_int">
<description>
Gets the value that is stored at @key in @settings.

A convenience variant of g_settings_get() for 32-bit integers.

It is a programmer error to give a @key that isn't specified as
having a int32 type in the schema for @settings.

Since: 2.26

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GSettings object
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to get the value for
</parameter_description>
</parameter>
</parameters>
<return> an integer
</return>
</function>

<function name="g_settings_get_mapped">
<description>
Gets the value that is stored at @key in @settings, subject to
application-level validation/mapping.

You should use this function when the application needs to perform
some processing on the value of the key (for example, parsing).  The
@mapping function performs that processing.  If the function
indicates that the processing was unsuccessful (due to a parse error,
for example) then the mapping is tried again with another value.

This allows a robust 'fall back to defaults' behaviour to be
implemented somewhat automatically.

The first value that is tried is the user's setting for the key.  If
the mapping function fails to map this value, other values may be
tried in an unspecified order (system or site defaults, translated
schema default values, untranslated schema default values, etc).

If the mapping function fails for all possible values, one additional
attempt is made: the mapping function is called with a %NULL value.
If the mapping function still indicates failure at this point then
the application will be aborted.

The result parameter for the @mapping function is pointed to a
#gpointer which is initially set to %NULL.  The same pointer is given
to each invocation of @mapping.  The final value of that #gpointer is
what is returned by this function.  %NULL is valid; it is returned
just as any other value would be.

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GSettings object
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to get the value for
</parameter_description>
</parameter>
<parameter name="mapping">
<parameter_description> the function to map the value in the
settings database to the value used by the application
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data for @mapping
</parameter_description>
</parameter>
</parameters>
<return> the result, which may be %NULL
</return>
</function>

<function name="g_settings_get_range">
<description>
Queries the range of a key.

This function will return a #GVariant that fully describes the range
of values that are valid for @key.

The type of #GVariant returned is &lt;literal&gt;(sv)&lt;/literal&gt;.  The
string describes the type of range restriction in effect.  The type
and meaning of the value contained in the variant depends on the
string.

If the string is &lt;literal&gt;'type'&lt;/literal&gt; then the variant contains
an empty array.  The element type of that empty array is the expected
type of value and all values of that type are valid.

If the string is &lt;literal&gt;'enum'&lt;/literal&gt; then the variant contains
an array enumerating the possible values.  Each item in the array is
a possible valid value and no other values are valid.

If the string is &lt;literal&gt;'flags'&lt;/literal&gt; then the variant contains
an array.  Each item in the array is a value that may appear zero or
one times in an array to be used as the value for this key.  For
example, if the variant contained the array &lt;literal&gt;['x',
'y']&lt;/literal&gt; then the valid values for the key would be
&lt;literal&gt;[]&lt;/literal&gt;, &lt;literal&gt;['x']&lt;/literal&gt;,
&lt;literal&gt;['y']&lt;/literal&gt;, &lt;literal&gt;['x', 'y']&lt;/literal&gt; and
&lt;literal&gt;['y', 'x']&lt;/literal&gt;.

Finally, if the string is &lt;literal&gt;'range'&lt;/literal&gt; then the variant
contains a pair of like-typed values -- the minimum and maximum
permissible values for this key.

This information should not be used by normal programs.  It is
considered to be a hint for introspection purposes.  Normal programs
should already know what is permitted by their own schema.  The
format may change in any way in the future -- but particularly, new
forms may be added to the possibilities described above.

It is a programmer error to give a @key that isn't contained in the
schema for @settings.

You should free the returned value with g_variant_unref() when it is
no longer needed.

Since: 2.28

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GSettings
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to query the range of
</parameter_description>
</parameter>
</parameters>
<return> a #GVariant describing the range
</return>
</function>

<function name="g_settings_get_string">
<description>
Gets the value that is stored at @key in @settings.

A convenience variant of g_settings_get() for strings.

It is a programmer error to give a @key that isn't specified as
having a string type in the schema for @settings.

Since: 2.26

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GSettings object
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to get the value for
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated string
</return>
</function>

<function name="g_settings_get_strv">
<description>
A convenience variant of g_settings_get() for string arrays.

It is a programmer error to give a @key that isn't specified as
having an array of strings type in the schema for @settings.

Since: 2.26

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GSettings object
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to get the value for
</parameter_description>
</parameter>
</parameters>
<return> a
newly-allocated, %NULL-terminated array of strings, the value that
is stored at @key in @settings.
</return>
</function>

<function name="g_settings_get_value">
<description>
Gets the value that is stored in @settings for @key.

It is a programmer error to give a @key that isn't contained in the
schema for @settings.

Since: 2.26

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GSettings object
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to get the value for
</parameter_description>
</parameter>
</parameters>
<return> a new #GVariant
</return>
</function>

<function name="g_settings_is_writable">
<description>
Finds out if a key can be written or not

Since: 2.26

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GSettings object
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of a key
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the key @name is writable
</return>
</function>

<function name="g_settings_list_children">
<description>
Gets the list of children on @settings.

The list is exactly the list of strings for which it is not an error
to call g_settings_get_child().

For GSettings objects that are lists, this value can change at any
time and you should connect to the &quot;children-changed&quot; signal to watch
for those changes.  Note that there is a race condition here: you may
request a child after listing it only for it to have been destroyed
in the meantime.  For this reason, g_settings_get_child() may return
%NULL even for a child that was listed by this function.

For GSettings objects that are not lists, you should probably not be
calling this function from &quot;normal&quot; code (since you should already
know what children are in your schema).  This function may still be
useful there for introspection reasons, however.

You should free the return value with g_strfreev() when you are done
with it.

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GSettings object
</parameter_description>
</parameter>
</parameters>
<return> a list of the children on @settings
</return>
</function>

<function name="g_settings_list_keys">
<description>
Introspects the list of keys on @settings.

You should probably not be calling this function from &quot;normal&quot; code
(since you should already know what keys are in your schema).  This
function is intended for introspection reasons.

You should free the return value with g_strfreev() when you are done
with it.

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GSettings object
</parameter_description>
</parameter>
</parameters>
<return> a list of the keys on @settings
</return>
</function>

<function name="g_settings_list_relocatable_schemas">
<description>
Gets a list of the relocatable #GSettings schemas installed on the
system.  These are schemas that do not provide their own path.  It is
usual to instantiate these schemas directly, but if you want to you
can use g_settings_new_with_path() to specify the path.

The output of this function, tTaken together with the output of
g_settings_list_schemas() represents the complete list of all
installed schemas.

Since: 2.28

</description>
<parameters>
</parameters>
<return> a list of relocatable
#GSettings schemas that are available.  The list must not be
modified or freed.

</return>
</function>

<function name="g_settings_list_schemas">
<description>
Gets a list of the #GSettings schemas installed on the system.  The
returned list is exactly the list of schemas for which you may call
g_settings_new() without adverse effects.

This function does not list the schemas that do not provide their own
paths (ie: schemas for which you must use
g_settings_new_with_path()).  See
g_settings_list_relocatable_schemas() for that.

Since: 2.26

</description>
<parameters>
</parameters>
<return>  a list of #GSettings
schemas that are available.  The list must not be modified or
freed.

</return>
</function>

<function name="g_settings_new">
<description>
Creates a new #GSettings object with a given schema.

Signals on the newly created #GSettings object will be dispatched
via the thread-default #GMainContext in effect at the time of the
call to g_settings_new().  The new #GSettings will hold a reference
on the context.  See g_main_context_push_thread_default().

Since: 2.26

</description>
<parameters>
<parameter name="schema">
<parameter_description> the name of the schema
</parameter_description>
</parameter>
</parameters>
<return> a new #GSettings object
</return>
</function>

<function name="g_settings_new_with_backend">
<description>
Creates a new #GSettings object with a given schema and backend.

Creating settings objects with an different backend allows accessing settings
from a database other than the usual one.  For example, it may make
sense to pass a backend corresponding to the &quot;defaults&quot; settings database on
the system to get a settings object that modifies the system default
settings instead of the settings for this user.

Since: 2.26

</description>
<parameters>
<parameter name="schema">
<parameter_description> the name of the schema
</parameter_description>
</parameter>
<parameter name="backend">
<parameter_description> the #GSettingsBackend to use
</parameter_description>
</parameter>
</parameters>
<return> a new #GSettings object
</return>
</function>

<function name="g_settings_new_with_backend_and_path">
<description>
Creates a new #GSettings object with a given schema, backend and
path.

This is a mix of g_settings_new_with_backend() and
g_settings_new_with_path().

Since: 2.26

</description>
<parameters>
<parameter name="schema">
<parameter_description> the name of the schema
</parameter_description>
</parameter>
<parameter name="backend">
<parameter_description> the #GSettingsBackend to use
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> the path to use
</parameter_description>
</parameter>
</parameters>
<return> a new #GSettings object
</return>
</function>

<function name="g_settings_new_with_path">
<description>
Creates a new #GSettings object with a given schema and path.

You only need to do this if you want to directly create a settings
object with a schema that doesn't have a specified path of its own.
That's quite rare.

It is a programmer error to call this function for a schema that
has an explicitly specified path.

Since: 2.26

</description>
<parameters>
<parameter name="schema">
<parameter_description> the name of the schema
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> the path to use
</parameter_description>
</parameter>
</parameters>
<return> a new #GSettings object
</return>
</function>

<function name="g_settings_range_check">
<description>
Checks if the given @value is of the correct type and within the
permitted range for @key.

This API is not intended to be used by normal programs -- they should
already know what is permitted by their own schemas.  This API is
meant to be used by programs such as editors or commandline tools.

It is a programmer error to give a @key that isn't contained in the
schema for @settings.

Since: 2.28

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GSettings
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to check
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value to check
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @value is valid for @key
</return>
</function>

<function name="g_settings_reset">
<description>
Resets @key to its default value.

This call resets the key, as much as possible, to its default value.
That might the value specified in the schema or the one set by the
administrator.

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GSettings object
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the name of a key
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_settings_revert">
<description>
Reverts all non-applied changes to the settings.  This function
does nothing unless @settings is in 'delay-apply' mode; see
g_settings_delay().  In the normal case settings are always applied
immediately.

Change notifications will be emitted for affected keys.

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GSettings instance
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_settings_set">
<description>
Sets @key in @settings to @value.

A convenience function that combines g_settings_set_value() with
g_variant_new().

It is a programmer error to give a @key that isn't contained in the
schema for @settings or for the #GVariantType of @format to mismatch
the type given in the schema.

Since: 2.26

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GSettings object
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the name of the key to set
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a #GVariant format string
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> arguments as per @format
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if setting the key succeeded,
%FALSE if the key was not writable
</return>
</function>

<function name="g_settings_set_boolean">
<description>
Sets @key in @settings to @value.

A convenience variant of g_settings_set() for booleans.

It is a programmer error to give a @key that isn't specified as
having a boolean type in the schema for @settings.

Since: 2.26

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GSettings object
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the name of the key to set
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value to set it to
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if setting the key succeeded,
%FALSE if the key was not writable
</return>
</function>

<function name="g_settings_set_double">
<description>
Sets @key in @settings to @value.

A convenience variant of g_settings_set() for doubles.

It is a programmer error to give a @key that isn't specified as
having a 'double' type in the schema for @settings.

Since: 2.26

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GSettings object
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the name of the key to set
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value to set it to
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if setting the key succeeded,
%FALSE if the key was not writable
</return>
</function>

<function name="g_settings_set_enum">
<description>
Looks up the enumerated type nick for @value and writes it to @key,
within @settings.

It is a programmer error to give a @key that isn't contained in the
schema for @settings or is not marked as an enumerated type, or for
@value not to be a valid value for the named type.

After performing the write, accessing @key directly with
g_settings_get_string() will return the 'nick' associated with
@value.

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GSettings object
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key, within @settings
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> an enumerated value
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if the set succeeds
</return>
</function>

<function name="g_settings_set_flags">
<description>
Looks up the flags type nicks for the bits specified by @value, puts
them in an array of strings and writes the array to @key, withing
@settings.

It is a programmer error to give a @key that isn't contained in the
schema for @settings or is not marked as a flags type, or for @value
to contain any bits that are not value for the named type.

After performing the write, accessing @key directly with
g_settings_get_strv() will return an array of 'nicks'; one for each
bit in @value.

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GSettings object
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key, within @settings
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a flags value
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if the set succeeds
</return>
</function>

<function name="g_settings_set_int">
<description>
Sets @key in @settings to @value.

A convenience variant of g_settings_set() for 32-bit integers.

It is a programmer error to give a @key that isn't specified as
having a int32 type in the schema for @settings.

Since: 2.26

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GSettings object
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the name of the key to set
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value to set it to
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if setting the key succeeded,
%FALSE if the key was not writable
</return>
</function>

<function name="g_settings_set_string">
<description>
Sets @key in @settings to @value.

A convenience variant of g_settings_set() for strings.

It is a programmer error to give a @key that isn't specified as
having a string type in the schema for @settings.

Since: 2.26

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GSettings object
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the name of the key to set
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value to set it to
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if setting the key succeeded,
%FALSE if the key was not writable
</return>
</function>

<function name="g_settings_set_strv">
<description>
Sets @key in @settings to @value.

A convenience variant of g_settings_set() for string arrays.  If
@value is %NULL, then @key is set to be the empty array.

It is a programmer error to give a @key that isn't specified as
having an array of strings type in the schema for @settings.

Since: 2.26

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GSettings object
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the name of the key to set
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value to set it to, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if setting the key succeeded,
%FALSE if the key was not writable
</return>
</function>

<function name="g_settings_set_value">
<description>
Sets @key in @settings to @value.

It is a programmer error to give a @key that isn't contained in the
schema for @settings or for @value to have the incorrect type, per
the schema.

If @value is floating then this function consumes the reference.

Since: 2.26

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GSettings object
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the name of the key to set
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GVariant of the correct type
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if setting the key succeeded,
%FALSE if the key was not writable
</return>
</function>

<function name="g_settings_sync">
<description>
Ensures that all pending operations for the given are complete for
the default backend.

Writes made to a #GSettings are handled asynchronously.  For this
reason, it is very unlikely that the changes have it to disk by the
time g_settings_set() returns.

This call will block until all of the writes have made it to the
backend.  Since the mainloop is not running, no change notifications
will be dispatched during this call (but some may be queued by the
time the call is done).

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_settings_unbind">
<description>
Removes an existing binding for @property on @object.

Note that bindings are automatically removed when the
object is finalized, so it is rarely necessary to call this
function.

Since: 2.26

</description>
<parameters>
<parameter name="object">
<parameter_description> the object
</parameter_description>
</parameter>
<parameter name="property">
<parameter_description> the property whose binding is removed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_simple_action_group_insert">
<description>
Adds an action to the action group.

If the action group already contains an action with the same name as
@action then the old action is dropped from the group.

The action group takes its own reference on @action.

Since: 2.28

</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleActionGroup
</parameter_description>
</parameter>
<parameter name="action">
<parameter_description> a #GAction
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_simple_action_group_lookup">
<description>
Looks up the action with the name @action_name in the group.

If no such action exists, returns %NULL.

Since: 2.28

</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleActionGroup
</parameter_description>
</parameter>
<parameter name="action_name">
<parameter_description> the name of an action
</parameter_description>
</parameter>
</parameters>
<return> a #GAction, or %NULL

</return>
</function>

<function name="g_simple_action_group_new">
<description>
Creates a new, empty, #GSimpleActionGroup.

Since: 2.28

</description>
<parameters>
</parameters>
<return> a new #GSimpleActionGroup

</return>
</function>

<function name="g_simple_action_group_remove">
<description>
Removes the named action from the action group.

If no action of this name is in the group then nothing happens.

Since: 2.28

</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleActionGroup
</parameter_description>
</parameter>
<parameter name="action_name">
<parameter_description> the name of the action
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_simple_action_new">
<description>
Creates a new action.

The created action is stateless.  See g_simple_action_new_stateful().

Since: 2.28

</description>
<parameters>
<parameter name="name">
<parameter_description> the name of the action
</parameter_description>
</parameter>
<parameter name="parameter_type">
<parameter_description> the type of parameter to the activate function
</parameter_description>
</parameter>
</parameters>
<return> a new #GSimpleAction

</return>
</function>

<function name="g_simple_action_new_stateful">
<description>
Creates a new stateful action.

@state is the initial state of the action.  All future state values
must have the same #GVariantType as the initial state.

If the @state GVariant is floating, it is consumed.

Since: 2.28

</description>
<parameters>
<parameter name="name">
<parameter_description> the name of the action
</parameter_description>
</parameter>
<parameter name="parameter_type">
<parameter_description> the type of the parameter to the activate function
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> the initial state of the action
</parameter_description>
</parameter>
</parameters>
<return> a new #GSimpleAction

</return>
</function>

<function name="g_simple_action_set_enabled">
<description>
Sets the action as enabled or not.

An action must be enabled in order to be activated or in order to
have its state changed from outside callers.

Since: 2.28

</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAction
</parameter_description>
</parameter>
<parameter name="enabled">
<parameter_description> whether the action is enabled
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_simple_async_report_error_in_idle">
<description>
Reports an error in an asynchronous function in an idle function by
directly setting the contents of the #GAsyncResult with the given error
information.

</description>
<parameters>
<parameter name="object">
<parameter_description> a #GObject, or %NULL.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback.
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> a #GQuark containing the error domain (usually #G_IO_ERROR).
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> a specific error code.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a formatted error reporting string.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of variables to fill in @format.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_simple_async_report_gerror_in_idle">
<description>
Reports an error in an idle function. Similar to
g_simple_async_report_error_in_idle(), but takes a #GError rather
than building a new one.

</description>
<parameters>
<parameter name="object">
<parameter_description> a #GObject, or %NULL
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> the #GError to report
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_simple_async_report_take_gerror_in_idle">
<description>
Reports an error in an idle function. Similar to
g_simple_async_report_gerror_in_idle(), but takes over the caller's
ownership of @error, so the caller does not have to free it any more.

Since: 2.28

</description>
<parameters>
<parameter name="object">
<parameter_description> a #GObject, or %NULL
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> the #GError to report
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_simple_async_result_complete">
<description>
Completes an asynchronous I/O job immediately. Must be called in
the thread where the asynchronous result was to be delivered, as it
invokes the callback directly. If you are in a different thread use
g_simple_async_result_complete_in_idle().

Calling this function takes a reference to @simple for as long as
is needed to complete the call.

</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_simple_async_result_complete_in_idle">
<description>
Completes an asynchronous function in an idle handler in the &lt;link
linkend=&quot;g-main-context-push-thread-default&quot;&gt;thread-default main
loop&lt;/link&gt; of the thread that @simple was initially created in.

Calling this function takes a reference to @simple for as long as
is needed to complete the call.

</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_simple_async_result_get_op_res_gboolean">
<description>
Gets the operation result boolean from within the asynchronous result.


</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the operation's result was %TRUE, %FALSE
if the operation's result was %FALSE.
</return>
</function>

<function name="g_simple_async_result_get_op_res_gpointer">
<description>
Gets a pointer result as returned by the asynchronous function.


</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
</parameters>
<return> a pointer from the result.
</return>
</function>

<function name="g_simple_async_result_get_op_res_gssize">
<description>
Gets a gssize from the asynchronous result.


</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
</parameters>
<return> a gssize returned from the asynchronous function.
</return>
</function>

<function name="g_simple_async_result_get_source_tag">
<description>
Gets the source tag for the #GSimpleAsyncResult.


</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
</parameters>
<return> a #gpointer to the source object for the #GSimpleAsyncResult.
</return>
</function>

<function name="g_simple_async_result_is_valid">
<description>
Ensures that the data passed to the _finish function of an async
operation is consistent.  Three checks are performed.

First, @result is checked to ensure that it is really a
#GSimpleAsyncResult.  Second, @source is checked to ensure that it
matches the source object of @result.  Third, @source_tag is
checked to ensure that it is either %NULL (as it is when the result was
created by g_simple_async_report_error_in_idle() or
g_simple_async_report_gerror_in_idle()) or equal to the
@source_tag argument given to g_simple_async_result_new() (which, by
convention, is a pointer to the _async function corresponding to the
_finish function from which this function is called).

Since: 2.20

</description>
<parameters>
<parameter name="result">
<parameter_description> the #GAsyncResult passed to the _finish function.
</parameter_description>
</parameter>
<parameter name="source">
<parameter_description> the #GObject passed to the _finish function.
</parameter_description>
</parameter>
<parameter name="source_tag">
<parameter_description> the asynchronous function.
</parameter_description>
</parameter>
</parameters>
<return> #TRUE if all checks passed or #FALSE if any failed.

</return>
</function>

<function name="g_simple_async_result_new">
<description>
Creates a #GSimpleAsyncResult.


</description>
<parameters>
<parameter name="source_object">
<parameter_description> a #GObject, or %NULL.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback.
</parameter_description>
</parameter>
<parameter name="source_tag">
<parameter_description> the asynchronous function.
</parameter_description>
</parameter>
</parameters>
<return> a #GSimpleAsyncResult.
</return>
</function>

<function name="g_simple_async_result_new_error">
<description>
Creates a new #GSimpleAsyncResult with a set error.


</description>
<parameters>
<parameter name="source_object">
<parameter_description> a #GObject, or %NULL.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback.
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> a #GQuark.
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> an error code.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a string with format characters.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of values to insert into @format.
</parameter_description>
</parameter>
</parameters>
<return> a #GSimpleAsyncResult.
</return>
</function>

<function name="g_simple_async_result_new_from_error">
<description>
Creates a #GSimpleAsyncResult from an error condition.


</description>
<parameters>
<parameter name="source_object">
<parameter_description> a #GObject, or %NULL.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError
</parameter_description>
</parameter>
</parameters>
<return> a #GSimpleAsyncResult.
</return>
</function>

<function name="g_simple_async_result_new_take_error">
<description>
Creates a #GSimpleAsyncResult from an error condition, and takes over the
caller's ownership of @error, so the caller does not need to free it anymore.

Since: 2.28

</description>
<parameters>
<parameter name="source_object">
<parameter_description> a #GObject, or %NULL
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError
</parameter_description>
</parameter>
</parameters>
<return> a #GSimpleAsyncResult

</return>
</function>

<function name="g_simple_async_result_propagate_error">
<description>
Propagates an error from within the simple asynchronous result to
a given destination.


</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> a location to propagate the error to.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the error was propagated to @dest. %FALSE otherwise.
</return>
</function>

<function name="g_simple_async_result_run_in_thread">
<description>
Runs the asynchronous job in a separate thread and then calls
g_simple_async_result_complete_in_idle() on @simple to return
the result to the appropriate main loop.

Calling this function takes a reference to @simple for as long as
is needed to run the job and report its completion.

</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #GSimpleAsyncThreadFunc.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the io priority of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_simple_async_result_set_error">
<description>
Sets an error within the asynchronous result without a #GError.

</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> a #GQuark (usually #G_IO_ERROR).
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> an error code.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a formatted error reporting string.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of variables to fill in @format.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_simple_async_result_set_error_va">
<description>
Sets an error within the asynchronous result without a #GError.
Unless writing a binding, see g_simple_async_result_set_error().

</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> a #GQuark (usually #G_IO_ERROR).
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> an error code.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a formatted error reporting string.
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> va_list of arguments.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_simple_async_result_set_from_error">
<description>
Sets the result from a #GError.

</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_simple_async_result_set_handle_cancellation">
<description>
Sets whether to handle cancellation within the asynchronous operation.


</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
<parameter name="handle_cancellation">
<parameter_description> a #gboolean.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_simple_async_result_set_op_res_gboolean">
<description>
Sets the operation result to a boolean within the asynchronous result.

</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
<parameter name="op_res">
<parameter_description> a #gboolean.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_simple_async_result_set_op_res_gpointer">
<description>
Sets the operation result within the asynchronous result to a pointer.

</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
<parameter name="op_res">
<parameter_description> a pointer result from an asynchronous function.
</parameter_description>
</parameter>
<parameter name="destroy_op_res">
<parameter_description> a #GDestroyNotify function.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_simple_async_result_set_op_res_gssize">
<description>
Sets the operation result within the asynchronous result to
the given @op_res.

</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
<parameter name="op_res">
<parameter_description> a #gssize.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_simple_async_result_take_error">
<description>
Sets the result from @error, and takes over the caller's ownership
of @error, so the caller does not need to free it any more.

Since: 2.28

</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_simple_permission_new">
<description>
Creates a new #GPermission instance that represents an action that is
either always or never allowed.

Since: 2.26

</description>
<parameters>
<parameter name="allowed">
<parameter_description> %TRUE if the action is allowed
</parameter_description>
</parameter>
</parameters>
<return> the #GSimplePermission, as a #GPermission
</return>
</function>

<function name="g_socket_accept">
<description>
Accept incoming connections on a connection-based socket. This removes
the first outstanding connection request from the listening socket and
creates a #GSocket object for it.

The @socket must be bound to a local address with g_socket_bind() and
must be listening for incoming connections (g_socket_listen()).

If there are no outstanding connections then the operation will block
or return %G_IO_ERROR_WOULD_BLOCK if non-blocking I/O is enabled.
To be notified of an incoming connection, wait for the %G_IO_IN condition.

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a %GCancellable or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> a new #GSocket, or %NULL on error.
Free the returned object with g_object_unref().

</return>
</function>

<function name="g_socket_address_enumerator_next">
<description>
Retrieves the next #GSocketAddress from @enumerator. Note that this
may block for some amount of time. (Eg, a #GNetworkAddress may need
to do a DNS lookup before it can return an address.) Use
g_socket_address_enumerator_next_async() if you need to avoid
blocking.

If @enumerator is expected to yield addresses, but for some reason
is unable to (eg, because of a DNS error), then the first call to
g_socket_address_enumerator_next() will return an appropriate error
in *@error. However, if the first call to
g_socket_address_enumerator_next() succeeds, then any further
internal errors (other than @cancellable being triggered) will be
ignored.


</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GSocketAddressEnumerator
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketAddress (owned by the caller), or %NULL on
error (in which case *@error will be set) or if there are no
more addresses.
</return>
</function>

<function name="g_socket_address_enumerator_next_async">
<description>
Asynchronously retrieves the next #GSocketAddress from @enumerator
and then calls @callback, which must call
g_socket_address_enumerator_next_finish() to get the result.

</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GSocketAddressEnumerator
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request
is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_address_enumerator_next_finish">
<description>
Retrieves the result of a completed call to
g_socket_address_enumerator_next_async(). See
g_socket_address_enumerator_next() for more information about
error handling.


</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GSocketAddressEnumerator
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketAddress (owned by the caller), or %NULL on
error (in which case *@error will be set) or if there are no
more addresses.
</return>
</function>

<function name="g_socket_address_get_family">
<description>
Gets the socket family type of @address.

Since: 2.22

</description>
<parameters>
<parameter name="address">
<parameter_description> a #GSocketAddress
</parameter_description>
</parameter>
</parameters>
<return> the socket family type of @address.

</return>
</function>

<function name="g_socket_address_get_native_size">
<description>
Gets the size of @address's native &lt;type&gt;struct sockaddr&lt;/type&gt;.
You can use this to allocate memory to pass to
g_socket_address_to_native().

Since: 2.22

</description>
<parameters>
<parameter name="address">
<parameter_description> a #GSocketAddress
</parameter_description>
</parameter>
</parameters>
<return> the size of the native &lt;type&gt;struct sockaddr&lt;/type&gt; that
@address represents

</return>
</function>

<function name="g_socket_address_new_from_native">
<description>
Creates a #GSocketAddress subclass corresponding to the native
&lt;type&gt;struct sockaddr&lt;/type&gt; @native.

Since: 2.22

</description>
<parameters>
<parameter name="native">
<parameter_description> a pointer to a &lt;type&gt;struct sockaddr&lt;/type&gt;
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the size of the memory location pointed to by @native
</parameter_description>
</parameter>
</parameters>
<return> a new #GSocketAddress if @native could successfully be converted,
otherwise %NULL.

</return>
</function>

<function name="g_socket_address_to_native">
<description>
Converts a #GSocketAddress to a native &lt;type&gt;struct
sockaddr&lt;/type&gt;, which can be passed to low-level functions like
connect() or bind().

If not enough space is availible, a %G_IO_ERROR_NO_SPACE error is
returned. If the address type is not known on the system
then a %G_IO_ERROR_NOT_SUPPORTED error is returned.

Since: 2.22

</description>
<parameters>
<parameter name="address">
<parameter_description> a #GSocketAddress
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> a pointer to a memory location that will contain the native
&lt;type&gt;struct sockaddr&lt;/type&gt;.
</parameter_description>
</parameter>
<parameter name="destlen">
<parameter_description> the size of @dest. Must be at least as large as
g_socket_address_get_native_size().
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @dest was filled in, %FALSE on error

</return>
</function>

<function name="g_socket_bind">
<description>
When a socket is created it is attached to an address family, but it
doesn't have an address in this family. g_socket_bind() assigns the
address (sometimes called name) of the socket.

It is generally required to bind to a local address before you can
receive connections. (See g_socket_listen() and g_socket_accept() ).
In certain situations, you may also want to bind a socket that will be
used to initiate connections, though this is not normally required.

@allow_reuse should be %TRUE for server sockets (sockets that you will
eventually call g_socket_accept() on), and %FALSE for client sockets.
(Specifically, if it is %TRUE, then g_socket_bind() will set the
%SO_REUSEADDR flag on the socket, allowing it to bind @address even if
that address was previously used by another socket that has not yet been
fully cleaned-up by the kernel. Failing to set this flag on a server
socket may cause the bind call to return %G_IO_ERROR_ADDRESS_IN_USE if
the server program is stopped and then immediately restarted.)

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
<parameter name="address">
<parameter_description> a #GSocketAddress specifying the local address.
</parameter_description>
</parameter>
<parameter name="allow_reuse">
<parameter_description> whether to allow reusing this address
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on error.

</return>
</function>

<function name="g_socket_check_connect_result">
<description>
Checks and resets the pending connect error for the socket.
This is used to check for errors when g_socket_connect() is
used in non-blocking mode.

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if no error, %FALSE otherwise, setting @error to the error

</return>
</function>

<function name="g_socket_client_add_application_proxy">
<description>
Enable proxy protocols to be handled by the application. When the
indicated proxy protocol is returned by the #GProxyResolver,
#GSocketClient will consider this protocol as supported but will
not try find a #GProxy instance to handle handshaking. The
application must check for this case by calling
g_socket_connection_get_remote_address() on the returned
#GSocketConnection, and seeing if it's a #GProxyAddress of the
appropriate type, to determine whether or not it needs to handle
the proxy handshaking itself.

This should be used for proxy protocols that are dialects of
another protocol such as HTTP proxy. It also allows cohabitation of
proxy protocols that are reused between protocols. A good example
is HTTP. It can be used to proxy HTTP, FTP and Gopher and can also
be use as generic socket proxy through the HTTP CONNECT method.

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GSocketClient
</parameter_description>
</parameter>
<parameter name="protocol">
<parameter_description> The proxy protocol
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_client_connect">
<description>
Tries to resolve the @connectable and make a network connection to it..

Upon a successful connection, a new #GSocketConnection is constructed
and returned.  The caller owns this new object and must drop their
reference to it when finished with it.

The type of the #GSocketConnection object returned depends on the type of
the underlying socket that is used. For instance, for a TCP/IP connection
it will be a #GTcpConnection.

The socket created will be the same family as the the address that the
@connectable resolves to, unless family is set with g_socket_client_set_family()
or indirectly via g_socket_client_set_local_address(). The socket type
defaults to %G_SOCKET_TYPE_STREAM but can be set with
g_socket_client_set_socket_type().

If a local address is specified with g_socket_client_set_local_address() the
socket will be bound to this address before connecting.

Since: 2.22

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GSocketClient.
</parameter_description>
</parameter>
<parameter name="connectable">
<parameter_description> a #GSocketConnectable specifying the remote address.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketConnection on success, %NULL on error.

</return>
</function>

<function name="g_socket_client_connect_async">
<description>
This is the asynchronous version of g_socket_client_connect().

When the operation is finished @callback will be
called. You can then call g_socket_client_connect_finish() to get
the result of the operation.

Since: 2.22

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GTcpClient
</parameter_description>
</parameter>
<parameter name="connectable">
<parameter_description> a #GSocketConnectable specifying the remote address.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data for the callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_client_connect_finish">
<description>
Finishes an async connect operation. See g_socket_client_connect_async()

Since: 2.22

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GSocketClient.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketConnection on success, %NULL on error.

</return>
</function>

<function name="g_socket_client_connect_to_host">
<description>
This is a helper function for g_socket_client_connect().

Attempts to create a TCP connection to the named host.

@host_and_port may be in any of a number of recognised formats; an IPv6
address, an IPv4 address, or a domain name (in which case a DNS
lookup is performed).  Quoting with [] is supported for all address
types.  A port override may be specified in the usual way with a
colon.  Ports may be given as decimal numbers or symbolic names (in
which case an /etc/services lookup is performed).

If no port override is given in @host_and_port then @default_port will be
used as the port number to connect to.

In general, @host_and_port is expected to be provided by the user (allowing
them to give the hostname, and a port overide if necessary) and
@default_port is expected to be provided by the application.

In the case that an IP address is given, a single connection
attempt is made.  In the case that a name is given, multiple
connection attempts may be made, in turn and according to the
number of address records in DNS, until a connection succeeds.

Upon a successful connection, a new #GSocketConnection is constructed
and returned.  The caller owns this new object and must drop their
reference to it when finished with it.

In the event of any failure (DNS error, service not found, no hosts
connectable) %NULL is returned and @error (if non-%NULL) is set
accordingly.

Since: 2.22

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GSocketClient
</parameter_description>
</parameter>
<parameter name="host_and_port">
<parameter_description> the name and optionally port of the host to connect to
</parameter_description>
</parameter>
<parameter name="default_port">
<parameter_description> the default port to connect to
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a pointer to a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketConnection on success, %NULL on error.

</return>
</function>

<function name="g_socket_client_connect_to_host_async">
<description>
This is the asynchronous version of g_socket_client_connect_to_host().

When the operation is finished @callback will be
called. You can then call g_socket_client_connect_to_host_finish() to get
the result of the operation.

Since: 2.22

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GTcpClient
</parameter_description>
</parameter>
<parameter name="host_and_port">
<parameter_description> the name and optionally the port of the host to connect to
</parameter_description>
</parameter>
<parameter name="default_port">
<parameter_description> the default port to connect to
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data for the callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_client_connect_to_host_finish">
<description>
Finishes an async connect operation. See g_socket_client_connect_to_host_async()

Since: 2.22

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GSocketClient.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketConnection on success, %NULL on error.

</return>
</function>

<function name="g_socket_client_connect_to_service">
<description>
Attempts to create a TCP connection to a service.

This call looks up the SRV record for @service at @domain for the
&quot;tcp&quot; protocol.  It then attempts to connect, in turn, to each of
the hosts providing the service until either a connection succeeds
or there are no hosts remaining.

Upon a successful connection, a new #GSocketConnection is constructed
and returned.  The caller owns this new object and must drop their
reference to it when finished with it.

In the event of any failure (DNS error, service not found, no hosts
connectable) %NULL is returned and @error (if non-%NULL) is set
accordingly.

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GSocketConnection
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> a domain name
</parameter_description>
</parameter>
<parameter name="service">
<parameter_description> the name of the service to connect to
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a pointer to a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketConnection if successful, or %NULL on error
</return>
</function>

<function name="g_socket_client_connect_to_service_async">
<description>
This is the asynchronous version of
g_socket_client_connect_to_service().

Since: 2.22

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GSocketClient
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> a domain name
</parameter_description>
</parameter>
<parameter name="service">
<parameter_description> the name of the service to connect to
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data for the callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_client_connect_to_service_finish">
<description>
Finishes an async connect operation. See g_socket_client_connect_to_service_async()

Since: 2.22

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GSocketClient.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketConnection on success, %NULL on error.

</return>
</function>

<function name="g_socket_client_connect_to_uri">
<description>
This is a helper function for g_socket_client_connect().

Attempts to create a TCP connection with a network URI.

@uri may be any valid URI containing an &quot;authority&quot; (hostname/port)
component. If a port is not specified in the URI, @default_port
will be used. TLS will be negotiated if #GSocketClient:tls is %TRUE.
(#GSocketClient does not know to automatically assume TLS for
certain URI schemes.)

Using this rather than g_socket_client_connect() or
g_socket_client_connect_to_host() allows #GSocketClient to
determine when to use application-specific proxy protocols.

Upon a successful connection, a new #GSocketConnection is constructed
and returned.  The caller owns this new object and must drop their
reference to it when finished with it.

In the event of any failure (DNS error, service not found, no hosts
connectable) %NULL is returned and @error (if non-%NULL) is set
accordingly.

Since: 2.26

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GSocketClient
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> A network URI
</parameter_description>
</parameter>
<parameter name="default_port">
<parameter_description> the default port to connect to
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a pointer to a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketConnection on success, %NULL on error.

</return>
</function>

<function name="g_socket_client_connect_to_uri_async">
<description>
This is the asynchronous version of g_socket_client_connect_to_uri().

When the operation is finished @callback will be
called. You can then call g_socket_client_connect_to_uri_finish() to get
the result of the operation.

Since: 2.26

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GSocketClient
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a network uri
</parameter_description>
</parameter>
<parameter name="default_port">
<parameter_description> the default port to connect to
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data for the callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_client_connect_to_uri_finish">
<description>
Finishes an async connect operation. See g_socket_client_connect_to_uri_async()

Since: 2.26

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GSocketClient.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketConnection on success, %NULL on error.

</return>
</function>

<function name="g_socket_client_get_enable_proxy">
<description>
Gets the proxy enable state; see g_socket_client_set_enable_proxy()

Since: 2.26

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GSocketClient.
</parameter_description>
</parameter>
</parameters>
<return> whether proxying is enabled

</return>
</function>

<function name="g_socket_client_get_family">
<description>
Gets the socket family of the socket client.

See g_socket_client_set_family() for details.

Since: 2.22

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GSocketClient.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketFamily

</return>
</function>

<function name="g_socket_client_get_local_address">
<description>
Gets the local address of the socket client.

See g_socket_client_set_local_address() for details.

Since: 2.22

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GSocketClient.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketAddres or %NULL. don't free

</return>
</function>

<function name="g_socket_client_get_protocol">
<description>
Gets the protocol name type of the socket client.

See g_socket_client_set_protocol() for details.

Since: 2.22

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GSocketClient
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketProtocol

</return>
</function>

<function name="g_socket_client_get_socket_type">
<description>
Gets the socket type of the socket client.

See g_socket_client_set_socket_type() for details.

Since: 2.22

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GSocketClient.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketFamily

</return>
</function>

<function name="g_socket_client_get_timeout">
<description>
Gets the I/O timeout time for sockets created by @client.

See g_socket_client_set_timeout() for details.

Since: 2.26

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GSocketClient
</parameter_description>
</parameter>
</parameters>
<return> the timeout in seconds

</return>
</function>

<function name="g_socket_client_get_tls">
<description>
Gets whether @client creates TLS connections. See
g_socket_client_set_tls() for details.

Since: 2.28

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GSocketClient.
</parameter_description>
</parameter>
</parameters>
<return> whether @client uses TLS

</return>
</function>

<function name="g_socket_client_get_tls_validation_flags">
<description>
Gets the TLS validation flags used creating TLS connections via
@client.

Since: 2.28

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GSocketClient.
</parameter_description>
</parameter>
</parameters>
<return> the TLS validation flags

</return>
</function>

<function name="g_socket_client_new">
<description>
Creates a new #GSocketClient with the default options.

Since: 2.22

</description>
<parameters>
</parameters>
<return> a #GSocketClient.
Free the returned object with g_object_unref().

</return>
</function>

<function name="g_socket_client_set_enable_proxy">
<description>
Sets whether or not @client attempts to make connections via a
proxy server. When enabled (the default), #GSocketClient will use a
#GProxyResolver to determine if a proxy protocol such as SOCKS is
needed, and automatically do the necessary proxy negotiation.

Since: 2.26

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GSocketClient.
</parameter_description>
</parameter>
<parameter name="enable">
<parameter_description> whether to enable proxies
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_client_set_family">
<description>
Sets the socket family of the socket client.
If this is set to something other than %G_SOCKET_FAMILY_INVALID
then the sockets created by this object will be of the specified
family.

This might be useful for instance if you want to force the local
connection to be an ipv4 socket, even though the address might
be an ipv6 mapped to ipv4 address.

Since: 2.22

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GSocketClient.
</parameter_description>
</parameter>
<parameter name="family">
<parameter_description> a #GSocketFamily
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_client_set_local_address">
<description>
Sets the local address of the socket client.
The sockets created by this object will bound to the
specified address (if not %NULL) before connecting.

This is useful if you want to ensure the the local
side of the connection is on a specific port, or on
a specific interface.

Since: 2.22

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GSocketClient.
</parameter_description>
</parameter>
<parameter name="address">
<parameter_description> a #GSocketAddress, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_client_set_protocol">
<description>
Sets the protocol of the socket client.
The sockets created by this object will use of the specified
protocol.

If @protocol is %0 that means to use the default
protocol for the socket family and type.

Since: 2.22

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GSocketClient.
</parameter_description>
</parameter>
<parameter name="protocol">
<parameter_description> a #GSocketProtocol
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_client_set_socket_type">
<description>
Sets the socket type of the socket client.
The sockets created by this object will be of the specified
type.

It doesn't make sense to specify a type of %G_SOCKET_TYPE_DATAGRAM,
as GSocketClient is used for connection oriented services.

Since: 2.22

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GSocketClient.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #GSocketType
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_client_set_timeout">
<description>
Sets the I/O timeout for sockets created by @client. @timeout is a
time in seconds, or 0 for no timeout (the default).

The timeout value affects the initial connection attempt as well,
so setting this may cause calls to g_socket_client_connect(), etc,
to fail with %G_IO_ERROR_TIMED_OUT.

Since: 2.26

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GSocketClient.
</parameter_description>
</parameter>
<parameter name="timeout">
<parameter_description> the timeout
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_client_set_tls">
<description>
Sets whether @client creates TLS (aka SSL) connections. If @tls is
%TRUE, @client will wrap its connections in a #GTlsClientConnection
and perform a TLS handshake when connecting.

Note that since #GSocketClient must return a #GSocketConnection,
but #GTlsClientConnection is not a #GSocketConnection, this
actually wraps the resulting #GTlsClientConnection in a
#GTcpWrapperConnection when returning it. You can use
g_tcp_wrapper_connection_get_base_io_stream() on the return value
to extract the #GTlsClientConnection.

Since: 2.28

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GSocketClient.
</parameter_description>
</parameter>
<parameter name="tls">
<parameter_description> whether to use TLS
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_client_set_tls_validation_flags">
<description>
Sets the TLS validation flags used when creating TLS connections
via @client. The default value is %G_TLS_CERTIFICATE_VALIDATE_ALL.

Since: 2.28

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GSocketClient.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> the validation flags
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_close">
<description>
Closes the socket, shutting down any active connection.

Closing a socket does not wait for all outstanding I/O operations
to finish, so the caller should not rely on them to be guaranteed
to complete even if the close returns with no error.

Once the socket is closed, all other operations will return
%G_IO_ERROR_CLOSED. Closing a socket multiple times will not
return an error.

Sockets will be automatically closed when the last reference
is dropped, but you might want to call this function to make sure
resources are released as early as possible.

Beware that due to the way that TCP works, it is possible for
recently-sent data to be lost if either you close a socket while the
%G_IO_IN condition is set, or else if the remote connection tries to
send something to you after you close the socket but before it has
finished reading all of the data you sent. There is no easy generic
way to avoid this problem; the easiest fix is to design the network
protocol such that the client will never send data &quot;out of turn&quot;.
Another solution is for the server to half-close the connection by
calling g_socket_shutdown() with only the @shutdown_write flag set,
and then wait for the client to notice this and close its side of the
connection, after which the server can safely call g_socket_close().
(This is what #GTcpConnection does if you call
g_tcp_connection_set_graceful_disconnect(). But of course, this
only works if the client will close its connection after the server
does.)

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on error

</return>
</function>

<function name="g_socket_condition_check">
<description>
Checks on the readiness of @socket to perform operations.
The operations specified in @condition are checked for and masked
against the currently-satisfied conditions on @socket. The result
is returned.

Note that on Windows, it is possible for an operation to return
%G_IO_ERROR_WOULD_BLOCK even immediately after
g_socket_condition_check() has claimed that the socket is ready for
writing. Rather than calling g_socket_condition_check() and then
writing to the socket if it succeeds, it is generally better to
simply try writing to the socket right away, and try again later if
the initial attempt returns %G_IO_ERROR_WOULD_BLOCK.

It is meaningless to specify %G_IO_ERR or %G_IO_HUP in condition;
these conditions will always be set in the output if they are true.

This call never blocks.

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket
</parameter_description>
</parameter>
<parameter name="condition">
<parameter_description> a #GIOCondition mask to check
</parameter_description>
</parameter>
</parameters>
<return> the @GIOCondition mask of the current state

</return>
</function>

<function name="g_socket_condition_wait">
<description>
Waits for @condition to become true on @socket. When the condition
is met, %TRUE is returned.

If @cancellable is cancelled before the condition is met, or if the
socket has a timeout set and it is reached before the condition is
met, then %FALSE is returned and @error, if non-%NULL, is set to
the appropriate value (%G_IO_ERROR_CANCELLED or
%G_IO_ERROR_TIMED_OUT).

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket
</parameter_description>
</parameter>
<parameter name="condition">
<parameter_description> a #GIOCondition mask to wait for
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError pointer, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the condition was met, %FALSE otherwise

</return>
</function>

<function name="g_socket_connect">
<description>
Connect the socket to the specified remote address.

For connection oriented socket this generally means we attempt to make
a connection to the @address. For a connection-less socket it sets
the default address for g_socket_send() and discards all incoming datagrams
from other sources.

Generally connection oriented sockets can only connect once, but
connection-less sockets can connect multiple times to change the
default address.

If the connect call needs to do network I/O it will block, unless
non-blocking I/O is enabled. Then %G_IO_ERROR_PENDING is returned
and the user can be notified of the connection finishing by waiting
for the G_IO_OUT condition. The result of the connection can then be
checked with g_socket_check_connect_result().

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
<parameter name="address">
<parameter_description> a #GSocketAddress specifying the remote address.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a %GCancellable or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if connected, %FALSE on error.

</return>
</function>

<function name="g_socket_connectable_enumerate">
<description>
Creates a #GSocketAddressEnumerator for @connectable.

Since: 2.22

</description>
<parameters>
<parameter name="connectable">
<parameter_description> a #GSocketConnectable
</parameter_description>
</parameter>
</parameters>
<return> a new #GSocketAddressEnumerator.

</return>
</function>

<function name="g_socket_connectable_proxy_enumerate">
<description>
Creates a #GSocketAddressEnumerator for @connectable that will
return #GProxyAddress&lt;!-- --&gt;es for addresses that you must connect
to via a proxy.

If @connectable does not implement
g_socket_connectable_proxy_enumerate(), this will fall back to
calling g_socket_connectable_enumerate().

Since: 2.26

</description>
<parameters>
<parameter name="connectable">
<parameter_description> a #GSocketConnectable
</parameter_description>
</parameter>
</parameters>
<return> a new #GSocketAddressEnumerator.

</return>
</function>

<function name="g_socket_connection_factory_create_connection">
<description>
Creates a #GSocketConnection subclass of the right type for
@socket.

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketConnection

</return>
</function>

<function name="g_socket_connection_factory_lookup_type">
<description>
Looks up the #GType to be used when creating socket connections on
sockets with the specified @family,@type and @protocol_id.

If no type is registered, the #GSocketConnection base type is returned.

Since: 2.22

</description>
<parameters>
<parameter name="family">
<parameter_description> a #GSocketFamily
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #GSocketType
</parameter_description>
</parameter>
<parameter name="protocol_id">
<parameter_description> a protocol id
</parameter_description>
</parameter>
</parameters>
<return> a #GType

</return>
</function>

<function name="g_socket_connection_factory_register_type">
<description>
Looks up the #GType to be used when creating socket connections on
sockets with the specified @family,@type and @protocol.

If no type is registered, the #GSocketConnection base type is returned.

Since: 2.22

</description>
<parameters>
<parameter name="g_type">
<parameter_description> a #GType, inheriting from %G_TYPE_SOCKET_CONNECTION
</parameter_description>
</parameter>
<parameter name="family">
<parameter_description> a #GSocketFamily
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #GSocketType
</parameter_description>
</parameter>
<parameter name="protocol">
<parameter_description> a protocol id
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_connection_get_local_address">
<description>
Try to get the local address of a socket connection.

Since: 2.22

</description>
<parameters>
<parameter name="connection">
<parameter_description> a #GSocketConnection
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketAddress or %NULL on error.
Free the returned object with g_object_unref().

</return>
</function>

<function name="g_socket_connection_get_remote_address">
<description>
Try to get the remote address of a socket connection.

Since: 2.22

</description>
<parameters>
<parameter name="connection">
<parameter_description> a #GSocketConnection
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketAddress or %NULL on error.
Free the returned object with g_object_unref().

</return>
</function>

<function name="g_socket_connection_get_socket">
<description>
Gets the underlying #GSocket object of the connection.
This can be useful if you want to do something unusual on it
not supported by the #GSocketConnection APIs.

Since: 2.22

</description>
<parameters>
<parameter name="connection">
<parameter_description> a #GSocketConnection
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketAddress or %NULL on error.

</return>
</function>

<function name="g_socket_control_message_deserialize">
<description>
Tries to deserialize a socket control message of a given
@level and @type. This will ask all known (to GType) subclasses
of #GSocketControlMessage if they can understand this kind
of message and if so deserialize it into a #GSocketControlMessage.

If there is no implementation for this kind of control message, %NULL
will be returned.

Since: 2.22

</description>
<parameters>
<parameter name="level">
<parameter_description> a socket level
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a socket control message type for the given @level
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of the data in bytes
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> pointer to the message data
</parameter_description>
</parameter>
</parameters>
<return> the deserialized message or %NULL

</return>
</function>

<function name="g_socket_control_message_get_level">
<description>
Returns the &quot;level&quot; (i.e. the originating protocol) of the control message.
This is often SOL_SOCKET.

Since: 2.22

</description>
<parameters>
<parameter name="message">
<parameter_description> a #GSocketControlMessage
</parameter_description>
</parameter>
</parameters>
<return> an integer describing the level

</return>
</function>

<function name="g_socket_control_message_get_msg_type">
<description>
Returns the protocol specific type of the control message.
For instance, for UNIX fd passing this would be SCM_RIGHTS.

Since: 2.22

</description>
<parameters>
<parameter name="message">
<parameter_description> a #GSocketControlMessage
</parameter_description>
</parameter>
</parameters>
<return> an integer describing the type of control message

</return>
</function>

<function name="g_socket_control_message_get_size">
<description>
Returns the space required for the control message, not including
headers or alignment.

Since: 2.22

</description>
<parameters>
<parameter name="message">
<parameter_description> a #GSocketControlMessage
</parameter_description>
</parameter>
</parameters>
<return> The number of bytes required.

</return>
</function>

<function name="g_socket_control_message_serialize">
<description>
Converts the data in the message to bytes placed in the
message.

@data is guaranteed to have enough space to fit the size
returned by g_socket_control_message_get_size() on this
object.

Since: 2.22

</description>
<parameters>
<parameter name="message">
<parameter_description> a #GSocketControlMessage
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> A buffer to write data to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_create_source">
<description>
Creates a %GSource that can be attached to a %GMainContext to monitor
for the availibility of the specified @condition on the socket.

The callback on the source is of the #GSocketSourceFunc type.

It is meaningless to specify %G_IO_ERR or %G_IO_HUP in @condition;
these conditions will always be reported output if they are true.

@cancellable if not %NULL can be used to cancel the source, which will
cause the source to trigger, reporting the current condition (which
is likely 0 unless cancellation happened at the same time as a
condition change). You can check for this in the callback using
g_cancellable_is_cancelled().

If @socket has a timeout set, and it is reached before @condition
occurs, the source will then trigger anyway, reporting %G_IO_IN or
%G_IO_OUT depending on @condition. However, @socket will have been
marked as having had a timeout, and so the next #GSocket I/O method
you call will then fail with a %G_IO_ERROR_TIMED_OUT.

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket
</parameter_description>
</parameter>
<parameter name="condition">
<parameter_description> a #GIOCondition mask to monitor
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a %GCancellable or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated %GSource, free with g_source_unref().

</return>
</function>

<function name="g_socket_get_blocking">
<description>
Gets the blocking mode of the socket. For details on blocking I/O,
see g_socket_set_blocking().

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if blocking I/O is used, %FALSE otherwise.

</return>
</function>

<function name="g_socket_get_credentials">
<description>
Returns the credentials of the foreign process connected to this
socket, if any (e.g. it is only supported for %G_SOCKET_FAMILY_UNIX
sockets).

If this operation isn't supported on the OS, the method fails with
the %G_IO_ERROR_NOT_SUPPORTED error. On Linux this is implemented
by reading the %SO_PEERCRED option on the underlying socket.

Other ways to obtain credentials from a foreign peer includes the
#GUnixCredentialsMessage type and
g_unix_connection_send_credentials() /
g_unix_connection_receive_credentials() functions.

Since: 2.26

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %NULL if @error is set, otherwise a #GCredentials object
that must be freed with g_object_unref().

</return>
</function>

<function name="g_socket_get_family">
<description>
Gets the socket family of the socket.

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketFamily

</return>
</function>

<function name="g_socket_get_fd">
<description>
Returns the underlying OS socket object. On unix this
is a socket file descriptor, and on windows this is
a Winsock2 SOCKET handle. This may be useful for
doing platform specific or otherwise unusual operations
on the socket.

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
</parameters>
<return> the file descriptor of the socket.

</return>
</function>

<function name="g_socket_get_keepalive">
<description>
Gets the keepalive mode of the socket. For details on this,
see g_socket_set_keepalive().

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if keepalive is active, %FALSE otherwise.

</return>
</function>

<function name="g_socket_get_listen_backlog">
<description>
Gets the listen backlog setting of the socket. For details on this,
see g_socket_set_listen_backlog().

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
</parameters>
<return> the maximum number of pending connections.

</return>
</function>

<function name="g_socket_get_local_address">
<description>
Try to get the local address of a bound socket. This is only
useful if the socket has been bound to a local address,
either explicitly or implicitly when connecting.

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketAddress or %NULL on error.
Free the returned object with g_object_unref().

</return>
</function>

<function name="g_socket_get_protocol">
<description>
Gets the socket protocol id the socket was created with.
In case the protocol is unknown, -1 is returned.

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
</parameters>
<return> a protocol id, or -1 if unknown

</return>
</function>

<function name="g_socket_get_remote_address">
<description>
Try to get the remove address of a connected socket. This is only
useful for connection oriented sockets that have been connected.

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketAddress or %NULL on error.
Free the returned object with g_object_unref().

</return>
</function>

<function name="g_socket_get_socket_type">
<description>
Gets the socket type of the socket.

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketType

</return>
</function>

<function name="g_socket_get_timeout">
<description>
Gets the timeout setting of the socket. For details on this, see
g_socket_set_timeout().

Since: 2.26

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
</parameters>
<return> the timeout in seconds

</return>
</function>

<function name="g_socket_is_closed">
<description>
Checks whether a socket is closed.

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if socket is closed, %FALSE otherwise

</return>
</function>

<function name="g_socket_is_connected">
<description>
Check whether the socket is connected. This is only useful for
connection-oriented sockets.

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if socket is connected, %FALSE otherwise.

</return>
</function>

<function name="g_socket_listen">
<description>
Marks the socket as a server socket, i.e. a socket that is used
to accept incoming requests using g_socket_accept().

Before calling this the socket must be bound to a local address using
g_socket_bind().

To set the maximum amount of outstanding clients, use
g_socket_set_listen_backlog().

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on error.

</return>
</function>

<function name="g_socket_listener_accept">
<description>
Blocks waiting for a client to connect to any of the sockets added
to the listener. Returns a #GSocketConnection for the socket that was
accepted.

If @source_object is not %NULL it will be filled out with the source
object specified when the corresponding socket or address was added
to the listener.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.

Since: 2.22

</description>
<parameters>
<parameter name="listener">
<parameter_description> a #GSocketListener
</parameter_description>
</parameter>
<parameter name="source_object">
<parameter_description> location where #GObject pointer will be stored, or %NULL
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketConnection on success, %NULL on error.

</return>
</function>

<function name="g_socket_listener_accept_async">
<description>
This is the asynchronous version of g_socket_listener_accept().

When the operation is finished @callback will be
called. You can then call g_socket_listener_accept_socket()
to get the result of the operation.

Since: 2.22

</description>
<parameters>
<parameter name="listener">
<parameter_description> a #GSocketListener
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data for the callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_listener_accept_finish">
<description>
Finishes an async accept operation. See g_socket_listener_accept_async()

Since: 2.22

</description>
<parameters>
<parameter name="listener">
<parameter_description> a #GSocketListener
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="source_object">
<parameter_description> Optional #GObject identifying this source
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketConnection on success, %NULL on error.

</return>
</function>

<function name="g_socket_listener_accept_socket">
<description>
Blocks waiting for a client to connect to any of the sockets added
to the listener. Returns the #GSocket that was accepted.

If you want to accept the high-level #GSocketConnection, not a #GSocket,
which is often the case, then you should use g_socket_listener_accept()
instead.

If @source_object is not %NULL it will be filled out with the source
object specified when the corresponding socket or address was added
to the listener.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.

Since: 2.22

</description>
<parameters>
<parameter name="listener">
<parameter_description> a #GSocketListener
</parameter_description>
</parameter>
<parameter name="source_object">
<parameter_description> location where #GObject pointer will be stored, or %NULL.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocket on success, %NULL on error.

</return>
</function>

<function name="g_socket_listener_accept_socket_async">
<description>
This is the asynchronous version of g_socket_listener_accept_socket().

When the operation is finished @callback will be
called. You can then call g_socket_listener_accept_socket_finish()
to get the result of the operation.

Since: 2.22

</description>
<parameters>
<parameter name="listener">
<parameter_description> a #GSocketListener
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data for the callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_listener_accept_socket_finish">
<description>
Finishes an async accept operation. See g_socket_listener_accept_socket_async()

Since: 2.22

</description>
<parameters>
<parameter name="listener">
<parameter_description> a #GSocketListener
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="source_object">
<parameter_description> Optional #GObject identifying this source
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocket on success, %NULL on error.

</return>
</function>

<function name="g_socket_listener_add_address">
<description>
Creates a socket of type @type and protocol @protocol, binds
it to @address and adds it to the set of sockets we're accepting
sockets from.

Note that adding an IPv6 address, depending on the platform,
may or may not result in a listener that also accepts IPv4
connections.  For more determinstic behaviour, see
g_socket_listener_add_inet_port().

@source_object will be passed out in the various calls
to accept to identify this particular source, which is
useful if you're listening on multiple addresses and do
different things depending on what address is connected to.

If successful and @effective_address is non-%NULL then it will
be set to the address that the binding actually occured at.  This
is helpful for determining the port number that was used for when
requesting a binding to port 0 (ie: &quot;any port&quot;).  This address, if
requested, belongs to the caller and must be freed.

Since: 2.22

</description>
<parameters>
<parameter name="listener">
<parameter_description> a #GSocketListener
</parameter_description>
</parameter>
<parameter name="address">
<parameter_description> a #GSocketAddress
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #GSocketType
</parameter_description>
</parameter>
<parameter name="protocol">
<parameter_description> a #GSocketProtocol
</parameter_description>
</parameter>
<parameter name="source_object">
<parameter_description> Optional #GObject identifying this source
</parameter_description>
</parameter>
<parameter name="effective_address">
<parameter_description> location to store the address that was bound to, or %NULL.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on error.

</return>
</function>

<function name="g_socket_listener_add_any_inet_port">
<description>
Listens for TCP connections on any available port number for both
IPv6 and IPv4 (if each are available).

This is useful if you need to have a socket for incoming connections
but don't care about the specific port number.

@source_object will be passed out in the various calls
to accept to identify this particular source, which is
useful if you're listening on multiple addresses and do
different things depending on what address is connected to.

Since: 2.24

</description>
<parameters>
<parameter name="listener">
<parameter_description> a #GSocketListener
</parameter_description>
</parameter>
<parameter name="source_object">
<parameter_description> Optional #GObject identifying this source
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to
ignore.
</parameter_description>
</parameter>
</parameters>
<return> the port number, or 0 in case of failure.

</return>
</function>

<function name="g_socket_listener_add_inet_port">
<description>
Helper function for g_socket_listener_add_address() that
creates a TCP/IP socket listening on IPv4 and IPv6 (if
supported) on the specified port on all interfaces.

@source_object will be passed out in the various calls
to accept to identify this particular source, which is
useful if you're listening on multiple addresses and do
different things depending on what address is connected to.

Since: 2.22

</description>
<parameters>
<parameter name="listener">
<parameter_description> a #GSocketListener
</parameter_description>
</parameter>
<parameter name="port">
<parameter_description> an IP port number (non-zero)
</parameter_description>
</parameter>
<parameter name="source_object">
<parameter_description> Optional #GObject identifying this source
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on error.

</return>
</function>

<function name="g_socket_listener_add_socket">
<description>
Adds @socket to the set of sockets that we try to accept
new clients from. The socket must be bound to a local
address and listened to.

@source_object will be passed out in the various calls
to accept to identify this particular source, which is
useful if you're listening on multiple addresses and do
different things depending on what address is connected to.

Since: 2.22

</description>
<parameters>
<parameter name="listener">
<parameter_description> a #GSocketListener
</parameter_description>
</parameter>
<parameter name="socket">
<parameter_description> a listening #GSocket
</parameter_description>
</parameter>
<parameter name="source_object">
<parameter_description> Optional #GObject identifying this source
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on error.

</return>
</function>

<function name="g_socket_listener_close">
<description>
Closes all the sockets in the listener.

Since: 2.22

</description>
<parameters>
<parameter name="listener">
<parameter_description> a #GSocketListener
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_listener_new">
<description>
Creates a new #GSocketListener with no sockets to listen for.
New listeners can be added with e.g. g_socket_listener_add_address()
or g_socket_listener_add_inet_port().

Since: 2.22

</description>
<parameters>
</parameters>
<return> a new #GSocketListener.

</return>
</function>

<function name="g_socket_listener_set_backlog">
<description>
Sets the listen backlog on the sockets in the listener.

See g_socket_set_listen_backlog() for details

Since: 2.22

</description>
<parameters>
<parameter name="listener">
<parameter_description> a #GSocketListener
</parameter_description>
</parameter>
<parameter name="listen_backlog">
<parameter_description> an integer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_new">
<description>
Creates a new #GSocket with the defined family, type and protocol.
If @protocol is 0 (%G_SOCKET_PROTOCOL_DEFAULT) the default protocol type
for the family and type is used.

The @protocol is a family and type specific int that specifies what
kind of protocol to use. #GSocketProtocol lists several common ones.
Many families only support one protocol, and use 0 for this, others
support several and using 0 means to use the default protocol for
the family and type.

The protocol id is passed directly to the operating
system, so you can use protocols not listed in #GSocketProtocol if you
know the protocol number used for it.

Since: 2.22

</description>
<parameters>
<parameter name="family">
<parameter_description> the socket family to use, e.g. %G_SOCKET_FAMILY_IPV4.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the socket type to use.
</parameter_description>
</parameter>
<parameter name="protocol">
<parameter_description> the id of the protocol to use, or 0 for default.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocket or %NULL on error.
Free the returned object with g_object_unref().

</return>
</function>

<function name="g_socket_new_from_fd">
<description>
Creates a new #GSocket from a native file descriptor
or winsock SOCKET handle.

This reads all the settings from the file descriptor so that
all properties should work. Note that the file descriptor
will be set to non-blocking mode, independent on the blocking
mode of the #GSocket.

Since: 2.22

</description>
<parameters>
<parameter name="fd">
<parameter_description> a native socket file descriptor.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocket or %NULL on error.
Free the returned object with g_object_unref().

</return>
</function>

<function name="g_socket_receive">
<description>
Receive data (up to @size bytes) from a socket. This is mainly used by
connection-oriented sockets; it is identical to g_socket_receive_from()
with @address set to %NULL.

For %G_SOCKET_TYPE_DATAGRAM and %G_SOCKET_TYPE_SEQPACKET sockets,
g_socket_receive() will always read either 0 or 1 complete messages from
the socket. If the received message is too large to fit in @buffer, then
the data beyond @size bytes will be discarded, without any explicit
indication that this has occurred.

For %G_SOCKET_TYPE_STREAM sockets, g_socket_receive() can return any
number of bytes, up to @size. If more than @size bytes have been
received, the additional data will be returned in future calls to
g_socket_receive().

If the socket is in blocking mode the call will block until there is
some data to receive or there is an error. If there is no data available
and the socket is in non-blocking mode, a %G_IO_ERROR_WOULD_BLOCK error
will be returned. To be notified when data is available, wait for the
%G_IO_IN condition.

On error -1 is returned and @error is set accordingly.

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a buffer to read data into (which should be at least @size
bytes long).
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the number of bytes you want to read from the socket
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a %GCancellable or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> Number of bytes read, or -1 on error

</return>
</function>

<function name="g_socket_receive_from">
<description>
Receive data (up to @size bytes) from a socket.

If @address is non-%NULL then @address will be set equal to the
source address of the received packet.
@address is owned by the caller.

See g_socket_receive() for additional information.

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket
</parameter_description>
</parameter>
<parameter name="address">
<parameter_description> a pointer to a #GSocketAddress pointer, or %NULL
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a buffer to read data into (which should be at least @size
bytes long).
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the number of bytes you want to read from the socket
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a %GCancellable or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> Number of bytes read, or -1 on error

</return>
</function>

<function name="g_socket_receive_message">
<description>
Receive data from a socket.  This is the most complicated and
fully-featured version of this call. For easier use, see
g_socket_receive() and g_socket_receive_from().

If @address is non-%NULL then @address will be set equal to the
source address of the received packet.
@address is owned by the caller.

@vector must point to an array of #GInputVector structs and
@num_vectors must be the length of this array.  These structs
describe the buffers that received data will be scattered into.
If @num_vectors is -1, then @vectors is assumed to be terminated
by a #GInputVector with a %NULL buffer pointer.

As a special case, if @num_vectors is 0 (in which case, @vectors
may of course be %NULL), then a single byte is received and
discarded. This is to facilitate the common practice of sending a
single '\0' byte for the purposes of transferring ancillary data.

@messages, if non-%NULL, will be set to point to a newly-allocated
array of #GSocketControlMessage instances or %NULL if no such
messages was received. These correspond to the control messages
received from the kernel, one #GSocketControlMessage per message
from the kernel. This array is %NULL-terminated and must be freed
by the caller using g_free() after calling g_object_unref() on each
element. If @messages is %NULL, any control messages received will
be discarded.

@num_messages, if non-%NULL, will be set to the number of control
messages received.

If both @messages and @num_messages are non-%NULL, then
@num_messages gives the number of #GSocketControlMessage instances
in @messages (ie: not including the %NULL terminator).

@flags is an in/out parameter. The commonly available arguments
for this are available in the #GSocketMsgFlags enum, but the
values there are the same as the system values, and the flags
are passed in as-is, so you can pass in system-specific flags too
(and g_socket_receive_message() may pass system-specific flags out).

As with g_socket_receive(), data may be discarded if @socket is
%G_SOCKET_TYPE_DATAGRAM or %G_SOCKET_TYPE_SEQPACKET and you do not
provide enough buffer space to read a complete message. You can pass
%G_SOCKET_MSG_PEEK in @flags to peek at the current message without
removing it from the receive queue, but there is no portable way to find
out the length of the message other than by reading it into a
sufficiently-large buffer.

If the socket is in blocking mode the call will block until there
is some data to receive or there is an error. If there is no data
available and the socket is in non-blocking mode, a
%G_IO_ERROR_WOULD_BLOCK error will be returned. To be notified when
data is available, wait for the %G_IO_IN condition.

On error -1 is returned and @error is set accordingly.

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket
</parameter_description>
</parameter>
<parameter name="address">
<parameter_description> a pointer to a #GSocketAddress pointer, or %NULL
</parameter_description>
</parameter>
<parameter name="vectors">
<parameter_description> an array of #GInputVector structs
</parameter_description>
</parameter>
<parameter name="num_vectors">
<parameter_description> the number of elements in @vectors, or -1
</parameter_description>
</parameter>
<parameter name="messages">
<parameter_description> a pointer which
may be filled with an array of #GSocketControlMessages, or %NULL
</parameter_description>
</parameter>
<parameter name="num_messages">
<parameter_description> a pointer which will be filled with the number of
elements in @messages, or %NULL
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a pointer to an int containing #GSocketMsgFlags flags
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a %GCancellable or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError pointer, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> Number of bytes read, or -1 on error

</return>
</function>

<function name="g_socket_receive_with_blocking">
<description>
This behaves exactly the same as g_socket_receive(), except that
the choice of blocking or non-blocking behavior is determined by
the @blocking argument rather than by @socket's properties.

Since: 2.26

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a buffer to read data into (which should be at least @size
bytes long).
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the number of bytes you want to read from the socket
</parameter_description>
</parameter>
<parameter name="blocking">
<parameter_description> whether to do blocking or non-blocking I/O
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a %GCancellable or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> Number of bytes read, or -1 on error

</return>
</function>

<function name="g_socket_send">
<description>
Tries to send @size bytes from @buffer on the socket. This is
mainly used by connection-oriented sockets; it is identical to
g_socket_send_to() with @address set to %NULL.

If the socket is in blocking mode the call will block until there is
space for the data in the socket queue. If there is no space available
and the socket is in non-blocking mode a %G_IO_ERROR_WOULD_BLOCK error
will be returned. To be notified when space is available, wait for the
%G_IO_OUT condition. Note though that you may still receive
%G_IO_ERROR_WOULD_BLOCK from g_socket_send() even if you were previously
notified of a %G_IO_OUT condition. (On Windows in particular, this is
very common due to the way the underlying APIs work.)

On error -1 is returned and @error is set accordingly.

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> the buffer containing the data to send.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the number of bytes to send
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a %GCancellable or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> Number of bytes written (which may be less than @size), or -1
on error

</return>
</function>

<function name="g_socket_send_message">
<description>
Send data to @address on @socket.  This is the most complicated and
fully-featured version of this call. For easier use, see
g_socket_send() and g_socket_send_to().

If @address is %NULL then the message is sent to the default receiver
(set by g_socket_connect()).

@vectors must point to an array of #GOutputVector structs and
@num_vectors must be the length of this array. (If @num_vectors is -1,
then @vectors is assumed to be terminated by a #GOutputVector with a
%NULL buffer pointer.) The #GOutputVector structs describe the buffers
that the sent data will be gathered from. Using multiple
#GOutputVector&lt;!-- --&gt;s is more memory-efficient than manually copying
data from multiple sources into a single buffer, and more
network-efficient than making multiple calls to g_socket_send().

@messages, if non-%NULL, is taken to point to an array of @num_messages
#GSocketControlMessage instances. These correspond to the control
messages to be sent on the socket.
If @num_messages is -1 then @messages is treated as a %NULL-terminated
array.

@flags modify how the message is sent. The commonly available arguments
for this are available in the #GSocketMsgFlags enum, but the
values there are the same as the system values, and the flags
are passed in as-is, so you can pass in system-specific flags too.

If the socket is in blocking mode the call will block until there is
space for the data in the socket queue. If there is no space available
and the socket is in non-blocking mode a %G_IO_ERROR_WOULD_BLOCK error
will be returned. To be notified when space is available, wait for the
%G_IO_OUT condition. Note though that you may still receive
%G_IO_ERROR_WOULD_BLOCK from g_socket_send() even if you were previously
notified of a %G_IO_OUT condition. (On Windows in particular, this is
very common due to the way the underlying APIs work.)

On error -1 is returned and @error is set accordingly.

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket
</parameter_description>
</parameter>
<parameter name="address">
<parameter_description> a #GSocketAddress, or %NULL
</parameter_description>
</parameter>
<parameter name="vectors">
<parameter_description> an array of #GOutputVector structs
</parameter_description>
</parameter>
<parameter name="num_vectors">
<parameter_description> the number of elements in @vectors, or -1
</parameter_description>
</parameter>
<parameter name="messages">
<parameter_description> a pointer to an
array of #GSocketControlMessages, or %NULL.
</parameter_description>
</parameter>
<parameter name="num_messages">
<parameter_description> number of elements in @messages, or -1.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> an int containing #GSocketMsgFlags flags
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a %GCancellable or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> Number of bytes written (which may be less than @size), or -1
on error

</return>
</function>

<function name="g_socket_send_to">
<description>
Tries to send @size bytes from @buffer to @address. If @address is
%NULL then the message is sent to the default receiver (set by
g_socket_connect()).

See g_socket_send() for additional information.

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket
</parameter_description>
</parameter>
<parameter name="address">
<parameter_description> a #GSocketAddress, or %NULL
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> the buffer containing the data to send.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the number of bytes to send
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a %GCancellable or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> Number of bytes written (which may be less than @size), or -1
on error

</return>
</function>

<function name="g_socket_send_with_blocking">
<description>
This behaves exactly the same as g_socket_send(), except that
the choice of blocking or non-blocking behavior is determined by
the @blocking argument rather than by @socket's properties.

Since: 2.26

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> the buffer containing the data to send.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the number of bytes to send
</parameter_description>
</parameter>
<parameter name="blocking">
<parameter_description> whether to do blocking or non-blocking I/O
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a %GCancellable or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> Number of bytes written (which may be less than @size), or -1
on error

</return>
</function>

<function name="g_socket_service_is_active">
<description>
Check whether the service is active or not. An active
service will accept new clients that connect, while
a non-active service will let connecting clients queue
up until the service is started.

Since: 2.22

</description>
<parameters>
<parameter name="service">
<parameter_description> a #GSocketService
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the service is active, %FALSE otherwise

</return>
</function>

<function name="g_socket_service_new">
<description>
Creates a new #GSocketService with no sockets to listen for.
New listeners can be added with e.g. g_socket_listener_add_address()
or g_socket_listener_add_inet_port().

Since: 2.22

</description>
<parameters>
</parameters>
<return> a new #GSocketService.

</return>
</function>

<function name="g_socket_service_start">
<description>
Starts the service, i.e. start accepting connections
from the added sockets when the mainloop runs.

This call is threadsafe, so it may be called from a thread
handling an incomming client request.

Since: 2.22

</description>
<parameters>
<parameter name="service">
<parameter_description> a #GSocketService
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_service_stop">
<description>
Stops the service, i.e. stops accepting connections
from the added sockets when the mainloop runs.

This call is threadsafe, so it may be called from a thread
handling an incomming client request.

Since: 2.22

</description>
<parameters>
<parameter name="service">
<parameter_description> a #GSocketService
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_set_blocking">
<description>
Sets the blocking mode of the socket. In blocking mode
all operations block until they succeed or there is an error. In
non-blocking mode all functions return results immediately or
with a %G_IO_ERROR_WOULD_BLOCK error.

All sockets are created in blocking mode. However, note that the
platform level socket is always non-blocking, and blocking mode
is a GSocket level feature.

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
<parameter name="blocking">
<parameter_description> Whether to use blocking I/O or not.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_set_keepalive">
<description>
Sets or unsets the %SO_KEEPALIVE flag on the underlying socket. When
this flag is set on a socket, the system will attempt to verify that the
remote socket endpoint is still present if a sufficiently long period of
time passes with no data being exchanged. If the system is unable to
verify the presence of the remote endpoint, it will automatically close
the connection.

This option is only functional on certain kinds of sockets. (Notably,
%G_SOCKET_PROTOCOL_TCP sockets.)

The exact time between pings is system- and protocol-dependent, but will
normally be at least two hours. Most commonly, you would set this flag
on a server socket if you want to allow clients to remain idle for long
periods of time, but also want to ensure that connections are eventually
garbage-collected if clients crash or become unreachable.

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
<parameter name="keepalive">
<parameter_description> Value for the keepalive flag
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_set_listen_backlog">
<description>
Sets the maximum number of outstanding connections allowed
when listening on this socket. If more clients than this are
connecting to the socket and the application is not handling them
on time then the new connections will be refused.

Note that this must be called before g_socket_listen() and has no
effect if called after that.

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
<parameter name="backlog">
<parameter_description> the maximum number of pending connections.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_set_timeout">
<description>
Sets the time in seconds after which I/O operations on @socket will
time out if they have not yet completed.

On a blocking socket, this means that any blocking #GSocket
operation will time out after @timeout seconds of inactivity,
returning %G_IO_ERROR_TIMED_OUT.

On a non-blocking socket, calls to g_socket_condition_wait() will
also fail with %G_IO_ERROR_TIMED_OUT after the given time. Sources
created with g_socket_create_source() will trigger after
@timeout seconds of inactivity, with the requested condition
set, at which point calling g_socket_receive(), g_socket_send(),
g_socket_check_connect_result(), etc, will fail with
%G_IO_ERROR_TIMED_OUT.

If @timeout is 0 (the default), operations will never time out
on their own.

Note that if an I/O operation is interrupted by a signal, this may
cause the timeout to be reset.

Since: 2.26

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
<parameter name="timeout">
<parameter_description> the timeout for @socket, in seconds, or 0 for none
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_shutdown">
<description>
Shut down part of a full-duplex connection.

If @shutdown_read is %TRUE then the recieving side of the connection
is shut down, and further reading is disallowed.

If @shutdown_write is %TRUE then the sending side of the connection
is shut down, and further writing is disallowed.

It is allowed for both @shutdown_read and @shutdown_write to be %TRUE.

One example where this is used is graceful disconnect for TCP connections
where you close the sending side, then wait for the other side to close
the connection, thus ensuring that the other side saw all sent data.

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket
</parameter_description>
</parameter>
<parameter name="shutdown_read">
<parameter_description> whether to shut down the read side
</parameter_description>
</parameter>
<parameter name="shutdown_write">
<parameter_description> whether to shut down the write side
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on error

</return>
</function>

<function name="g_socket_speaks_ipv4">
<description>
Checks if a socket is capable of speaking IPv4.

IPv4 sockets are capable of speaking IPv4.  On some operating systems
and under some combinations of circumstances IPv6 sockets are also
capable of speaking IPv4.  See RFC 3493 section 3.7 for more
information.

No other types of sockets are currently considered as being capable
of speaking IPv4.

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if this socket can be used with IPv4.

</return>
</function>

<function name="g_srv_target_copy">
<description>
Copies @target

Since: 2.22

</description>
<parameters>
<parameter name="target">
<parameter_description> a #GSrvTarget
</parameter_description>
</parameter>
</parameters>
<return> a copy of @target

</return>
</function>

<function name="g_srv_target_free">
<description>
Frees @target

Since: 2.22

</description>
<parameters>
<parameter name="target">
<parameter_description> a #GSrvTarget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_srv_target_get_hostname">
<description>
Gets @target's hostname (in ASCII form; if you are going to present
this to the user, you should use g_hostname_is_ascii_encoded() to
check if it contains encoded Unicode segments, and use
g_hostname_to_unicode() to convert it if it does.)

Since: 2.22

</description>
<parameters>
<parameter name="target">
<parameter_description> a #GSrvTarget
</parameter_description>
</parameter>
</parameters>
<return> @target's hostname

</return>
</function>

<function name="g_srv_target_get_port">
<description>
Gets @target's port

Since: 2.22

</description>
<parameters>
<parameter name="target">
<parameter_description> a #GSrvTarget
</parameter_description>
</parameter>
</parameters>
<return> @target's port

</return>
</function>

<function name="g_srv_target_get_priority">
<description>
Gets @target's priority. You should not need to look at this;
#GResolver already sorts the targets according to the algorithm in
RFC 2782.

Since: 2.22

</description>
<parameters>
<parameter name="target">
<parameter_description> a #GSrvTarget
</parameter_description>
</parameter>
</parameters>
<return> @target's priority

</return>
</function>

<function name="g_srv_target_get_weight">
<description>
Gets @target's weight. You should not need to look at this;
#GResolver already sorts the targets according to the algorithm in
RFC 2782.

Since: 2.22

</description>
<parameters>
<parameter name="target">
<parameter_description> a #GSrvTarget
</parameter_description>
</parameter>
</parameters>
<return> @target's weight

</return>
</function>

<function name="g_srv_target_list_sort">
<description>
Sorts @targets in place according to the algorithm in RFC 2782.

Since: 2.22

</description>
<parameters>
<parameter name="targets">
<parameter_description> a #GList of #GSrvTarget
</parameter_description>
</parameter>
</parameters>
<return> the head of the sorted list.

</return>
</function>

<function name="g_srv_target_new">
<description>
Creates a new #GSrvTarget with the given parameters.

You should not need to use this; normally #GSrvTarget&lt;!-- --&gt;s are
created by #GResolver.

Since: 2.22

</description>
<parameters>
<parameter name="hostname">
<parameter_description> the host that the service is running on
</parameter_description>
</parameter>
<parameter name="port">
<parameter_description> the port that the service is running on
</parameter_description>
</parameter>
<parameter name="priority">
<parameter_description> the target's priority
</parameter_description>
</parameter>
<parameter name="weight">
<parameter_description> the target's weight
</parameter_description>
</parameter>
</parameters>
<return> a new #GSrvTarget.

</return>
</function>

<function name="g_tcp_connection_get_graceful_disconnect">
<description>
Checks if graceful disconnects are used. See
g_tcp_connection_set_graceful_disconnect().

Since: 2.22

</description>
<parameters>
<parameter name="connection">
<parameter_description> a #GTcpConnection
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if graceful disconnect is used on close, %FALSE otherwise

</return>
</function>

<function name="g_tcp_connection_set_graceful_disconnect">
<description>
This enabled graceful disconnects on close. A graceful disconnect
means that we signal the recieving end that the connection is terminated
and wait for it to close the connection before closing the connection.

A graceful disconnect means that we can be sure that we successfully sent
all the outstanding data to the other end, or get an error reported.
However, it also means we have to wait for all the data to reach the
other side and for it to acknowledge this by closing the socket, which may
take a while. For this reason it is disabled by default.

Since: 2.22

</description>
<parameters>
<parameter name="connection">
<parameter_description> a #GTcpConnection
</parameter_description>
</parameter>
<parameter name="graceful_disconnect">
<parameter_description> Whether to do graceful disconnects or not
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_tcp_wrapper_connection_get_base_io_stream">
<description>
Get's @conn's base #GIOStream


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GTcpWrapperConnection
</parameter_description>
</parameter>
</parameters>
<return> @conn's base #GIOStream
</return>
</function>

<function name="g_tcp_wrapper_connection_new">
<description>
Wraps @base_io_stream and @socket together as a #GSocketConnection.

Since: 2.28

</description>
<parameters>
<parameter name="base_io_stream">
<parameter_description> the #GIOStream to wrap
</parameter_description>
</parameter>
<parameter name="socket">
<parameter_description> the #GSocket associated with @base_io_stream
</parameter_description>
</parameter>
</parameters>
<return> the new #GSocketConnection.

</return>
</function>

<function name="g_themed_icon_append_name">
<description>
Append a name to the list of icons from within @icon.

&lt;note&gt;&lt;para&gt;
Note that doing so invalidates the hash computed by prior calls
to g_icon_hash().
&lt;/para&gt;&lt;/note&gt;

</description>
<parameters>
<parameter name="icon">
<parameter_description> a #GThemedIcon
</parameter_description>
</parameter>
<parameter name="iconname">
<parameter_description> name of icon to append to list of icons from within @icon.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_themed_icon_get_names">
<description>
Gets the names of icons from within @icon.


</description>
<parameters>
<parameter name="icon">
<parameter_description> a #GThemedIcon.
</parameter_description>
</parameter>
</parameters>
<return> a list of icon names.
</return>
</function>

<function name="g_themed_icon_new">
<description>
Creates a new themed icon for @iconname.


</description>
<parameters>
<parameter name="iconname">
<parameter_description> a string containing an icon name.
</parameter_description>
</parameter>
</parameters>
<return> a new #GThemedIcon.
</return>
</function>

<function name="g_themed_icon_new_from_names">
<description>
Creates a new themed icon for @iconnames.


</description>
<parameters>
<parameter name="iconnames">
<parameter_description> an array of strings containing icon names.
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the length of the @iconnames array, or -1 if @iconnames is 
%NULL-terminated
</parameter_description>
</parameter>
</parameters>
<return> a new #GThemedIcon
</return>
</function>

<function name="g_themed_icon_new_with_default_fallbacks">
<description>
Creates a new themed icon for @iconname, and all the names
that can be created by shortening @iconname at '-' characters.

In the following example, @icon1 and @icon2 are equivalent:
|[
const char *names[] = { 
&quot;gnome-dev-cdrom-audio&quot;,
&quot;gnome-dev-cdrom&quot;,
&quot;gnome-dev&quot;,
&quot;gnome&quot;
};

icon1 = g_themed_icon_new_from_names (names, 4);
icon2 = g_themed_icon_new_with_default_fallbacks (&quot;gnome-dev-cdrom-audio&quot;);
]|


</description>
<parameters>
<parameter name="iconname">
<parameter_description> a string containing an icon name
</parameter_description>
</parameter>
</parameters>
<return> a new #GThemedIcon.
</return>
</function>

<function name="g_themed_icon_prepend_name">
<description>
Prepend a name to the list of icons from within @icon.

&lt;note&gt;&lt;para&gt;
Note that doing so invalidates the hash computed by prior calls
to g_icon_hash().
&lt;/para&gt;&lt;/note&gt;

Since: 2.18

</description>
<parameters>
<parameter name="icon">
<parameter_description> a #GThemedIcon
</parameter_description>
</parameter>
<parameter name="iconname">
<parameter_description> name of icon to prepend to list of icons from within @icon.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_threaded_socket_service_new">
<description>
Creates a new #GThreadedSocketService with no listeners. Listeners
must be added with g_socket_service_add_listeners().

Since: 2.22

</description>
<parameters>
<parameter name="max_threads">
<parameter_description> the maximal number of threads to execute concurrently
handling incoming clients, -1 means no limit
</parameter_description>
</parameter>
</parameters>
<return> a new #GSocketService.

</return>
</function>

<function name="g_tls_backend_get_certificate_type">
<description>
Gets the #GType of @backend's #GTlsCertificate implementation.

Since: 2.28

</description>
<parameters>
<parameter name="backend">
<parameter_description> the #GTlsBackend
</parameter_description>
</parameter>
</parameters>
<return> the #GType of @backend's #GTlsCertificate
implementation.

</return>
</function>

<function name="g_tls_backend_get_client_connection_type">
<description>
Gets the #GType of @backend's #GTlsClientConnection implementation.

Since: 2.28

</description>
<parameters>
<parameter name="backend">
<parameter_description> the #GTlsBackend
</parameter_description>
</parameter>
</parameters>
<return> the #GType of @backend's #GTlsClientConnection
implementation.

</return>
</function>

<function name="g_tls_backend_get_default">
<description>
Gets the default #GTlsBackend for the system.

Since: 2.28

</description>
<parameters>
</parameters>
<return> a #GTlsBackend

</return>
</function>

<function name="g_tls_backend_get_server_connection_type">
<description>
Gets the #GType of @backend's #GTlsServerConnection implementation.

Since: 2.28

</description>
<parameters>
<parameter name="backend">
<parameter_description> the #GTlsBackend
</parameter_description>
</parameter>
</parameters>
<return> the #GType of @backend's #GTlsServerConnection
implementation.

</return>
</function>

<function name="g_tls_backend_supports_tls">
<description>
Checks if TLS is supported; if this returns %FALSE for the default
#GTlsBackend, it means no &quot;real&quot; TLS backend is available.

Since: 2.28

</description>
<parameters>
<parameter name="backend">
<parameter_description> the #GTlsBackend
</parameter_description>
</parameter>
</parameters>
<return> whether or not TLS is supported

</return>
</function>

<function name="g_tls_certificate_get_issuer">
<description>
Gets the #GTlsCertificate representing @cert's issuer, if known

Since: 2.28

</description>
<parameters>
<parameter name="cert">
<parameter_description> a #GTlsCertificate
</parameter_description>
</parameter>
</parameters>
<return> The certificate of @cert's issuer,
or %NULL if @cert is self-signed or signed with an unknown
certificate.

</return>
</function>

<function name="g_tls_certificate_list_new_from_file">
<description>
Creates one or more #GTlsCertificate&lt;!-- --&gt;s from the PEM-encoded
data in @file. If @file cannot be read or parsed, the function will
return %NULL and set @error. If @file does not contain any
PEM-encoded certificates, this will return an empty list and not
set @error.

Since: 2.28

</description>
<parameters>
<parameter name="file">
<parameter_description> file containing PEM-encoded certificates to import
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> a
#GList containing #GTlsCertificate objects. You must free the list
and its contents when you are done with it.

</return>
</function>

<function name="g_tls_certificate_new_from_file">
<description>
Creates a #GTlsCertificate from the PEM-encoded data in @file. If
@file cannot be read or parsed, the function will return %NULL and
set @error. Otherwise, this behaves like g_tls_certificate_new().

Since: 2.28

</description>
<parameters>
<parameter name="file">
<parameter_description> file containing a PEM-encoded certificate to import
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> the new certificate, or %NULL on error

</return>
</function>

<function name="g_tls_certificate_new_from_files">
<description>
Creates a #GTlsCertificate from the PEM-encoded data in @cert_file
and @key_file. If either file cannot be read or parsed, the
function will return %NULL and set @error. Otherwise, this behaves
like g_tls_certificate_new().

Since: 2.28

</description>
<parameters>
<parameter name="cert_file">
<parameter_description> file containing a PEM-encoded certificate to import
</parameter_description>
</parameter>
<parameter name="key_file">
<parameter_description> file containing a PEM-encoded private key to import
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> the new certificate, or %NULL on error

</return>
</function>

<function name="g_tls_certificate_new_from_pem">
<description>
Creates a new #GTlsCertificate from the PEM-encoded data in @data.
If @data includes both a certificate and a private key, then the
returned certificate will include the private key data as well.

If @data includes multiple certificates, only the first one will be
parsed.

Since: 2.28

</description>
<parameters>
<parameter name="data">
<parameter_description> PEM-encoded certificate data
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of @data, or -1 if it's 0-terminated.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> the new certificate, or %NULL if @data is invalid

</return>
</function>

<function name="g_tls_certificate_verify">
<description>
This verifies @cert and returns a set of #GTlsCertificateFlags
indicating any problems found with it. This can be used to verify a
certificate outside the context of making a connection, or to
check a certificate against a CA that is not part of the system
CA database.

If @identity is not %NULL, @cert's name(s) will be compared against
it, and %G_TLS_CERTIFICATE_BAD_IDENTITY will be set in the return
value if it does not match. If @identity is %NULL, that bit will
never be set in the return value.

If @trusted_ca is not %NULL, then @cert (or one of the certificates
in its chain) must be signed by it, or else
%G_TLS_CERTIFICATE_UNKNOWN_CA will be set in the return value. If
@trusted_ca is %NULL, that bit will never be set in the return
value.

(All other #GTlsCertificateFlags values will always be set or unset
as appropriate.)

Since: 2.28

</description>
<parameters>
<parameter name="cert">
<parameter_description> a #GTlsCertificate
</parameter_description>
</parameter>
<parameter name="identity">
<parameter_description> the expected peer identity
</parameter_description>
</parameter>
<parameter name="trusted_ca">
<parameter_description> the certificate of a trusted authority
</parameter_description>
</parameter>
</parameters>
<return> the appropriate #GTlsCertificateFlags

</return>
</function>

<function name="g_tls_client_connection_get_accepted_cas">
<description>
Gets the list of distinguished names of the Certificate Authorities
that the server will accept certificates from. This will be set
during the TLS handshake if the server requests a certificate.
Otherwise, it will be %NULL.

Each item in the list is a #GByteArray which contains the complete
subject DN of the certificate authority.

Since: 2.28

</description>
<parameters>
<parameter name="conn">
<parameter_description> the #GTlsClientConnection
</parameter_description>
</parameter>
</parameters>
<return> the list of
CA DNs. You should unref each element with g_byte_array_unref() and then
the free the list with g_list_free().

</return>
</function>

<function name="g_tls_client_connection_get_server_identity">
<description>
Gets @conn's expected server identity

Since: 2.28

</description>
<parameters>
<parameter name="conn">
<parameter_description> the #GTlsClientConnection
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketConnectable describing the
expected server identity, or %NULL if the expected identity is not
known.

</return>
</function>

<function name="g_tls_client_connection_get_use_ssl3">
<description>
Gets whether @conn will use SSL 3.0 rather than the
highest-supported version of TLS; see
g_tls_client_connection_set_use_ssl3().

Since: 2.28

</description>
<parameters>
<parameter name="conn">
<parameter_description> the #GTlsClientConnection
</parameter_description>
</parameter>
</parameters>
<return> whether @conn will use SSL 3.0

</return>
</function>

<function name="g_tls_client_connection_get_validation_flags">
<description>
Gets @conn's validation flags

Since: 2.28

</description>
<parameters>
<parameter name="conn">
<parameter_description> the #GTlsClientConnection
</parameter_description>
</parameter>
</parameters>
<return> the validation flags

</return>
</function>

<function name="g_tls_client_connection_new">
<description>
Creates a new #GTlsClientConnection wrapping @base_io_stream (which
must have pollable input and output streams) which is assumed to
communicate with the server identified by @server_identity.

Since: 2.28

</description>
<parameters>
<parameter name="base_io_stream">
<parameter_description> the #GIOStream to wrap
</parameter_description>
</parameter>
<parameter name="server_identity">
<parameter_description> the expected identity of the server
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> the new #GTlsClientConnection, or %NULL on error

</return>
</function>

<function name="g_tls_client_connection_set_server_identity">
<description>
Sets @conn's expected server identity, which is used both to tell
servers on virtual hosts which certificate to present, and also
to let @conn know what name to look for in the certificate when
performing %G_TLS_CERTIFICATE_BAD_IDENTITY validation, if enabled.

Since: 2.28

</description>
<parameters>
<parameter name="conn">
<parameter_description> the #GTlsClientConnection
</parameter_description>
</parameter>
<parameter name="identity">
<parameter_description> a #GSocketConnectable describing the expected server identity
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_tls_client_connection_set_use_ssl3">
<description>
If @use_ssl3 is %TRUE, this forces @conn to use SSL 3.0 rather than
trying to properly negotiate the right version of TLS or SSL to use.
This can be used when talking to servers that do not implement the
fallbacks correctly and which will therefore fail to handshake with
a &quot;modern&quot; TLS handshake attempt.

Since: 2.28

</description>
<parameters>
<parameter name="conn">
<parameter_description> the #GTlsClientConnection
</parameter_description>
</parameter>
<parameter name="use_ssl3">
<parameter_description> whether to use SSL 3.0
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_tls_client_connection_set_validation_flags">
<description>
Sets @conn's validation flags, to override the default set of
checks performed when validating a server certificate. By default,
%G_TLS_CERTIFICATE_VALIDATE_ALL is used.

Since: 2.28

</description>
<parameters>
<parameter name="conn">
<parameter_description> the #GTlsClientConnection
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> the #GTlsCertificateFlags to use
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_tls_connection_emit_accept_certificate">
<description>
Used by #GTlsConnection implementations to emit the
#GTlsConnection::accept-certificate signal.

Since: 2.28

</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GTlsConnection
</parameter_description>
</parameter>
<parameter name="peer_cert">
<parameter_description> the peer's #GTlsCertificate
</parameter_description>
</parameter>
<parameter name="errors">
<parameter_description> the problems with @peer_cert
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if one of the signal handlers has returned
%TRUE to accept @peer_cert

</return>
</function>

<function name="g_tls_connection_get_certificate">
<description>
Gets @conn's certificate, as set by
g_tls_connection_set_certificate().

Since: 2.28

</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GTlsConnection
</parameter_description>
</parameter>
</parameters>
<return> @conn's certificate, or %NULL

</return>
</function>

<function name="g_tls_connection_get_peer_certificate">
<description>
Gets @conn's peer's certificate after the handshake has completed.
(It is not set during the emission of
#GTlsConnection::accept-certificate.)

Since: 2.28

</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GTlsConnection
</parameter_description>
</parameter>
</parameters>
<return> @conn's peer's certificate, or %NULL

</return>
</function>

<function name="g_tls_connection_get_peer_certificate_errors">
<description>
Gets the errors associated with validating @conn's peer's
certificate, after the handshake has completed. (It is not set
during the emission of #GTlsConnection::accept-certificate.)

Since: 2.28

</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GTlsConnection
</parameter_description>
</parameter>
</parameters>
<return> @conn's peer's certificate errors

</return>
</function>

<function name="g_tls_connection_get_rehandshake_mode">
<description>
Gets @conn rehandshaking mode. See
g_tls_connection_set_rehandshake() for details.

Since: 2.28

</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GTlsConnection
</parameter_description>
</parameter>
</parameters>
<return> @conn's rehandshaking mode

</return>
</function>

<function name="g_tls_connection_get_require_close_notify">
<description>
Tests whether or not @conn expects a proper TLS close notification
when the connection is closed. See
g_tls_connection_set_require_close_notify() for details.

Since: 2.28

</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GTlsConnection
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @conn requires a proper TLS close
notification.

</return>
</function>

<function name="g_tls_connection_get_use_system_certdb">
<description>
Gets whether @conn uses the system certificate database to verify
peer certificates. See g_tls_connection_set_use_system_certdb().

Since: 2.28

</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GTlsConnection
</parameter_description>
</parameter>
</parameters>
<return> whether @conn uses the system certificate database

</return>
</function>

<function name="g_tls_connection_handshake">
<description>
Attempts a TLS handshake on @conn.

On the client side, it is never necessary to call this method;
although the connection needs to perform a handshake after
connecting (or after sending a &quot;STARTTLS&quot;-type command) and may
need to rehandshake later if the server requests it,
#GTlsConnection will handle this for you automatically when you try
to send or receive data on the connection. However, you can call
g_tls_connection_handshake() manually if you want to know for sure
whether the initial handshake succeeded or failed (as opposed to
just immediately trying to write to @conn's output stream, in which
case if it fails, it may not be possible to tell if it failed
before or after completing the handshake).

Likewise, on the server side, although a handshake is necessary at
the beginning of the communication, you do not need to call this
function explicitly unless you want clearer error reporting.
However, you may call g_tls_connection_handshake() later on to
renegotiate parameters (encryption methods, etc) with the client.

#GTlsConnection::accept_certificate may be emitted during the
handshake.

Since: 2.28

</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GTlsConnection
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> success or failure

</return>
</function>

<function name="g_tls_connection_handshake_async">
<description>
Asynchronously performs a TLS handshake on @conn. See
g_tls_connection_handshake() for more information.

Since: 2.28

</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GTlsConnection
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt;
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the handshake is complete
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to the callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_tls_connection_handshake_finish">
<description>
Finish an asynchronous TLS handshake operation. See
g_tls_connection_handshake() for more information.

Since: 2.28

</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GTlsConnection
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError pointer, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on failure, in which
case @error will be set.

</return>
</function>

<function name="g_tls_connection_set_certificate">
<description>
This sets the certificate that @conn will present to its peer
during the TLS handshake. For a #GTlsServerConnection, it is
mandatory to set this, and that will normally be done at construct
time.

For a #GTlsClientConnection, this is optional. If a handshake fails
with %G_TLS_ERROR_CERTIFICATE_REQUIRED, that means that the server
requires a certificate, and if you try connecting again, you should
call this method first. You can call
g_tls_client_connection_get_accepted_cas() on the failed connection
to get a list of Certificate Authorities that the server will
accept certificates from.

(It is also possible that a server will allow the connection with
or without a certificate; in that case, if you don't provide a
certificate, you can tell that the server requested one by the fact
that g_tls_client_connection_get_accepted_cas() will return
non-%NULL.)

Since: 2.28

</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GTlsConnection
</parameter_description>
</parameter>
<parameter name="certificate">
<parameter_description> the certificate to use for @conn
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_tls_connection_set_rehandshake_mode">
<description>
Sets how @conn behaves with respect to rehandshaking requests.

%G_TLS_REHANDSHAKE_NEVER means that it will never agree to
rehandshake after the initial handshake is complete. (For a client,
this means it will refuse rehandshake requests from the server, and
for a server, this means it will close the connection with an error
if the client attempts to rehandshake.)

%G_TLS_REHANDSHAKE_SAFELY means that the connection will allow a
rehandshake only if the other end of the connection supports the
TLS &lt;literal&gt;renegotiation_info&lt;/literal&gt; extension. This is the
default behavior, but means that rehandshaking will not work
against older implementations that do not support that extension.

%G_TLS_REHANDSHAKE_UNSAFELY means that the connection will allow
rehandshaking even without the
&lt;literal&gt;renegotiation_info&lt;/literal&gt; extension. On the server side
in particular, this is not recommended, since it leaves the server
open to certain attacks. However, this mode is necessary if you
need to allow renegotiation with older client software.

Since: 2.28

</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GTlsConnection
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> the rehandshaking mode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_tls_connection_set_require_close_notify">
<description>
Sets whether or not @conn expects a proper TLS close notification
before the connection is closed. If this is %TRUE (the default),
then @conn will expect to receive a TLS close notification from its
peer before the connection is closed, and will return a
%G_TLS_ERROR_EOF error if the connection is closed without proper
notification (since this may indicate a network error, or
man-in-the-middle attack).

In some protocols, the application will know whether or not the
connection was closed cleanly based on application-level data
(because the application-level data includes a length field, or is
somehow self-delimiting); in this case, the close notify is
redundant and sometimes omitted. (TLS 1.1 explicitly allows this;
in TLS 1.0 it is technically an error, but often done anyway.) You
can use g_tls_connection_set_require_close_notify() to tell @conn
to allow an &quot;unannounced&quot; connection close, in which case the close
will show up as a 0-length read, as in a non-TLS
#GSocketConnection, and it is up to the application to check that
the data has been fully received.

Note that this only affects the behavior when the peer closes the
connection; when the application calls g_io_stream_close() itself
on @conn, this will send a close notification regardless of the
setting of this property. If you explicitly want to do an unclean
close, you can close @conn's #GTlsConnection:base-io-stream rather
than closing @conn itself.

Since: 2.28

</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GTlsConnection
</parameter_description>
</parameter>
<parameter name="require_close_notify">
<parameter_description> whether or not to require close notification
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_tls_connection_set_use_system_certdb">
<description>
Sets whether @conn uses the system certificate database to verify
peer certificates. This is %TRUE by default. If set to %FALSE, then
peer certificate validation will always set the
%G_TLS_CERTIFICATE_UNKNOWN_CA error (meaning
#GTlsConnection::accept-certificate will always be emitted on
client-side connections, unless that bit is not set in
#GTlsClientConnection:validation-flags).

Since: 2.28

</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GTlsConnection
</parameter_description>
</parameter>
<parameter name="use_system_certdb">
<parameter_description> whether to use the system certificate database
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_tls_error_quark">
<description>
Gets the TLS error quark.

Since: 2.28

</description>
<parameters>
</parameters>
<return> a #GQuark.

</return>
</function>

<function name="g_tls_server_connection_new">
<description>
Creates a new #GTlsServerConnection wrapping @base_io_stream (which
must have pollable input and output streams).

Since: 2.28

</description>
<parameters>
<parameter name="base_io_stream">
<parameter_description> the #GIOStream to wrap
</parameter_description>
</parameter>
<parameter name="certificate">
<parameter_description> the default server certificate, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> the new #GTlsServerConnection, or %NULL on error

</return>
</function>

<function name="g_unix_connection_receive_credentials">
<description>
Receives credentials from the sending end of the connection.  The
sending end has to call g_unix_connection_send_credentials() (or
similar) for this to work.

As well as reading the credentials this also reads (and discards) a
single byte from the stream, as this is required for credentials
passing to work on some implementations.

Other ways to exchange credentials with a foreign peer includes the
#GUnixCredentialsMessage type and g_socket_get_credentials() function.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GUnixConnection.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> A #GCancellable or %NULL.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> Received credentials on success (free with
g_object_unref()), %NULL if @error is set.

</return>
</function>

<function name="g_unix_connection_receive_fd">
<description>
Receives a file descriptor from the sending end of the connection.
The sending end has to call g_unix_connection_send_fd() for this
to work.

As well as reading the fd this also reads a single byte from the
stream, as this is required for fd passing to work on some
implementations.

Since: 2.22

</description>
<parameters>
<parameter name="connection">
<parameter_description> a #GUnixConnection
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> a file descriptor on success, -1 on error.

</return>
</function>

<function name="g_unix_connection_send_credentials">
<description>
Passes the credentials of the current user the receiving side
of the connection. The recieving end has to call
g_unix_connection_receive_credentials() (or similar) to accept the
credentials.

As well as sending the credentials this also writes a single NUL
byte to the stream, as this is required for credentials passing to
work on some implementations.

Other ways to exchange credentials with a foreign peer includes the
#GUnixCredentialsMessage type and g_socket_get_credentials() function.

Since: 2.26

</description>
<parameters>
<parameter name="connection">
<parameter_description> A #GUnixConnection.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> A #GCancellable or %NULL.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE if @error is set.

</return>
</function>

<function name="g_unix_connection_send_fd">
<description>
Passes a file descriptor to the recieving side of the
connection. The recieving end has to call g_unix_connection_receive_fd()
to accept the file descriptor.

As well as sending the fd this also writes a single byte to the
stream, as this is required for fd passing to work on some
implementations.

Since: 2.22

</description>
<parameters>
<parameter name="connection">
<parameter_description> a #GUnixConnection
</parameter_description>
</parameter>
<parameter name="fd">
<parameter_description> a file descriptor
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> a %TRUE on success, %NULL on error.

</return>
</function>

<function name="g_unix_credentials_message_get_credentials">
<description>
Gets the credentials stored in @message.

Since: 2.26

</description>
<parameters>
<parameter name="message">
<parameter_description> A #GUnixCredentialsMessage.
</parameter_description>
</parameter>
</parameters>
<return> A #GCredentials instance. Do not free, it is owned by @message.

</return>
</function>

<function name="g_unix_credentials_message_is_supported">
<description>
Checks if passing a #GCredential on a #GSocket is supported on this platform.

Since: 2.26

</description>
<parameters>
</parameters>
<return> %TRUE if supported, %FALSE otherwise

</return>
</function>

<function name="g_unix_credentials_message_new">
<description>
Creates a new #GUnixCredentialsMessage with credentials matching the current processes.

Since: 2.26

</description>
<parameters>
</parameters>
<return> a new #GUnixCredentialsMessage

</return>
</function>

<function name="g_unix_credentials_message_new_with_credentials">
<description>
Creates a new #GUnixCredentialsMessage holding @credentials.

Since: 2.26

</description>
<parameters>
<parameter name="credentials">
<parameter_description> A #GCredentials object.
</parameter_description>
</parameter>
</parameters>
<return> a new #GUnixCredentialsMessage

</return>
</function>

<function name="g_unix_fd_list_append">
<description>
Adds a file descriptor to @list.

The file descriptor is duplicated using dup(). You keep your copy
of the descriptor and the copy contained in @list will be closed
when @list is finalized.

A possible cause of failure is exceeding the per-process or
system-wide file descriptor limit.

The index of the file descriptor in the list is returned.  If you use
this index with g_unix_fd_list_get() then you will receive back a
duplicated copy of the same file descriptor.

Since: 2.24

</description>
<parameters>
<parameter name="list">
<parameter_description> a #GUnixFDList
</parameter_description>
</parameter>
<parameter name="fd">
<parameter_description> a valid open file descriptor
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError pointer
</parameter_description>
</parameter>
</parameters>
<return> the index of the appended fd in case of success, else -1
(and @error is set)

</return>
</function>

<function name="g_unix_fd_list_get">
<description>
Gets a file descriptor out of @list.

@index_ specifies the index of the file descriptor to get.  It is a
programmer error for @index_ to be out of range; see
g_unix_fd_list_get_length().

The file descriptor is duplicated using dup() and set as
close-on-exec before being returned.  You must call close() on it
when you are done.

A possible cause of failure is exceeding the per-process or
system-wide file descriptor limit.

Since: 2.24

</description>
<parameters>
<parameter name="list">
<parameter_description> a #GUnixFDList
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index into the list
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError pointer
</parameter_description>
</parameter>
</parameters>
<return> the file descriptor, or -1 in case of error

</return>
</function>

<function name="g_unix_fd_list_get_length">
<description>
Gets the length of @list (ie: the number of file descriptors
contained within).

Since: 2.24

</description>
<parameters>
<parameter name="list">
<parameter_description> a #GUnixFDList
</parameter_description>
</parameter>
</parameters>
<return> the length of @list

</return>
</function>

<function name="g_unix_fd_list_new">
<description>
Creates a new #GUnixFDList containing no file descriptors.

Since: 2.24

</description>
<parameters>
</parameters>
<return> a new #GUnixFDList

</return>
</function>

<function name="g_unix_fd_list_new_from_array">
<description>
Creates a new #GUnixFDList containing the file descriptors given in
@fds.  The file descriptors become the property of the new list and
may no longer be used by the caller.  The array itself is owned by
the caller.

Each file descriptor in the array should be set to close-on-exec.

If @n_fds is -1 then @fds must be terminated with -1.

Since: 2.24

</description>
<parameters>
<parameter name="fds">
<parameter_description> the initial list of file descriptors
</parameter_description>
</parameter>
<parameter name="n_fds">
<parameter_description> the length of #fds, or -1
</parameter_description>
</parameter>
</parameters>
<return> a new #GUnixFDList

</return>
</function>

<function name="g_unix_fd_list_peek_fds">
<description>
Returns the array of file descriptors that is contained in this
object.

After this call, the descriptors remain the property of @list.  The
caller must not close them and must not free the array.  The array is
valid only until @list is changed in any way.

If @length is non-%NULL then it is set to the number of file
descriptors in the returned array. The returned array is also
terminated with -1.

This function never returns %NULL. In case there are no file
descriptors contained in @list, an empty array is returned.

Since: 2.24

</description>
<parameters>
<parameter name="list">
<parameter_description> a #GUnixFDList
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> pointer to the length of the returned
array, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> an array of file
descriptors

</return>
</function>

<function name="g_unix_fd_list_steal_fds">
<description>
Returns the array of file descriptors that is contained in this
object.

After this call, the descriptors are no longer contained in
@list. Further calls will return an empty list (unless more
descriptors have been added).

The return result of this function must be freed with g_free().
The caller is also responsible for closing all of the file
descriptors.  The file descriptors in the array are set to
close-on-exec.

If @length is non-%NULL then it is set to the number of file
descriptors in the returned array. The returned array is also
terminated with -1.

This function never returns %NULL. In case there are no file
descriptors contained in @list, an empty array is returned.

Since: 2.24

</description>
<parameters>
<parameter name="list">
<parameter_description> a #GUnixFDList
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> pointer to the length of the returned
array, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> an array of file
descriptors

</return>
</function>

<function name="g_unix_fd_message_append_fd">
<description>
Adds a file descriptor to @message.

The file descriptor is duplicated using dup(). You keep your copy
of the descriptor and the copy contained in @message will be closed
when @message is finalized.

A possible cause of failure is exceeding the per-process or
system-wide file descriptor limit.

Since: 2.22

</description>
<parameters>
<parameter name="message">
<parameter_description> a #GUnixFDMessage
</parameter_description>
</parameter>
<parameter name="fd">
<parameter_description> a valid open file descriptor
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError pointer
</parameter_description>
</parameter>
</parameters>
<return> %TRUE in case of success, else %FALSE (and @error is set)

</return>
</function>

<function name="g_unix_fd_message_get_fd_list">
<description>
Gets the #GUnixFDList contained in @message.  This function does not
return a reference to the caller, but the returned list is valid for
the lifetime of @message.

Since: 2.24

</description>
<parameters>
<parameter name="message">
<parameter_description> a #GUnixFDMessage
</parameter_description>
</parameter>
</parameters>
<return> the #GUnixFDList from @message

</return>
</function>

<function name="g_unix_fd_message_new">
<description>
Creates a new #GUnixFDMessage containing an empty file descriptor
list.

Since: 2.22

</description>
<parameters>
</parameters>
<return> a new #GUnixFDMessage

</return>
</function>

<function name="g_unix_fd_message_new_with_fd_list">
<description>
Creates a new #GUnixFDMessage containing @list.

Since: 2.24

</description>
<parameters>
<parameter name="fd_list">
<parameter_description> a #GUnixFDList
</parameter_description>
</parameter>
</parameters>
<return> a new #GUnixFDMessage

</return>
</function>

<function name="g_unix_fd_message_steal_fds">
<description>
Returns the array of file descriptors that is contained in this
object.

After this call, the descriptors are no longer contained in
@message. Further calls will return an empty list (unless more
descriptors have been added).

The return result of this function must be freed with g_free().
The caller is also responsible for closing all of the file
descriptors.

If @length is non-%NULL then it is set to the number of file
descriptors in the returned array. The returned array is also
terminated with -1.

This function never returns %NULL. In case there are no file
descriptors contained in @message, an empty array is returned.

Since: 2.22

</description>
<parameters>
<parameter name="message">
<parameter_description> a #GUnixFDMessage
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> pointer to the length of the returned
array, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> an array of file
descriptors

</return>
</function>

<function name="g_unix_input_stream_get_close_fd">
<description>
Returns whether the file descriptor of @stream will be
closed when the stream is closed.

Since: 2.20

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GUnixInputStream
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the file descriptor is closed when done

</return>
</function>

<function name="g_unix_input_stream_get_fd">
<description>
Return the UNIX file descriptor that the stream reads from.

Since: 2.20

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GUnixInputStream
</parameter_description>
</parameter>
</parameters>
<return> The file descriptor of @stream

</return>
</function>

<function name="g_unix_input_stream_new">
<description>
Creates a new #GUnixInputStream for the given @fd. 

If @close_fd is %TRUE, the file descriptor will be closed 
when the stream is closed.


</description>
<parameters>
<parameter name="fd">
<parameter_description> a UNIX file descriptor
</parameter_description>
</parameter>
<parameter name="close_fd">
<parameter_description> %TRUE to close the file descriptor when done
</parameter_description>
</parameter>
</parameters>
<return> a new #GUnixInputStream
</return>
</function>

<function name="g_unix_input_stream_set_close_fd">
<description>
Sets whether the file descriptor of @stream shall be closed
when the stream is closed.

Since: 2.20

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GUnixInputStream
</parameter_description>
</parameter>
<parameter name="close_fd">
<parameter_description> %TRUE to close the file descriptor when done
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_unix_is_mount_path_system_internal">
<description>
Determines if @mount_path is considered an implementation of the
OS. This is primarily used for hiding mountable and mounted volumes
that only are used in the OS and has little to no relevance to the
casual user.


</description>
<parameters>
<parameter name="mount_path">
<parameter_description> a mount path, e.g. &lt;filename&gt;/media/disk&lt;/filename&gt; 
or &lt;filename&gt;/usr&lt;/filename&gt;
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @mount_path is considered an implementation detail 
of the OS.
</return>
</function>

<function name="g_unix_mount_at">
<description>
Gets a #GUnixMountEntry for a given mount path. If @time_read
is set, it will be filled with a unix timestamp for checking
if the mounts have changed since with g_unix_mounts_changed_since().


</description>
<parameters>
<parameter name="mount_path">
<parameter_description> path for a possible unix mount.
</parameter_description>
</parameter>
<parameter name="time_read">
<parameter_description> guint64 to contain a timestamp.
</parameter_description>
</parameter>
</parameters>
<return> a #GUnixMountEntry.
</return>
</function>

<function name="g_unix_mount_compare">
<description>
Compares two unix mounts.


</description>
<parameters>
<parameter name="mount1">
<parameter_description> first #GUnixMountEntry to compare.
</parameter_description>
</parameter>
<parameter name="mount2">
<parameter_description> second #GUnixMountEntry to compare.
</parameter_description>
</parameter>
</parameters>
<return> 1, 0 or -1 if @mount1 is greater than, equal to,
or less than @mount2, respectively. 
</return>
</function>

<function name="g_unix_mount_free">
<description>
Frees a unix mount.

</description>
<parameters>
<parameter name="mount_entry">
<parameter_description> a #GUnixMount.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_unix_mount_get_device_path">
<description>
Gets the device path for a unix mount.


</description>
<parameters>
<parameter name="mount_entry">
<parameter_description> a #GUnixMount.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the device path.
</return>
</function>

<function name="g_unix_mount_get_fs_type">
<description>
Gets the filesystem type for the unix mount.


</description>
<parameters>
<parameter name="mount_entry">
<parameter_description> a #GUnixMount.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the file system type.
</return>
</function>

<function name="g_unix_mount_get_mount_path">
<description>
Gets the mount path for a unix mount.


</description>
<parameters>
<parameter name="mount_entry">
<parameter_description> input #GUnixMountEntry to get the mount path for.
</parameter_description>
</parameter>
</parameters>
<return> the mount path for @mount_entry.
</return>
</function>

<function name="g_unix_mount_guess_can_eject">
<description>
Guesses whether a Unix mount can be ejected.


</description>
<parameters>
<parameter name="mount_entry">
<parameter_description> a #GUnixMountEntry
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @mount_entry is deemed to be ejectable.
</return>
</function>

<function name="g_unix_mount_guess_icon">
<description>
Guesses the icon of a Unix mount. 


</description>
<parameters>
<parameter name="mount_entry">
<parameter_description> a #GUnixMountEntry
</parameter_description>
</parameter>
</parameters>
<return> a #GIcon
</return>
</function>

<function name="g_unix_mount_guess_name">
<description>
Guesses the name of a Unix mount. 
The result is a translated string.


</description>
<parameters>
<parameter name="mount_entry">
<parameter_description> a #GUnixMountEntry
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated string that must
be freed with g_free()
</return>
</function>

<function name="g_unix_mount_guess_should_display">
<description>
Guesses whether a Unix mount should be displayed in the UI.


</description>
<parameters>
<parameter name="mount_entry">
<parameter_description> a #GUnixMountEntry
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @mount_entry is deemed to be displayable.
</return>
</function>

<function name="g_unix_mount_is_readonly">
<description>
Checks if a unix mount is mounted read only.


</description>
<parameters>
<parameter name="mount_entry">
<parameter_description> a #GUnixMount.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @mount_entry is read only.
</return>
</function>

<function name="g_unix_mount_is_system_internal">
<description>
Checks if a unix mount is a system path.


</description>
<parameters>
<parameter name="mount_entry">
<parameter_description> a #GUnixMount.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the unix mount is for a system path.
</return>
</function>

<function name="g_unix_mount_monitor_new">
<description>
Gets a new #GUnixMountMonitor. The default rate limit for which the
monitor will report consecutive changes for the mount and mount
point entry files is the default for a #GFileMonitor. Use
g_unix_mount_monitor_set_rate_limit() to change this.


</description>
<parameters>
</parameters>
<return> a #GUnixMountMonitor. 
</return>
</function>

<function name="g_unix_mount_monitor_set_rate_limit">
<description>
Sets the rate limit to which the @mount_monitor will report
consecutive change events to the mount and mount point entry files.

Since: 2.18

</description>
<parameters>
<parameter name="mount_monitor">
<parameter_description> a #GUnixMountMonitor
</parameter_description>
</parameter>
<parameter name="limit_msec">
<parameter_description> a integer with the limit in milliseconds to
poll for changes.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_unix_mount_point_compare">
<description>
Compares two unix mount points.


</description>
<parameters>
<parameter name="mount1">
<parameter_description> a #GUnixMount.
</parameter_description>
</parameter>
<parameter name="mount2">
<parameter_description> a #GUnixMount.
</parameter_description>
</parameter>
</parameters>
<return> 1, 0 or -1 if @mount1 is greater than, equal to,
or less than @mount2, respectively.
</return>
</function>

<function name="g_unix_mount_point_free">
<description>
Frees a unix mount point.

</description>
<parameters>
<parameter name="mount_point">
<parameter_description> unix mount point to free.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_unix_mount_point_get_device_path">
<description>
Gets the device path for a unix mount point.


</description>
<parameters>
<parameter name="mount_point">
<parameter_description> a #GUnixMountPoint.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the device path.
</return>
</function>

<function name="g_unix_mount_point_get_fs_type">
<description>
Gets the file system type for the mount point.


</description>
<parameters>
<parameter name="mount_point">
<parameter_description> a #GUnixMountPoint.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the file system type.
</return>
</function>

<function name="g_unix_mount_point_get_mount_path">
<description>
Gets the mount path for a unix mount point.


</description>
<parameters>
<parameter name="mount_point">
<parameter_description> a #GUnixMountPoint.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the mount path.
</return>
</function>

<function name="g_unix_mount_point_guess_can_eject">
<description>
Guesses whether a Unix mount point can be ejected.


</description>
<parameters>
<parameter name="mount_point">
<parameter_description> a #GUnixMountPoint
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @mount_point is deemed to be ejectable.
</return>
</function>

<function name="g_unix_mount_point_guess_icon">
<description>
Guesses the icon of a Unix mount point. 


</description>
<parameters>
<parameter name="mount_point">
<parameter_description> a #GUnixMountPoint
</parameter_description>
</parameter>
</parameters>
<return> a #GIcon
</return>
</function>

<function name="g_unix_mount_point_guess_name">
<description>
Guesses the name of a Unix mount point. 
The result is a translated string.


</description>
<parameters>
<parameter name="mount_point">
<parameter_description> a #GUnixMountPoint
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated string that must 
be freed with g_free()
</return>
</function>

<function name="g_unix_mount_point_is_loopback">
<description>
Checks if a unix mount point is a loopback device.


</description>
<parameters>
<parameter name="mount_point">
<parameter_description> a #GUnixMountPoint.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the mount point is a loopback. %FALSE otherwise. 
</return>
</function>

<function name="g_unix_mount_point_is_readonly">
<description>
Checks if a unix mount point is read only.


</description>
<parameters>
<parameter name="mount_point">
<parameter_description> a #GUnixMountPoint.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a mount point is read only.
</return>
</function>

<function name="g_unix_mount_point_is_user_mountable">
<description>
Checks if a unix mount point is mountable by the user.


</description>
<parameters>
<parameter name="mount_point">
<parameter_description> a #GUnixMountPoint.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the mount point is user mountable.
</return>
</function>

<function name="g_unix_mount_points_changed_since">
<description>
Checks if the unix mount points have changed since a given unix time.


</description>
<parameters>
<parameter name="time">
<parameter_description> guint64 to contain a timestamp.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the mount points have changed since @time. 
</return>
</function>

<function name="g_unix_mount_points_get">
<description>
Gets a #GList of #GUnixMountPoint containing the unix mount points.
If @time_read is set, it will be filled with the mount timestamp,
allowing for checking if the mounts have changed with
g_unix_mounts_points_changed_since().


</description>
<parameters>
<parameter name="time_read">
<parameter_description> guint64 to contain a timestamp.
</parameter_description>
</parameter>
</parameters>
<return>
a #GList of the UNIX mountpoints.
</return>
</function>

<function name="g_unix_mounts_changed_since">
<description>
Checks if the unix mounts have changed since a given unix time.


</description>
<parameters>
<parameter name="time">
<parameter_description> guint64 to contain a timestamp.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the mounts have changed since @time. 
</return>
</function>

<function name="g_unix_mounts_get">
<description>
Gets a #GList of #GUnixMountEntry containing the unix mounts.
If @time_read is set, it will be filled with the mount
timestamp, allowing for checking if the mounts have changed
with g_unix_mounts_changed_since().


</description>
<parameters>
<parameter name="time_read">
<parameter_description> guint64 to contain a timestamp, or %NULL
</parameter_description>
</parameter>
</parameters>
<return>
a #GList of the UNIX mounts.
</return>
</function>

<function name="g_unix_output_stream_get_close_fd">
<description>
Returns whether the file descriptor of @stream will be
closed when the stream is closed.

Since: 2.20

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GUnixOutputStream
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the file descriptor is closed when done

</return>
</function>

<function name="g_unix_output_stream_get_fd">
<description>
Return the UNIX file descriptor that the stream writes to.

Since: 2.20

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GUnixOutputStream
</parameter_description>
</parameter>
</parameters>
<return> The file descriptor of @stream

</return>
</function>

<function name="g_unix_output_stream_new">
<description>
Creates a new #GUnixOutputStream for the given @fd. 

If @close_fd, is %TRUE, the file descriptor will be closed when 
the output stream is destroyed.


</description>
<parameters>
<parameter name="fd">
<parameter_description> a UNIX file descriptor
</parameter_description>
</parameter>
<parameter name="close_fd">
<parameter_description> %TRUE to close the file descriptor when done
</parameter_description>
</parameter>
</parameters>
<return> a new #GOutputStream
</return>
</function>

<function name="g_unix_output_stream_set_close_fd">
<description>
Sets whether the file descriptor of @stream shall be closed
when the stream is closed.

Since: 2.20

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GUnixOutputStream
</parameter_description>
</parameter>
<parameter name="close_fd">
<parameter_description> %TRUE to close the file descriptor when done
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_unix_socket_address_abstract_names_supported">
<description>
Checks if abstract unix domain socket names are supported.

Since: 2.22

</description>
<parameters>
</parameters>
<return> %TRUE if supported, %FALSE otherwise

</return>
</function>

<function name="g_unix_socket_address_get_address_type">
<description>
Gets @address's type.

Since: 2.26

</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetSocketAddress
</parameter_description>
</parameter>
</parameters>
<return> a #GUnixSocketAddressType

</return>
</function>

<function name="g_unix_socket_address_get_is_abstract">
<description>
Tests if @address is abstract.

Since: 2.22

Deprecated: Use g_unix_socket_address_get_address_type()

</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetSocketAddress
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the address is abstract, %FALSE otherwise

</return>
</function>

<function name="g_unix_socket_address_get_path">
<description>
Gets @address's path, or for abstract sockets the &quot;name&quot;.

Guaranteed to be zero-terminated, but an abstract socket
may contain embedded zeros, and thus you should use
g_unix_socket_address_get_path_len() to get the true length
of this string.

Since: 2.22

</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetSocketAddress
</parameter_description>
</parameter>
</parameters>
<return> the path for @address

</return>
</function>

<function name="g_unix_socket_address_get_path_len">
<description>
Gets the length of @address's path.

For details, see g_unix_socket_address_get_path().

Since: 2.22

</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetSocketAddress
</parameter_description>
</parameter>
</parameters>
<return> the length of the path

</return>
</function>

<function name="g_unix_socket_address_new">
<description>
Creates a new #GUnixSocketAddress for @path.

To create abstract socket addresses, on systems that support that,
use g_unix_socket_address_new_abstract().

Since: 2.22

</description>
<parameters>
<parameter name="path">
<parameter_description> the socket path
</parameter_description>
</parameter>
</parameters>
<return> a new #GUnixSocketAddress

</return>
</function>

<function name="g_unix_socket_address_new_abstract">
<description>
Creates a new %G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED
#GUnixSocketAddress for @path.

Deprecated: Use g_unix_socket_address_new_with_type().

</description>
<parameters>
<parameter name="path">
<parameter_description> the abstract name
</parameter_description>
</parameter>
<parameter name="path_len">
<parameter_description> the length of @path, or -1
</parameter_description>
</parameter>
</parameters>
<return> a new #GUnixSocketAddress

</return>
</function>

<function name="g_unix_socket_address_new_with_type">
<description>
Creates a new #GUnixSocketAddress of type @type with name @path.

If @type is %G_UNIX_SOCKET_ADDRESS_PATH, this is equivalent to
calling g_unix_socket_address_new().

If @path_type is %G_UNIX_SOCKET_ADDRESS_ABSTRACT, then @path_len
bytes of @path will be copied to the socket's path, and only those
bytes will be considered part of the name. (If @path_len is -1,
then @path is assumed to be NUL-terminated.) For example, if @path
was &quot;test&quot;, then calling g_socket_address_get_native_size() on the
returned socket would return 7 (2 bytes of overhead, 1 byte for the
abstract-socket indicator byte, and 4 bytes for the name &quot;test&quot;).

If @path_type is %G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED, then
@path_len bytes of @path will be copied to the socket's path, the
rest of the path will be padded with 0 bytes, and the entire
zero-padded buffer will be considered the name. (As above, if
@path_len is -1, then @path is assumed to be NUL-terminated.) In
this case, g_socket_address_get_native_size() will always return
the full size of a &lt;literal&gt;struct sockaddr_un&lt;/literal&gt;, although
g_unix_socket_address_get_path_len() will still return just the
length of @path.

%G_UNIX_SOCKET_ADDRESS_ABSTRACT is preferred over
%G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED for new programs. Of course,
when connecting to a server created by another process, you must
use the appropriate type corresponding to how that process created
its listening socket.

Since: 2.26

</description>
<parameters>
<parameter name="path">
<parameter_description> the name
</parameter_description>
</parameter>
<parameter name="path_len">
<parameter_description> the length of @path, or -1
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #GUnixSocketAddressType
</parameter_description>
</parameter>
</parameters>
<return> a new #GUnixSocketAddress

</return>
</function>

<function name="g_vfs_get_default">
<description>
Gets the default #GVfs for the system.


</description>
<parameters>
</parameters>
<return> a #GVfs. 
</return>
</function>

<function name="g_vfs_get_file_for_path">
<description>
Gets a #GFile for @path.


</description>
<parameters>
<parameter name="vfs">
<parameter_description> a #GVfs.
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a string containing a VFS path.
</parameter_description>
</parameter>
</parameters>
<return> a #GFile. 
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_vfs_get_file_for_uri">
<description>
Gets a #GFile for @uri.

This operation never fails, but the returned object
might not support any I/O operation if the URI 
is malformed or if the URI scheme is not supported.


</description>
<parameters>
<parameter name="vfs">
<parameter_description> a#GVfs.
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a string containing a URI 
</parameter_description>
</parameter>
</parameters>
<return> a #GFile. 
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_vfs_get_local">
<description>
Gets the local #GVfs for the system.


</description>
<parameters>
</parameters>
<return> a #GVfs.
</return>
</function>

<function name="g_vfs_get_supported_uri_schemes">
<description>
Gets a list of URI schemes supported by @vfs.


</description>
<parameters>
<parameter name="vfs">
<parameter_description> a #GVfs.
</parameter_description>
</parameter>
</parameters>
<return> a %NULL-terminated array of strings.
The returned array belongs to GIO and must 
not be freed or modified.
</return>
</function>

<function name="g_vfs_is_active">
<description>
Checks if the VFS is active.


</description>
<parameters>
<parameter name="vfs">
<parameter_description> a #GVfs.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if construction of the @vfs was successful and it is now active.
</return>
</function>

<function name="g_vfs_parse_name">
<description>
This operation never fails, but the returned object might 
not support any I/O operations if the @parse_name cannot 
be parsed by the #GVfs module.


</description>
<parameters>
<parameter name="vfs">
<parameter_description> a #GVfs.
</parameter_description>
</parameter>
<parameter name="parse_name">
<parameter_description> a string to be parsed by the VFS module.
</parameter_description>
</parameter>
</parameters>
<return> a #GFile for the given @parse_name.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_volume_can_eject">
<description>
Checks if a volume can be ejected.


</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @volume can be ejected. %FALSE otherwise.
</return>
</function>

<function name="g_volume_can_mount">
<description>
Checks if a volume can be mounted.


</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @volume can be mounted. %FALSE otherwise.
</return>
</function>

<function name="g_volume_eject">
<description>
Ejects a volume. This is an asynchronous operation, and is
finished by calling g_volume_eject_finish() with the @volume
and #GAsyncResult returned in the @callback.

Deprecated: 2.22: Use g_volume_eject_with_operation() instead.

</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the unmount if required for eject
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data that gets passed to @callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_volume_eject_finish">
<description>
Finishes ejecting a volume. If any errors occured during the operation,
@error will be set to contain the errors and %FALSE will be returned.

Deprecated: 2.22: Use g_volume_eject_with_operation_finish() instead.

</description>
<parameters>
<parameter name="volume">
<parameter_description> pointer to a #GVolume.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store an error, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, %FALSE if operation failed.

</return>
</function>

<function name="g_volume_eject_with_operation">
<description>
Ejects a volume. This is an asynchronous operation, and is
finished by calling g_volume_eject_with_operation_finish() with the @volume
and #GAsyncResult data returned in the @callback.

Since: 2.22

</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the unmount if required for eject
</parameter_description>
</parameter>
<parameter name="mount_operation">
<parameter_description> a #GMountOperation or %NULL to
avoid user interaction.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_volume_eject_with_operation_finish">
<description>
Finishes ejecting a volume. If any errors occurred during the operation,
@error will be set to contain the errors and %FALSE will be returned.

Since: 2.22

</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the volume was successfully ejected. %FALSE otherwise.

</return>
</function>

<function name="g_volume_enumerate_identifiers">
<description>
Gets the kinds of &lt;link linkend=&quot;volume-identifier&quot;&gt;identifiers&lt;/link&gt;
that @volume has. Use g_volume_get_identifer() to obtain 
the identifiers themselves.


</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume
</parameter_description>
</parameter>
</parameters>
<return> a %NULL-terminated array
of strings containing kinds of identifiers. Use g_strfreev() to free.
</return>
</function>

<function name="g_volume_get_activation_root">
<description>
Gets the activation root for a #GVolume if it is known ahead of
mount time. Returns %NULL otherwise. If not %NULL and if @volume
is mounted, then the result of g_mount_get_root() on the
#GMount object obtained from g_volume_get_mount() will always
either be equal or a prefix of what this function returns. In
other words, in code

&lt;programlisting&gt;
GMount *mount;
GFile *mount_root
GFile *volume_activation_root;

mount = g_volume_get_mount (volume); / * mounted, so never NULL * /
mount_root = g_mount_get_root (mount);
volume_activation_root = g_volume_get_activation_root(volume); / * assume not NULL * /
&lt;/programlisting&gt;

then the expression

&lt;programlisting&gt;
(g_file_has_prefix (volume_activation_root, mount_root) ||
      g_file_equal (volume_activation_root, mount_root))
&lt;/programlisting&gt;

will always be %TRUE.

Activation roots are typically used in #GVolumeMonitor
implementations to find the underlying mount to shadow, see
g_mount_is_shadowed() for more details.

Since: 2.18

</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume
</parameter_description>
</parameter>
</parameters>
<return> the activation root of @volume or %NULL. Use
g_object_unref() to free.

</return>
</function>

<function name="g_volume_get_drive">
<description>
Gets the drive for the @volume.


</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume.
</parameter_description>
</parameter>
</parameters>
<return> a #GDrive or %NULL if @volume is not associated with a drive.
The returned object should be unreffed with g_object_unref()
when no longer needed.
</return>
</function>

<function name="g_volume_get_icon">
<description>
Gets the icon for @volume.


</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume.
</parameter_description>
</parameter>
</parameters>
<return> a #GIcon.
The returned object should be unreffed with g_object_unref()
when no longer needed.
</return>
</function>

<function name="g_volume_get_identifier">
<description>
Gets the identifier of the given kind for @volume. 
See the &lt;link linkend=&quot;volume-identifier&quot;&gt;introduction&lt;/link&gt;
for more information about volume identifiers.


</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume
</parameter_description>
</parameter>
<parameter name="kind">
<parameter_description> the kind of identifier to return
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string containing the
requested identfier, or %NULL if the #GVolume
doesn't have this kind of identifier
</return>
</function>

<function name="g_volume_get_mount">
<description>
Gets the mount for the @volume.


</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume.
</parameter_description>
</parameter>
</parameters>
<return> a #GMount or %NULL if @volume isn't mounted.
The returned object should be unreffed with g_object_unref()
when no longer needed.
</return>
</function>

<function name="g_volume_get_name">
<description>
Gets the name of @volume.


</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume.
</parameter_description>
</parameter>
</parameters>
<return> the name for the given @volume. The returned string should 
be freed with g_free() when no longer needed.
</return>
</function>

<function name="g_volume_get_uuid">
<description>
Gets the UUID for the @volume. The reference is typically based on
the file system UUID for the volume in question and should be
considered an opaque string. Returns %NULL if there is no UUID
available.


</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume.
</parameter_description>
</parameter>
</parameters>
<return> the UUID for @volume or %NULL if no UUID can be computed.
The returned string should be freed with g_free() 
when no longer needed.
</return>
</function>

<function name="g_volume_monitor_adopt_orphan_mount">
<description>
This function should be called by any #GVolumeMonitor
implementation when a new #GMount object is created that is not
associated with a #GVolume object. It must be called just before
emitting the @mount_added signal.

If the return value is not %NULL, the caller must associate the
returned #GVolume object with the #GMount. This involves returning
it in its g_mount_get_volume() implementation. The caller must
also listen for the &quot;removed&quot; signal on the returned object
and give up its reference when handling that signal

Similary, if implementing g_volume_monitor_adopt_orphan_mount(),
the implementor must take a reference to @mount and return it in
its g_volume_get_mount() implemented. Also, the implementor must
listen for the &quot;unmounted&quot; signal on @mount and give up its
reference upon handling that signal.

There are two main use cases for this function.

One is when implementing a user space file system driver that reads
blocks of a block device that is already represented by the native
volume monitor (for example a CD Audio file system driver). Such
a driver will generate its own #GMount object that needs to be
assoicated with the #GVolume object that represents the volume.

The other is for implementing a #GVolumeMonitor whose sole purpose
is to return #GVolume objects representing entries in the users
&quot;favorite servers&quot; list or similar.

Deprecated: 2.20: Instead of using this function, #GVolumeMonitor
implementations should instead create shadow mounts with the URI of
the mount they intend to adopt. See the proxy volume monitor in
gvfs for an example of this. Also see g_mount_is_shadowed(),
g_mount_shadow() and g_mount_unshadow() functions.

</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount object to find a parent for
</parameter_description>
</parameter>
</parameters>
<return> the #GVolume object that is the parent for @mount or %NULL
if no wants to adopt the #GMount.

</return>
</function>

<function name="g_volume_monitor_get">
<description>
Gets the volume monitor used by gio.


</description>
<parameters>
</parameters>
<return> a reference to the #GVolumeMonitor used by gio. Call
g_object_unref() when done with it.
</return>
</function>

<function name="g_volume_monitor_get_connected_drives">
<description>
Gets a list of drives connected to the system.

The returned list should be freed with g_list_free(), after
its elements have been unreffed with g_object_unref().


</description>
<parameters>
<parameter name="volume_monitor">
<parameter_description> a #GVolumeMonitor.
</parameter_description>
</parameter>
</parameters>
<return> a #GList of connected #GDrive objects.
</return>
</function>

<function name="g_volume_monitor_get_mount_for_uuid">
<description>
Finds a #GMount object by its UUID (see g_mount_get_uuid())


</description>
<parameters>
<parameter name="volume_monitor">
<parameter_description> a #GVolumeMonitor.
</parameter_description>
</parameter>
<parameter name="uuid">
<parameter_description> the UUID to look for
</parameter_description>
</parameter>
</parameters>
<return> a #GMount or %NULL if no such mount is available.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_volume_monitor_get_mounts">
<description>
Gets a list of the mounts on the system.

The returned list should be freed with g_list_free(), after
its elements have been unreffed with g_object_unref().


</description>
<parameters>
<parameter name="volume_monitor">
<parameter_description> a #GVolumeMonitor.
</parameter_description>
</parameter>
</parameters>
<return> a #GList of #GMount objects.
</return>
</function>

<function name="g_volume_monitor_get_volume_for_uuid">
<description>
Finds a #GVolume object by its UUID (see g_volume_get_uuid())


</description>
<parameters>
<parameter name="volume_monitor">
<parameter_description> a #GVolumeMonitor.
</parameter_description>
</parameter>
<parameter name="uuid">
<parameter_description> the UUID to look for
</parameter_description>
</parameter>
</parameters>
<return> a #GVolume or %NULL if no such volume is available.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_volume_monitor_get_volumes">
<description>
Gets a list of the volumes on the system.

The returned list should be freed with g_list_free(), after
its elements have been unreffed with g_object_unref().


</description>
<parameters>
<parameter name="volume_monitor">
<parameter_description> a #GVolumeMonitor.
</parameter_description>
</parameter>
</parameters>
<return> a #GList of #GVolume objects.
</return>
</function>

<function name="g_volume_mount">
<description>
Mounts a volume. This is an asynchronous operation, and is
finished by calling g_volume_mount_finish() with the @volume
and #GAsyncResult returned in the @callback.

Virtual: mount_fn

</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the operation
</parameter_description>
</parameter>
<parameter name="mount_operation">
<parameter_description> a #GMountOperation or %NULL to avoid user interaction.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data that gets passed to @callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_volume_mount_finish">
<description>
Finishes mounting a volume. If any errors occured during the operation,
@error will be set to contain the errors and %FALSE will be returned.

If the mount operation succeeded, g_volume_get_mount() on @volume
is guaranteed to return the mount right after calling this
function; there's no need to listen for the 'mount-added' signal on
#GVolumeMonitor.


</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store an error, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, %FALSE if operation failed.
</return>
</function>

<function name="g_volume_should_automount">
<description>
Returns whether the volume should be automatically mounted.


</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the volume should be automatically mounted.
</return>
</function>

<function name="g_win32_input_stream_get_close_handle">
<description>
Returns whether the handle of @stream will be
closed when the stream is closed.

Since: 2.26

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GWin32InputStream
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the handle is closed when done

</return>
</function>

<function name="g_win32_input_stream_get_handle">
<description>
Return the Windows file handle that the stream reads from.

Since: 2.26

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GWin32InputStream
</parameter_description>
</parameter>
</parameters>
<return> The file handle of @stream

</return>
</function>

<function name="g_win32_input_stream_new">
<description>
Creates a new #GWin32InputStream for the given @fd.

If @close_handle is %TRUE, the handle will be closed
when the stream is closed.

Note that &quot;handle&quot; here means a Win32 HANDLE, not a &quot;file descriptor&quot;
as used in the Windows C libraries.


</description>
<parameters>
<parameter name="handle">
<parameter_description> a Win32 file handle
</parameter_description>
</parameter>
<parameter name="close_fd">
<parameter_description> %TRUE to close the handle when done
</parameter_description>
</parameter>
</parameters>
<return> a new #GWin32InputStream
</return>
</function>

<function name="g_win32_input_stream_set_close_handle">
<description>
Sets whether the handle of @stream shall be closed
when the stream is closed.

Since: 2.26

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GWin32InputStream
</parameter_description>
</parameter>
<parameter name="close_handle">
<parameter_description> %TRUE to close the handle when done
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_win32_output_stream_get_close_handle">
<description>
Returns whether the handle of @stream will be closed when the
stream is closed.

Since: 2.26

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GWin32OutputStream
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the handle is closed when done

</return>
</function>

<function name="g_win32_output_stream_get_handle">
<description>
Return the Windows handle that the stream writes to.

Since: 2.26

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GWin32OutputStream
</parameter_description>
</parameter>
</parameters>
<return> The handle descriptor of @stream

</return>
</function>

<function name="g_win32_output_stream_new">
<description>
Creates a new #GWin32OutputStream for the given @handle.

If @close_handle, is %TRUE, the handle will be closed when the
output stream is destroyed.

Since: 2.26

</description>
<parameters>
<parameter name="handle">
<parameter_description> a Win32 file handle
</parameter_description>
</parameter>
<parameter name="close_handle">
<parameter_description> %TRUE to close the handle when done
</parameter_description>
</parameter>
</parameters>
<return> a new #GOutputStream

</return>
</function>

<function name="g_win32_output_stream_set_close_handle">
<description>
Sets whether the handle of @stream shall be closed when the stream
is closed.

Since: 2.26

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GWin32OutputStream
</parameter_description>
</parameter>
<parameter name="close_handle">
<parameter_description> %TRUE to close the handle when done
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_zlib_compressor_get_file_info">
<description>
Returns the #GZlibCompressor:file-info property.

Since: 2.26

</description>
<parameters>
<parameter name="compressor">
<parameter_description> a #GZlibCompressor
</parameter_description>
</parameter>
</parameters>
<return> a #GFileInfo, or %NULL

</return>
</function>

<function name="g_zlib_compressor_new">
<description>
Creates a new #GZlibCompressor.

Since: 2.24

</description>
<parameters>
<parameter name="format">
<parameter_description> The format to use for the compressed data
</parameter_description>
</parameter>
<parameter name="level">
<parameter_description> compression level (0-9), -1 for default
</parameter_description>
</parameter>
</parameters>
<return> a new #GZlibCompressor

</return>
</function>

<function name="g_zlib_compressor_set_file_info">
<description>
Sets @file_info in @compressor. If non-%NULL, and @compressor's
#GZlibCompressor:format property is %G_ZLIB_COMPRESSOR_FORMAT_GZIP,
it will be used to set the file name and modification time in
the GZIP header of the compressed data.

Note: it is an error to call this function while a compression is in
progress; it may only be called immediately after creation of @compressor,
or after resetting it with g_converter_reset().

Since: 2.26

</description>
<parameters>
<parameter name="compressor">
<parameter_description> a #GZlibCompressor
</parameter_description>
</parameter>
<parameter name="file_info">
<parameter_description> a #GFileInfo
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_zlib_decompressor_get_file_info">
<description>
Retrieves the #GFileInfo constructed from the GZIP header data
of compressed data processed by @compressor, or %NULL if @decompressor's
#GZlibDecompressor:format property is not %G_ZLIB_COMPRESSOR_FORMAT_GZIP,
or the header data was not fully processed yet, or it not present in the
data stream at all.

Since: 2.26

</description>
<parameters>
<parameter name="decompressor">
<parameter_description> a #GZlibDecompressor
</parameter_description>
</parameter>
</parameters>
<return> a #GFileInfo, or %NULL

</return>
</function>

<function name="g_zlib_decompressor_new">
<description>
Creates a new #GZlibDecompressor.

Since: 2.24

</description>
<parameters>
<parameter name="format">
<parameter_description> The format to use for the compressed data
</parameter_description>
</parameter>
</parameters>
<return> a new #GZlibDecompressor

</return>
</function>

<function name="get_all_desktop_entries_for_mime_type">
<description>
Returns all the desktop ids for @mime_type. The desktop files
are listed in an order so that default applications are listed before
non-default ones, and handlers for inherited mimetypes are listed
after the base ones.

Optionally doesn't list the desktop ids given in the @except 


</description>
<parameters>
<parameter name="mime_type">
<parameter_description> a mime type.
</parameter_description>
</parameter>
<parameter name="except">
<parameter_description> NULL or a strv list
</parameter_description>
</parameter>
</parameters>
<return> a #GList containing the desktop ids which claim
to handle @mime_type.
</return>
</function>

<function name="gvdb_table_get_raw_value">
<description>
Looks up a value named @key in @file.

This call is equivalent to gvdb_table_get_value() except that it
never byteswaps the value.

</description>
<parameters>
<parameter name="table">
<parameter_description> a #GvdbTable
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a string
</parameter_description>
</parameter>
</parameters>
<return> a #GVariant, or %NULL
</return>
</function>

<function name="gvdb_table_get_table">
<description>
Looks up the hash table named @key in @file.

The toplevel hash table in a #GvdbTable can contain reference to
child hash tables (and those can contain further references...).

If @key is not found in @file then %NULL is returned.  Otherwise, a
new #GvdbTable is returned, referring to the child hashtable as
contained in the file.  This newly-created #GvdbTable does not depend
on the continued existence of @file.

You should call gvdb_table_unref() on the return result when you no
longer require it.

</description>
<parameters>
<parameter name="file">
<parameter_description> a #GvdbTable
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a string
</parameter_description>
</parameter>
</parameters>
<return> a new #GvdbTable, or %NULL
</return>
</function>

<function name="gvdb_table_get_value">
<description>
Looks up a value named @key in @file.

If the value is not found then %NULL is returned.  Otherwise, a new
#GVariant instance is returned.  The #GVariant does not depend on the
continued existence of @file.

You should call g_variant_unref() on the return result when you no
longer require it.

</description>
<parameters>
<parameter name="file">
<parameter_description> a #GvdbTable
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a string
</parameter_description>
</parameter>
</parameters>
<return> a #GVariant, or %NULL
</return>
</function>

<function name="gvdb_table_has_value">
<description>
Checks for a value named @key in @file.

Note: this function does not consider non-value nodes (other hash
tables, for example).

</description>
<parameters>
<parameter name="file">
<parameter_description> a #GvdbTable
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a string
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @key is in the table
</return>
</function>

<function name="gvdb_table_is_valid">
<description>
Checks if the table is still valid.

An on-disk GVDB can be marked as invalid.  This happens when the file
has been replaced.  The appropriate action is typically to reopen the
file.

</description>
<parameters>
<parameter name="table">
<parameter_description> a #GvdbTable
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @table is still valid
</return>
</function>

<function name="gvdb_table_list">
<description>
List all of the keys that appear below @key.  The nesting of keys
within the hash file is defined by the program that created the hash
file.  One thing is constant: each item in the returned array can be
concatenated to @key to obtain the full name of that key.

It is not possible to tell from this function if a given key is
itself a path, a value, or another hash table; you are expected to
know this for yourself.

You should call g_strfreev() on the return result when you no longer
require it.

</description>
<parameters>
<parameter name="file">
<parameter_description> a #GvdbTable
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a string
</parameter_description>
</parameter>
</parameters>
<return> a %NULL-terminated string array
</return>
</function>

<function name="gvdb_table_new">
<description>
Creates a new #GvdbTable from the contents of the file found at
@filename.

The only time this function fails is if the file cannot be opened.
In that case, the #GError that is returned will be an error from
g_mapped_file_new().

An empty or otherwise corrupted file is considered to be a valid
#GvdbTable with no entries.

You should call gvdb_table_unref() on the return result when you no
longer require it.

</description>
<parameters>
<parameter name="filename">
<parameter_description> the path to the hash file
</parameter_description>
</parameter>
<parameter name="trusted">
<parameter_description> if the contents of @filename are trusted
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> %NULL, or a pointer to a %NULL #GError
</parameter_description>
</parameter>
</parameters>
<return> a new #GvdbTable
</return>
</function>

<function name="gvdb_table_ref">
<description>
Increases the reference count on @file.

</description>
<parameters>
<parameter name="file">
<parameter_description> a #GvdbTable
</parameter_description>
</parameter>
</parameters>
<return> a new reference on @file
</return>
</function>

<function name="gvdb_table_unref">
<description>
Decreases the reference count on @file, possibly freeing it.

Since: 2.26

</description>
<parameters>
<parameter name="file">
<parameter_description> a #GvdbTable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gvdb_table_walk">
<description>
Looks up the list at @key and iterate over the items in it.

First, @open_func is called to signal that we are starting to iterate over
the list.  Then the list is iterated.  When all items in the list have been
iterated over, the @close_func is called.

When iterating, if a given item in the list is a value then @value_func is
called.

If a given item in the list is itself a list then @open_func is called.  If
that function returns %TRUE then the walk begins iterating the items in the
sublist, until there are no more items, at which point a matching
@close_func call is made.  If @open_func returns %FALSE then no iteration of
the sublist occurs and no corresponding @close_func call is made.

</description>
<parameters>
<parameter name="table">
<parameter_description> a #GvdbTable
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key corresponding to a list
</parameter_description>
</parameter>
<parameter name="open_func">
<parameter_description> the #GvdbWalkOpenFunc
</parameter_description>
</parameter>
<parameter name="value_func">
<parameter_description> the #GvdbWalkValueFunc
</parameter_description>
</parameter>
<parameter name="close_func">
<parameter_description> the #GvdbWalkCloseFunc
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to pass to the callbacks
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="mime_info_cache_reload">
<description>
Reload the mime information for the @dir.

</description>
<parameters>
<parameter name="dir">
<parameter_description> directory path which needs reloading.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

</root>
