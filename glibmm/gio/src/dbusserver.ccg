// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* Copyright (C) 2010 The giomm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gio/gio.h>
#include <giomm/dbusconnection.h>
#include <giomm/dbusauthobserver.h>

namespace Gio
{

namespace DBus
{

//TODO: Uncomment when this bug is fixed: https://bugzilla.gnome.org/show_bug.cgi?id=639478 .
/*
Server::Server(const std::string& address,
  const std::string& guid,
  const Glib::RefPtr<AuthObserver>& observer,
  const Glib::RefPtr<Cancellable>& cancellable,
  ServerFlags flags)
  : _CONSTRUCT("address",
    (address.empty() ? static_cast<char*>(0) : address.c_str()),
    "flags", static_cast<GDBusServerFlags>(flags),
    "guid", (guid.empty() ? static_cast<char*>(0) : guid.c_str()),
    "authentication-observer", Glib::unwrap(observer))
{
  init(cancellable);
}

Server::Server(const std::string& address,
  const std::string& guid,
  const Glib::RefPtr<Cancellable>& cancellable,
  ServerFlags flags)
  : _CONSTRUCT("address",
    (address.empty() ? static_cast<char*>(0) : address.c_str()),
    "flags", static_cast<GDBusServerFlags>(flags),
    "guid", (guid.empty() ? static_cast<char*>(0) : guid.c_str()),
    "authentication-observer", static_cast<GDBusAuthObserver*>(0))
{
  init(cancellable);
}

Server::Server(const std::string& address,
  const std::string& guid,
  const Glib::RefPtr<AuthObserver>& observer,
  ServerFlags flags)
  : _CONSTRUCT("address",
    (address.empty() ? static_cast<char*>(0) : address.c_str()),
    "flags", static_cast<GDBusServerFlags>(flags),
    "guid", (guid.empty() ? static_cast<char*>(0) : guid.c_str()),
    "authentication-observer", Glib::unwrap(observer))
{
  init();
}

Server::Server(const std::string& address,
  const std::string& guid,
  ServerFlags flags)
  : _CONSTRUCT("address",
    (address.empty() ? static_cast<char*>(0) : address.c_str()),
    "flags", static_cast<GDBusServerFlags>(flags),
    "guid", (guid.empty() ? static_cast<char*>(0) : guid.c_str()),
    "authentication-observer", static_cast<GDBusAuthObserver*>(0))
{
  init();
}
*/

Glib::RefPtr<Server> Server::create_sync(const std::string& address,
  const std::string& guid,
  const Glib::RefPtr<AuthObserver>& observer,
  const Glib::RefPtr<Cancellable>& cancellable,
  ServerFlags flags)
{
  //TODO: Use the constructor instead of the code underneath when
  //g_dbus_server_new_sync() does not do more than call g_initable_new().
  //https://bugzilla.gnome.org/show_bug.cgi?id=639478
  //return Glib::RefPtr<Server>(new Server(address, guid, observer,
    //cancellable, flags));

  GError* gerror = 0;

  Glib::RefPtr<Server> result =
    Glib::wrap(g_dbus_server_new_sync(address.c_str(),
                                      static_cast<GDBusServerFlags>(flags),
                                      guid.c_str(),
                                      Glib::unwrap(observer),
                                      Glib::unwrap(cancellable),
                                      &gerror));

  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return result;
}

Glib::RefPtr<Server> Server::create_sync(const std::string& address,
  const std::string& guid,
  const Glib::RefPtr<Cancellable>& cancellable,
  ServerFlags flags)
{
  //TODO: Use the constructor instead of the code underneath when
  //g_dbus_server_new_sync() does not do more than call g_initable_new().
  //https://bugzilla.gnome.org/show_bug.cgi?id=639478
  //return Glib::RefPtr<Server>(new Server(address, guid,
    //cancellable, flags));

  GError* gerror = 0;

  Glib::RefPtr<Server> result =
    Glib::wrap(g_dbus_server_new_sync(address.c_str(),
                                      static_cast<GDBusServerFlags>(flags),
                                      guid.c_str(), 0,
                                      Glib::unwrap(cancellable),
                                      &gerror));

  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return result;
}

Glib::RefPtr<Server> Server::create_sync(const std::string& address,
  const std::string& guid,
  const Glib::RefPtr<AuthObserver>& observer,
  ServerFlags flags)
{
  //TODO: Use the constructor instead of the code underneath when
  //g_dbus_server_new_sync() does not do more than call g_initable_new().
  //https://bugzilla.gnome.org/show_bug.cgi?id=639478
  //return Glib::RefPtr<Server>(new Server(address, guid, observer,
    //flags));

  GError* gerror = 0;

  Glib::RefPtr<Server> result =
    Glib::wrap(g_dbus_server_new_sync(address.c_str(),
                                      static_cast<GDBusServerFlags>(flags),
                                      guid.c_str(),
                                      Glib::unwrap(observer),
                                      0,
                                      &gerror));

  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return result;
}

Glib::RefPtr<Server> Server::create_sync(const std::string& address,
  const std::string& guid,
  ServerFlags flags)
{
  //TODO: Use the constructor instead of the code underneath when
  //g_dbus_server_new_sync() does not do more than call g_initable_new().
  //https://bugzilla.gnome.org/show_bug.cgi?id=639478
  //return Glib::RefPtr<Server>(new Server(address, guid, flags));

  GError* gerror = 0;

  Glib::RefPtr<Server> result =
    Glib::wrap(g_dbus_server_new_sync(address.c_str(),
                                      static_cast<GDBusServerFlags>(flags),
                                      guid.c_str(), 0, 0, &gerror));

  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return result;
}

} // namespace DBus
} // namespace Gio
