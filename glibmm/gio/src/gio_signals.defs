;; From GAsyncResult

;; From GActionGroup

(define-signal action-added
  (of-object "GActionGroup")
  (return-type "void")
  (when "last")
  (parameters
    '("const-gchar*" "p0")
  )
)

(define-signal action-removed
  (of-object "GActionGroup")
  (return-type "void")
  (when "last")
  (parameters
    '("const-gchar*" "p0")
  )
)

(define-signal action-enabled-changed
  (of-object "GActionGroup")
  (return-type "void")
  (when "last")
  (parameters
    '("const-gchar*" "p0")
    '("gboolean" "p1")
  )
)

(define-signal action-state-changed
  (of-object "GActionGroup")
  (return-type "void")
  (when "last")
  (parameters
    '("const-gchar*" "p0")
    '("GVariant*" "p1")
  )
)

;; From GApplication

(define-signal startup
  (of-object "GApplication")
  (return-type "void")
  (when "last")
)

(define-signal activate
  (of-object "GApplication")
  (return-type "void")
  (when "last")
)

(define-signal open
  (of-object "GApplication")
  (return-type "void")
  (when "last")
  (parameters
    '("gpointer" "p0")
    '("gint" "p1")
    '("const-gchar*" "p2")
  )
)

(define-signal command-line
  (of-object "GApplication")
  (return-type "gint")
  (when "last")
  (parameters
    '("GApplicationCommandLine*" "p0")
  )
)

(define-property application-id
  (of-object "GApplication")
  (prop-type "GParamString")
  (docs "The unique identifier for the application")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property flags
  (of-object "GApplication")
  (prop-type "GParamFlags")
  (docs "Flags specifying the behaviour of the application")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-registered
  (of-object "GApplication")
  (prop-type "GParamBoolean")
  (docs "If g_application_register() has been called")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property is-remote
  (of-object "GApplication")
  (prop-type "GParamBoolean")
  (docs "If this application instance is remote")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property inactivity-timeout
  (of-object "GApplication")
  (prop-type "GParamUInt")
  (docs "Iime (ms) to stay alive after becoming idle")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property action-group
  (of-object "GApplication")
  (prop-type "GParamObject")
  (docs "The group of actions that the application exports")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

;; From GCancellable

(define-signal cancelled
  (of-object "GCancellable")
  (return-type "void")
  (when "last")
)

;; From GBufferedInputStream

(define-property base-stream
  (of-object "GBufferedInputStream")
  (prop-type "GParamObject")
  (docs "The underlying base stream on which the io ops will be done.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property close-base-stream
  (of-object "GBufferedInputStream")
  (prop-type "GParamBoolean")
  (docs "If the base stream should be closed when the filter stream is closed.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property buffer-size
  (of-object "GBufferedInputStream")
  (prop-type "GParamUInt")
  (docs "The size of the backend buffer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GBufferedOutputStream

(define-property base-stream
  (of-object "GBufferedOutputStream")
  (prop-type "GParamObject")
  (docs "The underlying base stream on which the io ops will be done.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property close-base-stream
  (of-object "GBufferedOutputStream")
  (prop-type "GParamBoolean")
  (docs "If the base stream should be closed when the filter stream is closed.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property buffer-size
  (of-object "GBufferedOutputStream")
  (prop-type "GParamUInt")
  (docs "The size of the backend buffer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property auto-grow
  (of-object "GBufferedOutputStream")
  (prop-type "GParamBoolean")
  (docs "Whether the buffer should automatically grow")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GDataInputStream

(define-property base-stream
  (of-object "GDataInputStream")
  (prop-type "GParamObject")
  (docs "The underlying base stream on which the io ops will be done.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property close-base-stream
  (of-object "GDataInputStream")
  (prop-type "GParamBoolean")
  (docs "If the base stream should be closed when the filter stream is closed.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property buffer-size
  (of-object "GDataInputStream")
  (prop-type "GParamUInt")
  (docs "The size of the backend buffer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property byte-order
  (of-object "GDataInputStream")
  (prop-type "GParamEnum")
  (docs "The byte order")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property newline-type
  (of-object "GDataInputStream")
  (prop-type "GParamEnum")
  (docs "The accepted types of line ending")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GDataOutputStream

(define-property base-stream
  (of-object "GDataOutputStream")
  (prop-type "GParamObject")
  (docs "The underlying base stream on which the io ops will be done.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property close-base-stream
  (of-object "GDataOutputStream")
  (prop-type "GParamBoolean")
  (docs "If the base stream should be closed when the filter stream is closed.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property byte-order
  (of-object "GDataOutputStream")
  (prop-type "GParamEnum")
  (docs "The byte order")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GDrive

(define-signal changed
  (of-object "GDrive")
  (return-type "void")
  (when "last")
)

(define-signal disconnected
  (of-object "GDrive")
  (return-type "void")
  (when "last")
)

(define-signal eject-button
  (of-object "GDrive")
  (return-type "void")
  (when "last")
)

(define-signal stop-button
  (of-object "GDrive")
  (return-type "void")
  (when "last")
)

;; From GFile

;; From GFileEnumerator

(define-property container
  (of-object "GFileEnumerator")
  (prop-type "GParamObject")
  (docs "The container that is being enumerated")
  (readable #f)
  (writable #t)
  (construct-only #t)
)

;; From GFileInfo

;; From GFileIcon

(define-property file
  (of-object "GFileIcon")
  (prop-type "GParamObject")
  (docs "The file containing the icon")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

;; From GFileMonitor

(define-signal changed
  (of-object "GFileMonitor")
  (return-type "void")
  (when "last")
  (parameters
    '("GFile*" "p0")
    '("GFile*" "p1")
    '("GFileMonitorEvent" "p2")
  )
)

(define-property rate-limit
  (of-object "GFileMonitor")
  (prop-type "GParamInt")
  (docs "The limit of the monitor to watch for changes, in milliseconds")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cancelled
  (of-object "GFileMonitor")
  (prop-type "GParamBoolean")
  (docs "Whether the monitor has been cancelled")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From GFilenameCompleter

(define-signal got-completion-data
  (of-object "GFilenameCompleter")
  (return-type "void")
  (when "last")
)

;; From GFileInputStream

;; From GFileOutputStream

;; From GFilterInputStream

(define-property base-stream
  (of-object "GFilterInputStream")
  (prop-type "GParamObject")
  (docs "The underlying base stream on which the io ops will be done.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property close-base-stream
  (of-object "GFilterInputStream")
  (prop-type "GParamBoolean")
  (docs "If the base stream should be closed when the filter stream is closed.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

;; From GFilterOutputStream

(define-property base-stream
  (of-object "GFilterOutputStream")
  (prop-type "GParamObject")
  (docs "The underlying base stream on which the io ops will be done.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property close-base-stream
  (of-object "GFilterOutputStream")
  (prop-type "GParamBoolean")
  (docs "If the base stream should be closed when the filter stream is closed.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

;; From GUnixCredentialsMessage

(define-property credentials
  (of-object "GUnixCredentialsMessage")
  (prop-type "GParamObject")
  (docs "The credentials stored in the message")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

;; From GUnixFDMessage

(define-property fd-list
  (of-object "GUnixFDMessage")
  (prop-type "GParamObject")
  (docs "The GUnixFDList object to send with the message")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

;; From GUnixInputStream

(define-property fd
  (of-object "GUnixInputStream")
  (prop-type "GParamInt")
  (docs "The file descriptor to read from")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property close-fd
  (of-object "GUnixInputStream")
  (prop-type "GParamBoolean")
  (docs "Whether to close the file descriptor when the stream is closed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GUnixOutputStream

(define-property fd
  (of-object "GUnixOutputStream")
  (prop-type "GParamInt")
  (docs "The file descriptor to write to")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property close-fd
  (of-object "GUnixOutputStream")
  (prop-type "GParamBoolean")
  (docs "Whether to close the file descriptor when the stream is closed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GUnixSocketAddress

(define-property family
  (of-object "GUnixSocketAddress")
  (prop-type "GParamEnum")
  (docs "The family of the socket address")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property path
  (of-object "GUnixSocketAddress")
  (prop-type "GParamString")
  (docs "UNIX socket path")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property path-as-array
  (of-object "GUnixSocketAddress")
  (prop-type "GParamBoxed")
  (docs "UNIX socket path, as byte array")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property abstract
  (of-object "GUnixSocketAddress")
  (prop-type "GParamBoolean")
  (docs "Whether or not this is an abstract address")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property address-type
  (of-object "GUnixSocketAddress")
  (prop-type "GParamEnum")
  (docs "The type of UNIX socket address")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

;; From GInputStream

;; From GLoadableIcon

;; From GMemoryInputStream

;; From GMemoryOutputStream

(define-property data
  (of-object "GMemoryOutputStream")
  (prop-type "GParamPointer")
  (docs "Pointer to buffer where data will be written.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property size
  (of-object "GMemoryOutputStream")
  (prop-type "GParamULong")
  (docs "Current size of the data buffer.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property data-size
  (of-object "GMemoryOutputStream")
  (prop-type "GParamULong")
  (docs "Size of data written to the buffer.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property realloc-function
  (of-object "GMemoryOutputStream")
  (prop-type "GParamPointer")
  (docs "Function with realloc semantics called to enlarge the buffer.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property destroy-function
  (of-object "GMemoryOutputStream")
  (prop-type "GParamPointer")
  (docs "Function called with the buffer as argument when the stream is destroyed.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

;; From GMount

(define-signal changed
  (of-object "GMount")
  (return-type "void")
  (when "last")
)

(define-signal unmounted
  (of-object "GMount")
  (return-type "void")
  (when "last")
)

(define-signal pre-unmount
  (of-object "GMount")
  (return-type "void")
  (when "last")
)

;; From GMountOperation

(define-signal ask-password
  (of-object "GMountOperation")
  (return-type "void")
  (when "last")
  (parameters
    '("const-gchar*" "p0")
    '("const-gchar*" "p1")
    '("const-gchar*" "p2")
    '("GAskPasswordFlags" "p3")
  )
)

;; p1 is actually a gchar**,
;; but that is equivalent (by typedef) to gchar**,
;; and the declaration in gmountoperation.h adds a const.
;; murrayc
(define-signal ask-question
  (of-object "GMountOperation")
  (return-type "void")
  (when "last")
  (parameters
    '("const-gchar*" "p0")
    '("const-gchar**" "p1")
  )
)

(define-signal reply
  (of-object "GMountOperation")
  (return-type "void")
  (when "last")
  (parameters
    '("GMountOperationResult" "p0")
  )
)

(define-signal aborted
  (of-object "GMountOperation")
  (return-type "void")
  (when "last")
)

(define-signal show-processes
  (of-object "GMountOperation")
  (return-type "void")
  (when "last")
  (parameters
    '("const-gchar*" "p0")
    '("GArray*" "p1")
    '("GStrv*" "p2")
  )
)

(define-property username
  (of-object "GMountOperation")
  (prop-type "GParamString")
  (docs "The user name")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property password
  (of-object "GMountOperation")
  (prop-type "GParamString")
  (docs "The password")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property anonymous
  (of-object "GMountOperation")
  (prop-type "GParamBoolean")
  (docs "Whether to use an anonymous user")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property domain
  (of-object "GMountOperation")
  (prop-type "GParamString")
  (docs "The domain of the mount operation")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property password-save
  (of-object "GMountOperation")
  (prop-type "GParamEnum")
  (docs "How passwords should be saved")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property choice
  (of-object "GMountOperation")
  (prop-type "GParamInt")
  (docs "The users choice")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GProxy

;; From GProxyAddress

(define-property family
  (of-object "GProxyAddress")
  (prop-type "GParamEnum")
  (docs "The family of the socket address")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property address
  (of-object "GProxyAddress")
  (prop-type "GParamObject")
  (docs "The address")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property port
  (of-object "GProxyAddress")
  (prop-type "GParamUInt")
  (docs "The port")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property protocol
  (of-object "GProxyAddress")
  (prop-type "GParamString")
  (docs "The proxy protocol")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property destination-hostname
  (of-object "GProxyAddress")
  (prop-type "GParamString")
  (docs "The proxy destination hostname")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property destination-port
  (of-object "GProxyAddress")
  (prop-type "GParamUInt")
  (docs "The proxy destination port")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property username
  (of-object "GProxyAddress")
  (prop-type "GParamString")
  (docs "The proxy username")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property password
  (of-object "GProxyAddress")
  (prop-type "GParamString")
  (docs "The proxy password")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

;; From GProxyAddressEnumerator

(define-property uri
  (of-object "GProxyAddressEnumerator")
  (prop-type "GParamString")
  (docs "The destination URI, use none:// for generic socket")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property connectable
  (of-object "GProxyAddressEnumerator")
  (prop-type "GParamObject")
  (docs "The connectable being enumerated.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

;; From GProxyResolver

;; From GSeekable

;; From GSettings

(define-signal changed
  (of-object "GSettings")
  (return-type "void")
  (when "last")
  (parameters
    '("const-gchar*" "p0")
  )
)

(define-signal change-event
  (of-object "GSettings")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("gpointer" "p0")
    '("gint" "p1")
  )
)

(define-signal writable-changed
  (of-object "GSettings")
  (return-type "void")
  (when "last")
  (parameters
    '("const-gchar*" "p0")
  )
)

(define-signal writable-change-event
  (of-object "GSettings")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("guint" "p0")
  )
)

(define-property schema
  (of-object "GSettings")
  (prop-type "GParamString")
  (docs "The name of the schema for this settings object")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property backend
  (of-object "GSettings")
  (prop-type "GParamObject")
  (docs "The GSettingsBackend for this settings object")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property path
  (of-object "GSettings")
  (prop-type "GParamString")
  (docs "The path within the backend where the settings are")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property has-unapplied
  (of-object "GSettings")
  (prop-type "GParamBoolean")
  (docs "TRUE if there are outstanding changes to apply()")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property delay-apply
  (of-object "GSettings")
  (prop-type "GParamBoolean")
  (docs "Whether this settings object is in 'delay-apply' mode")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From GSettingsBackend

;; From GSimpleAsyncResult

;; From GThemedIcon

(define-property name
  (of-object "GThemedIcon")
  (prop-type "GParamString")
  (docs "The name of the icon")
  (readable #f)
  (writable #t)
  (construct-only #t)
)

(define-property names
  (of-object "GThemedIcon")
  (prop-type "GParamBoxed")
  (docs "An array containing the icon names")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property use-default-fallbacks
  (of-object "GThemedIcon")
  (prop-type "GParamBoolean")
  (docs "Whether to use default fallbacks found by shortening the name at '-' characters. Ignores names after the first if multiple names are given.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

;; From GVolume

(define-signal changed
  (of-object "GVolume")
  (return-type "void")
  (when "last")
)

(define-signal removed
  (of-object "GVolume")
  (return-type "void")
  (when "last")
)

;; From GVolumeMonitor

(define-signal volume-added
  (of-object "GVolumeMonitor")
  (return-type "void")
  (when "last")
  (parameters
    '("GVolume*" "p0")
  )
)

(define-signal volume-removed
  (of-object "GVolumeMonitor")
  (return-type "void")
  (when "last")
  (parameters
    '("GVolume*" "p0")
  )
)

(define-signal volume-changed
  (of-object "GVolumeMonitor")
  (return-type "void")
  (when "last")
  (parameters
    '("GVolume*" "p0")
  )
)

(define-signal mount-added
  (of-object "GVolumeMonitor")
  (return-type "void")
  (when "last")
  (parameters
    '("GMount*" "p0")
  )
)

(define-signal mount-removed
  (of-object "GVolumeMonitor")
  (return-type "void")
  (when "last")
  (parameters
    '("GMount*" "p0")
  )
)

(define-signal mount-pre-unmount
  (of-object "GVolumeMonitor")
  (return-type "void")
  (when "last")
  (parameters
    '("GMount*" "p0")
  )
)

(define-signal mount-changed
  (of-object "GVolumeMonitor")
  (return-type "void")
  (when "last")
  (parameters
    '("GMount*" "p0")
  )
)

(define-signal drive-connected
  (of-object "GVolumeMonitor")
  (return-type "void")
  (when "last")
  (parameters
    '("GDrive*" "p0")
  )
)

(define-signal drive-disconnected
  (of-object "GVolumeMonitor")
  (return-type "void")
  (when "last")
  (parameters
    '("GDrive*" "p0")
  )
)

(define-signal drive-changed
  (of-object "GVolumeMonitor")
  (return-type "void")
  (when "last")
  (parameters
    '("GDrive*" "p0")
  )
)

(define-signal drive-eject-button
  (of-object "GVolumeMonitor")
  (return-type "void")
  (when "last")
  (parameters
    '("GDrive*" "p0")
  )
)

(define-signal drive-stop-button
  (of-object "GVolumeMonitor")
  (return-type "void")
  (when "last")
  (parameters
    '("GDrive*" "p0")
  )
)

;; From GInetAddress

(define-property family
  (of-object "GInetAddress")
  (prop-type "GParamEnum")
  (docs "The address family (IPv4 or IPv6)")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property bytes
  (of-object "GInetAddress")
  (prop-type "GParamPointer")
  (docs "The raw address data")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property is-any
  (of-object "GInetAddress")
  (prop-type "GParamBoolean")
  (docs "Whether this is the 'any' address for its family")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property is-loopback
  (of-object "GInetAddress")
  (prop-type "GParamBoolean")
  (docs "Whether this is the loopback address for its family")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property is-link-local
  (of-object "GInetAddress")
  (prop-type "GParamBoolean")
  (docs "Whether this is a link-local address")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property is-site-local
  (of-object "GInetAddress")
  (prop-type "GParamBoolean")
  (docs "Whether this is a site-local address")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property is-multicast
  (of-object "GInetAddress")
  (prop-type "GParamBoolean")
  (docs "Whether this is a multicast address")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property is-mc-global
  (of-object "GInetAddress")
  (prop-type "GParamBoolean")
  (docs "Whether this is a global multicast address")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property is-mc-link-local
  (of-object "GInetAddress")
  (prop-type "GParamBoolean")
  (docs "Whether this is a link-local multicast address")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property is-mc-node-local
  (of-object "GInetAddress")
  (prop-type "GParamBoolean")
  (docs "Whether this is a node-local multicast address")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property is-mc-org-local
  (of-object "GInetAddress")
  (prop-type "GParamBoolean")
  (docs "Whether this is an organization-local multicast address")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property is-mc-site-local
  (of-object "GInetAddress")
  (prop-type "GParamBoolean")
  (docs "Whether this is a site-local multicast address")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From GInetSocketAddress

(define-property family
  (of-object "GInetSocketAddress")
  (prop-type "GParamEnum")
  (docs "The family of the socket address")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property address
  (of-object "GInetSocketAddress")
  (prop-type "GParamObject")
  (docs "The address")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property port
  (of-object "GInetSocketAddress")
  (prop-type "GParamUInt")
  (docs "The port")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

;; From GSocketAddress

(define-property family
  (of-object "GSocketAddress")
  (prop-type "GParamEnum")
  (docs "The family of the socket address")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From GSocketAddressEnumerator

;; From GSocketConnectable

;; From GSrvTarget

;; From GResolver

(define-signal reload
  (of-object "GResolver")
  (return-type "void")
  (when "last")
)

;; From GNetworkAddress

(define-property hostname
  (of-object "GNetworkAddress")
  (prop-type "GParamString")
  (docs "Hostname to resolve")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property port
  (of-object "GNetworkAddress")
  (prop-type "GParamUInt")
  (docs "Network port")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property scheme
  (of-object "GNetworkAddress")
  (prop-type "GParamString")
  (docs "URI Scheme")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

;; From GNetworkService

(define-property service
  (of-object "GNetworkService")
  (prop-type "GParamString")
  (docs "Service name, eg 'ldap'")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property protocol
  (of-object "GNetworkService")
  (prop-type "GParamString")
  (docs "Network protocol, eg 'tcp'")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property domain
  (of-object "GNetworkService")
  (prop-type "GParamString")
  (docs "Network domain, eg, 'example.com'")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property scheme
  (of-object "GNetworkService")
  (prop-type "GParamString")
  (docs "Network scheme (default is to use service)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GSettings

(define-signal changed
  (of-object "GSettings")
  (return-type "void")
  (when "last")
  (parameters
    '("const-gchar*" "p0")
  )
)

(define-signal change-event
  (of-object "GSettings")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("gpointer" "p0")
    '("gint" "p1")
  )
)

(define-signal writable-changed
  (of-object "GSettings")
  (return-type "void")
  (when "last")
  (parameters
    '("const-gchar*" "p0")
  )
)

(define-signal writable-change-event
  (of-object "GSettings")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("guint" "p0")
  )
)

(define-property schema
  (of-object "GSettings")
  (prop-type "GParamString")
  (docs "The name of the schema for this settings object")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property backend
  (of-object "GSettings")
  (prop-type "GParamObject")
  (docs "The GSettingsBackend for this settings object")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property path
  (of-object "GSettings")
  (prop-type "GParamString")
  (docs "The path within the backend where the settings are")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property has-unapplied
  (of-object "GSettings")
  (prop-type "GParamBoolean")
  (docs "TRUE if there are outstanding changes to apply()")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property delay-apply
  (of-object "GSettings")
  (prop-type "GParamBoolean")
  (docs "Whether this settings object is in 'delay-apply' mode")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From GSocket

(define-property family
  (of-object "GSocket")
  (prop-type "GParamEnum")
  (docs "The sockets address family")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property type
  (of-object "GSocket")
  (prop-type "GParamEnum")
  (docs "The sockets type")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property protocol
  (of-object "GSocket")
  (prop-type "GParamEnum")
  (docs "The id of the protocol to use, or -1 for unknown")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property fd
  (of-object "GSocket")
  (prop-type "GParamInt")
  (docs "The sockets file descriptor")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property blocking
  (of-object "GSocket")
  (prop-type "GParamBoolean")
  (docs "Whether or not I/O on this socket is blocking")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property listen-backlog
  (of-object "GSocket")
  (prop-type "GParamInt")
  (docs "Outstanding connections in the listen queue")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property keepalive
  (of-object "GSocket")
  (prop-type "GParamBoolean")
  (docs "Keep connection alive by sending periodic pings")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property local-address
  (of-object "GSocket")
  (prop-type "GParamObject")
  (docs "The local address the socket is bound to")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property remote-address
  (of-object "GSocket")
  (prop-type "GParamObject")
  (docs "The remote address the socket is connected to")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property timeout
  (of-object "GSocket")
  (prop-type "GParamUInt")
  (docs "The timeout in seconds on socket I/O")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GSocketClient

(define-property family
  (of-object "GSocketClient")
  (prop-type "GParamEnum")
  (docs "The sockets address family to use for socket construction")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property type
  (of-object "GSocketClient")
  (prop-type "GParamEnum")
  (docs "The sockets type to use for socket construction")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property protocol
  (of-object "GSocketClient")
  (prop-type "GParamEnum")
  (docs "The protocol to use for socket construction, or 0 for default")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property local-address
  (of-object "GSocketClient")
  (prop-type "GParamObject")
  (docs "The local address constructed sockets will be bound to")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property timeout
  (of-object "GSocketClient")
  (prop-type "GParamUInt")
  (docs "The I/O timeout for sockets, or 0 for none")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property enable-proxy
  (of-object "GSocketClient")
  (prop-type "GParamBoolean")
  (docs "Enable proxy support")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tls
  (of-object "GSocketClient")
  (prop-type "GParamBoolean")
  (docs "Whether to create TLS connections")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tls-validation-flags
  (of-object "GSocketClient")
  (prop-type "GParamFlags")
  (docs "TLS validation flags to use")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GSocketConnection

(define-property input-stream
  (of-object "GSocketConnection")
  (prop-type "GParamObject")
  (docs "The GInputStream to read from")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property output-stream
  (of-object "GSocketConnection")
  (prop-type "GParamObject")
  (docs "The GOutputStream to write to")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property closed
  (of-object "GSocketConnection")
  (prop-type "GParamBoolean")
  (docs "Is the stream closed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property socket
  (of-object "GSocketConnection")
  (prop-type "GParamObject")
  (docs "The underlying GSocket")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

;; From GTcpConnection

(define-property input-stream
  (of-object "GTcpConnection")
  (prop-type "GParamObject")
  (docs "The GInputStream to read from")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property output-stream
  (of-object "GTcpConnection")
  (prop-type "GParamObject")
  (docs "The GOutputStream to write to")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property closed
  (of-object "GTcpConnection")
  (prop-type "GParamBoolean")
  (docs "Is the stream closed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property socket
  (of-object "GTcpConnection")
  (prop-type "GParamObject")
  (docs "The underlying GSocket")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property graceful-disconnect
  (of-object "GTcpConnection")
  (prop-type "GParamBoolean")
  (docs "Whether or not close does a graceful disconnect")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GUnixConnection

(define-property input-stream
  (of-object "GUnixConnection")
  (prop-type "GParamObject")
  (docs "The GInputStream to read from")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property output-stream
  (of-object "GUnixConnection")
  (prop-type "GParamObject")
  (docs "The GOutputStream to write to")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property closed
  (of-object "GUnixConnection")
  (prop-type "GParamBoolean")
  (docs "Is the stream closed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property socket
  (of-object "GUnixConnection")
  (prop-type "GParamObject")
  (docs "The underlying GSocket")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

;; From GSocketListener

(define-property listen-backlog
  (of-object "GSocketListener")
  (prop-type "GParamInt")
  (docs "outstanding connections in the listen queue")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GSocketService

(define-signal incoming
  (of-object "GSocketService")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GSocketConnection*" "p0")
    '("GObject*" "p1")
  )
)

(define-property listen-backlog
  (of-object "GSocketService")
  (prop-type "GParamInt")
  (docs "outstanding connections in the listen queue")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GThreadedSocketService

(define-signal run
  (of-object "GThreadedSocketService")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GSocketConnection*" "p0")
    '("GObject*" "p1")
  )
)

(define-property listen-backlog
  (of-object "GThreadedSocketService")
  (prop-type "GParamInt")
  (docs "outstanding connections in the listen queue")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property max-threads
  (of-object "GThreadedSocketService")
  (prop-type "GParamInt")
  (docs "The max number of threads handling clients for this service")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

;; From GDBusAuthObserver

(define-signal authorize-authenticated-peer
  (of-object "GDBusAuthObserver")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GIOStream*" "p0")
    '("GCredentials*" "p1")
  )
)

;; From GDBusConnection

(define-signal closed
  (of-object "GDBusConnection")
  (return-type "void")
  (when "last")
  (parameters
    '("gboolean" "p0")
    '("GError*" "p1")
  )
)

(define-property stream
  (of-object "GDBusConnection")
  (prop-type "GParamObject")
  (docs "The underlying streams used for I/O")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property address
  (of-object "GDBusConnection")
  (prop-type "GParamString")
  (docs "D-Bus address specifying potential socket endpoints")
  (readable #f)
  (writable #t)
  (construct-only #t)
)

(define-property flags
  (of-object "GDBusConnection")
  (prop-type "GParamFlags")
  (docs "Flags")
  (readable #f)
  (writable #t)
  (construct-only #t)
)

(define-property guid
  (of-object "GDBusConnection")
  (prop-type "GParamString")
  (docs "GUID of the server peer")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property unique-name
  (of-object "GDBusConnection")
  (prop-type "GParamString")
  (docs "Unique name of bus connection")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property closed
  (of-object "GDBusConnection")
  (prop-type "GParamBoolean")
  (docs "Whether the connection is closed")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property exit-on-close
  (of-object "GDBusConnection")
  (prop-type "GParamBoolean")
  (docs "Whether the process is terminated when the connection is closed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property capabilities
  (of-object "GDBusConnection")
  (prop-type "GParamFlags")
  (docs "Capabilities")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property authentication-observer
  (of-object "GDBusConnection")
  (prop-type "GParamObject")
  (docs "Object used to assist in the authentication process")
  (readable #f)
  (writable #t)
  (construct-only #t)
)

;; From GDBusError

;; From GDBusAnnotationInfo

;; From GDBusArgInfo

;; From GDBusMethodInfo

;; From GDBusSignalInfo

;; From GDBusPropertyInfo

;; From GDBusInterfaceInfo

;; From GDBusNodeInfo

;; From GDBusMessage

(define-property locked
  (of-object "GDBusMessage")
  (prop-type "GParamBoolean")
  (docs "Whether the message is locked")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

+;; From GDBusMethodInvocation

;; From GDBusProxy

;; p1 is actually a GStrv,
;; but that is equivalent (by typedef) to gchar**,
;; and the declaration in gdbusproxy.h add consts.
;; yannickg
(define-signal g-properties-changed
  (of-object "GDBusProxy")
  (return-type "void")
  (when "last")
  (parameters
    '("GVariant*" "p0")
    '("const-gchar*const*" "p1")
  )
)

(define-signal g-signal
  (of-object "GDBusProxy")
  (return-type "void")
  (when "last")
  (parameters
    '("const-gchar*" "p0")
    '("const-gchar*" "p1")
    '("GVariant*" "p2")
  )
)

(define-property g-connection
  (of-object "GDBusProxy")
  (prop-type "GParamObject")
  (docs "The connection the proxy is for")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property g-bus-type
  (of-object "GDBusProxy")
  (prop-type "GParamEnum")
  (docs "The bus to connect to, if any")
  (readable #f)
  (writable #t)
  (construct-only #t)
)

(define-property g-name
  (of-object "GDBusProxy")
  (prop-type "GParamString")
  (docs "The well-known or unique name that the proxy is for")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property g-name-owner
  (of-object "GDBusProxy")
  (prop-type "GParamString")
  (docs "The unique name for the owner")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property g-flags
  (of-object "GDBusProxy")
  (prop-type "GParamFlags")
  (docs "Flags for the proxy")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property g-object-path
  (of-object "GDBusProxy")
  (prop-type "GParamString")
  (docs "The object path the proxy is for")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property g-interface-name
  (of-object "GDBusProxy")
  (prop-type "GParamString")
  (docs "The D-Bus interface name the proxy is for")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property g-default-timeout
  (of-object "GDBusProxy")
  (prop-type "GParamInt")
  (docs "Timeout for remote method invocation")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property g-interface-info
  (of-object "GDBusProxy")
  (prop-type "GParamBoxed")
  (docs "Interface Information")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GDBusServer

(define-signal new-connection
  (of-object "GDBusServer")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GDBusConnection*" "p0")
  )
)

(define-property address
  (of-object "GDBusServer")
  (prop-type "GParamString")
  (docs "The address to listen on")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property client-address
  (of-object "GDBusServer")
  (prop-type "GParamString")
  (docs "The address clients can use")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property flags
  (of-object "GDBusServer")
  (prop-type "GParamFlags")
  (docs "Flags for the server")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property guid
  (of-object "GDBusServer")
  (prop-type "GParamString")
  (docs "The guid of the server")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property active
  (of-object "GDBusServer")
  (prop-type "GParamBoolean")
  (docs "Whether the server is currently active")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property authentication-observer
  (of-object "GDBusServer")
  (prop-type "GParamObject")
  (docs "Object used to assist in the authentication process")
  (readable #t)
  (writable #t)
  (construct-only #t)
)


