// Generated by gtkmmproc -- DO NOT MODIFY!

#include <gdkmm/gl/drawable.h>
#include <gdkmm/gl/private/drawable_p.h>

// -*- C++ -*-
/* gdkglextmm - C++ Wrapper for GdkGLExt
 * Copyright (C) 2002-2003  Naofumi Yasufuku
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
 */

#include <gdk/gdkgldrawable.h>
#include <gdk/gdkglshapes.h>

namespace Gdk
{
  namespace GL
  {

  } // namespace GL
} // namespace Gdk


namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gdk::GL::Drawable> wrap(GdkGLDrawable* object, bool take_copy)
{
  return Glib::RefPtr<Gdk::GL::Drawable>( dynamic_cast<Gdk::GL::Drawable*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} // namespace Glib


namespace Gdk
{

namespace GL
{


/* The *_Class implementation: */

const Glib::Interface_Class& Drawable_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Interface_Class has to know the interface init function
    // in order to add interfaces to implementing types.
    class_init_func_ = &Drawable_Class::iface_init_function;

    // We can not derive from another interface, and it is not necessary anyway.
    gtype_ = gdk_gl_drawable_get_type();
  }

  return *this;
}

void Drawable_Class::iface_init_function(void* g_iface, void*)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_iface);

  //This is just to avoid an "unused variable" warning when there are no vfuncs or signal handlers to connect.
  //This is a temporary fix until I find out why I can not seem to derive a GtkFileChooser interface. murrayc
  g_assert(klass != 0); 

}


Glib::ObjectBase* Drawable_Class::wrap_new(GObject* object)
{
  return new Drawable((GdkGLDrawable*)(object));
}


/* The implementation: */

Drawable::Drawable()
:
  Glib::Interface(drawable_class_.init())
{}

Drawable::Drawable(GdkGLDrawable* castitem)
:
  Glib::Interface((GObject*)(castitem))
{}

Drawable::~Drawable()
{}

// static
void Drawable::add_interface(GType gtype_implementer)
{
  drawable_class_.init().add_interface(gtype_implementer);
}

Drawable::CppClassType Drawable::drawable_class_; // initialize static member

GType Drawable::get_type()
{
  return drawable_class_.init().get_type();
}

GType Drawable::get_base_type()
{
  return gdk_gl_drawable_get_type();
}


bool Drawable::make_current(const Glib::RefPtr<Context>& glcontext)
{
  return gdk_gl_drawable_make_current(gobj(), const_cast<GdkGLContext*>(Glib::unwrap(glcontext)));
}

bool Drawable::is_double_buffered() const
{
  return gdk_gl_drawable_is_double_buffered(const_cast<GdkGLDrawable*>(gobj()));
}

void Drawable::swap_buffers()
{
  gdk_gl_drawable_swap_buffers(gobj());
}

void Drawable::wait_gl()
{
  gdk_gl_drawable_wait_gl(gobj());
}

void Drawable::wait_gdk()
{
  gdk_gl_drawable_wait_gdk(gobj());
}

bool Drawable::gl_begin(const Glib::RefPtr<Context>& glcontext)
{
  return gdk_gl_drawable_gl_begin(gobj(), const_cast<GdkGLContext*>(Glib::unwrap(glcontext)));
}

void Drawable::gl_end()
{
  gdk_gl_drawable_gl_end(gobj());
}

Glib::RefPtr<Config> Drawable::get_gl_config()
{

  Glib::RefPtr<Config> retvalue = Glib::wrap((GdkGLConfig*)(gdk_gl_drawable_get_gl_config(gobj())));

  if(retvalue)
    retvalue->reference(); //The function does not do a ref for us.
  return retvalue;
}

Glib::RefPtr<const Config> Drawable::get_gl_config() const
{

  Glib::RefPtr<const Config> retvalue = Glib::wrap((GdkGLConfig*)(gdk_gl_drawable_get_gl_config(const_cast<GdkGLDrawable*>(gobj()))));

  if(retvalue)
    retvalue->reference(); //The function does not do a ref for us.
  return retvalue;
}

void Drawable::get_size(int& width, int& height)
{
  gdk_gl_drawable_get_size(gobj(), &width, &height);
}

Glib::RefPtr<Drawable> Drawable::get_current()
{

  Glib::RefPtr<Drawable> retvalue = Glib::wrap((GdkGLDrawable*)(gdk_gl_drawable_get_current()));

  if(retvalue)
    retvalue->reference(); //The function does not do a ref for us.
  return retvalue;
}

void Drawable::draw_cube(bool solid, double size)
{
  gdk_gl_draw_cube(static_cast<int>(solid), size);
}

void Drawable::draw_sphere(bool solid, double radius, int slices, int stacks)
{
  gdk_gl_draw_sphere(static_cast<int>(solid), radius, slices, stacks);
}

void Drawable::draw_cone(bool solid, double base, double height, int slices, int stacks)
{
  gdk_gl_draw_cone(static_cast<int>(solid), base, height, slices, stacks);
}

void Drawable::draw_torus(bool solid, double inner_radius, double outer_radius, int nsides, int rings)
{
  gdk_gl_draw_torus(static_cast<int>(solid), inner_radius, outer_radius, nsides, rings);
}

void Drawable::draw_tetrahedron(bool solid)
{
  gdk_gl_draw_tetrahedron(static_cast<int>(solid));
}

void Drawable::draw_octahedron(bool solid)
{
  gdk_gl_draw_octahedron(static_cast<int>(solid));
}

void Drawable::draw_dodecahedron(bool solid)
{
  gdk_gl_draw_dodecahedron(static_cast<int>(solid));
}

void Drawable::draw_icosahedron(bool solid)
{
  gdk_gl_draw_icosahedron(static_cast<int>(solid));
}

void Drawable::draw_teapot(bool solid, double scale)
{
  gdk_gl_draw_teapot(static_cast<int>(solid), scale);
}


} // namespace GL

} // namespace Gdk


